"use strict";

const cp = require("child_process");

const {
  Directory
} = require("atom");

const VIRTUAL_ENV_BIN_DIRS = ["bin", "Scripts"];
const VIRTUAL_ENV_EXECUTABLES = ["python", "python.exe"];

function detectPipEnv(path) {
  return new Promise(resolve => {
    const pipEnvProcess = cp.spawn("pipenv", ["--venv"], {
      cwd: path
    });
    pipEnvProcess.stdout.on("data", data => {
      resolve(`${data}`.trim());
    });
    pipEnvProcess.stderr.on("data", () => {
      resolve(null);
    });
    pipEnvProcess.on("error", () => {
      resolve(null);
    });
  });
}

async function detectVirtualEnv(path) {
  const entries = await new Promise(resolve => new Directory(path).getEntries((error, entries) => {
    if (error === null) {
      resolve(entries);
    } else {
      resolve(null);
    }
  }));

  if (entries) {
    for (let entry of entries) {
      if (entry.isDirectory()) {
        if (VIRTUAL_ENV_BIN_DIRS.indexOf(entry.getBaseName()) !== -1) {
          for (let executable of VIRTUAL_ENV_EXECUTABLES) {
            if (await entry.getFile(executable).exists()) {
              return path;
            }
          }
        } else {
          for (let dir_name of VIRTUAL_ENV_BIN_DIRS) {
            for (let executable of VIRTUAL_ENV_EXECUTABLES) {
              if (await entry.getSubdirectory(dir_name).getFile(executable).exists()) {
                return entry.getPath();
              }
            }
          }
        }
      }
    }
  }
}

function sanitizeConfig(config) {
  Object.entries(config).forEach(([key, value]) => {
    if (value === "null") {
      config[key] = null;
    }
  });
  return config;
}

function replacePipEnvPathVar(pythonPath, pipEnvPath) {
  if (pythonPath.indexOf("$PIPENV_PATH") !== -1 && pipEnvPath) {
    return pythonPath.replace("$PIPENV_PATH", pipEnvPath);
  }

  return pythonPath;
}

exports.detectVirtualEnv = detectVirtualEnv;
exports.sanitizeConfig = sanitizeConfig;
exports.detectPipEnv = detectPipEnv;
exports.replacePipEnvPathVar = replacePipEnvPathVar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImNwIiwicmVxdWlyZSIsIkRpcmVjdG9yeSIsIlZJUlRVQUxfRU5WX0JJTl9ESVJTIiwiVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMiLCJkZXRlY3RQaXBFbnYiLCJwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwaXBFbnZQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJ0cmltIiwic3RkZXJyIiwiZGV0ZWN0VmlydHVhbEVudiIsImVudHJpZXMiLCJnZXRFbnRyaWVzIiwiZXJyb3IiLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiaW5kZXhPZiIsImdldEJhc2VOYW1lIiwiZXhlY3V0YWJsZSIsImdldEZpbGUiLCJleGlzdHMiLCJkaXJfbmFtZSIsImdldFN1YmRpcmVjdG9yeSIsImdldFBhdGgiLCJzYW5pdGl6ZUNvbmZpZyIsImNvbmZpZyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2VQaXBFbnZQYXRoVmFyIiwicHl0aG9uUGF0aCIsInBpcEVudlBhdGgiLCJyZXBsYWNlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQWxCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLE1BQUQsQ0FBN0I7O0FBRUEsTUFBTUUsb0JBQW9CLEdBQUcsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUE3QjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQUMsUUFBRCxFQUFXLFlBQVgsQ0FBaEM7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDMUIsU0FBTyxJQUFJQyxPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUM5QixVQUFNQyxhQUFhLEdBQUdULEVBQUUsQ0FBQ1UsS0FBSCxDQUFTLFFBQVQsRUFBbUIsQ0FBQyxRQUFELENBQW5CLEVBQStCO0FBQ25EQyxNQUFB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LE9BQU8sQ0FBQ1YsY0FBUixHQUF5QkEsY0FBekI7QUFDQVUsT0FBTyxDQUFDcEMsWUFBUixHQUF1QkEsWUFBdkI7QUFDQW9DLE9BQU8sQ0FBQ0osb0JBQVIsR0FBK0JBLG9CQUEvQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNwID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIilcbmNvbnN0IHsgRGlyZWN0b3J5IH0gPSByZXF1aXJlKFwiYXRvbVwiKVxuXG5jb25zdCBWSVJUVUFMX0VOVl9CSU5fRElSUyA9IFtcImJpblwiLCBcIlNjcmlwdHNcIl1cbmNvbnN0IFZJUlRVQUxfRU5WX0VYRUNVVEFCTEVTID0gW1wicHl0aG9uXCIsIFwicHl0aG9uLmV4ZVwiXVxuXG5mdW5jdGlvbiBkZXRlY3RQaXBFbnYocGF0aCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBwaXBFbnZQcm9jZXNzID0gY3Auc3Bhd24oXCJwaXBlbnZcIiwgW1wiLS12ZW52XCJdLCB7XG4gICAgICBjd2Q6IHBhdGgsXG4gICAgfSlcbiAgICBwaXBFbnZQcm9jZXNzLnN0ZG91dC5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgIHJlc29sdmUoYCR7ZGF0YX1gLnRyaW0oKSlcbiAgICB9KVxuICAgIHBpcEVudlByb2Nlc3Muc3RkZXJyLm9uKFwiZGF0YVwiLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKG51bGwpXG4gICAgfSlcbiAgICBwaXBFbnZQcm9jZXNzLm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShudWxsKVxuICAgIH0pXG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdFZpcnR1YWxFbnYocGF0aCkge1xuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+XG4gICAgbmV3IERpcmVjdG9yeShwYXRoKS5nZXRFbnRyaWVzKChlcnJvciwgZW50cmllcykgPT4ge1xuICAgICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgIHJlc29sdmUoZW50cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgIH1cbiAgICB9KVxuICApXG4gIGlmIChlbnRyaWVzKSB7XG4gICAgZm9yIChsZXQgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgaWYgKFZJUlRVQUxfRU5WX0JJTl9ESVJTLmluZGV4T2YoZW50cnkuZ2V0QmFzZU5hbWUoKSkgIT09IC0xKSB7XG4gICAgICAgICAgZm9yIChsZXQgZXhlY3V0YWJsZSBvZiBWSVJUVUFMX0VOVl9FWEVDVVRBQkxFUykge1xuICAgICAgICAgICAgaWYgKGF3YWl0IGVudHJ5LmdldEZpbGUoZXhlY3V0YWJsZSkuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgZGlyX25hbWUgb2YgVklSVFVBTF9FTlZfQklOX0RJUlMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGV4ZWN1dGFibGUgb2YgVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMpIHtcbiAgICAgICAgICAgICAgaWYgKGF3YWl0IGVudHJ5LmdldFN1YmRpcmVjdG9yeShkaXJfbmFtZSkuZ2V0RmlsZShleGVjdXRhYmxlKS5leGlzdHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXRQYXRoKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZUNvbmZpZyhjb25maWcpIHtcbiAgT2JqZWN0LmVudHJpZXMoY29uZmlnKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IFwibnVsbFwiKSB7XG4gICAgICBjb25maWdba2V5XSA9IG51bGxcbiAgICB9XG4gIH0pXG4gIHJldHVybiBjb25maWdcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVBpcEVudlBhdGhWYXIocHl0aG9uUGF0aCwgcGlwRW52UGF0aCkge1xuICBpZiAocHl0aG9uUGF0aC5pbmRleE9mKFwiJFBJUEVOVl9QQVRIXCIpICE9PSAtMSAmJiBwaXBFbnZQYXRoKSB7XG4gICAgcmV0dXJuIHB5dGhvblBhdGgucmVwbGFjZShcIiRQSVBFTlZfUEFUSFwiLCBwaXBFbnZQYXRoKVxuICB9XG4gIHJldHVybiBweXRob25QYXRoXG59XG5cbmV4cG9ydHMuZGV0ZWN0VmlydHVhbEVudiA9IGRldGVjdFZpcnR1YWxFbnZcbmV4cG9ydHMuc2FuaXRpemVDb25maWcgPSBzYW5pdGl6ZUNvbmZpZ1xuZXhwb3J0cy5kZXRlY3RQaXBFbnYgPSBkZXRlY3RQaXBFbnZcbmV4cG9ydHMucmVwbGFjZVBpcEVudlBhdGhWYXIgPSByZXBsYWNlUGlwRW52UGF0aFZhclxuIl19