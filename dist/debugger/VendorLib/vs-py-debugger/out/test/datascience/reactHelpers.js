// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const enzyme_1 = require("enzyme");

const Adapter = require("enzyme-adapter-react-16");

const jsdom_1 = require("jsdom");

function setUpDomEnvironment() {
  // tslint:disable-next-line:no-http-string
  const dom = new jsdom_1.JSDOM('<!doctype html><html><body><div id="root"></div></body></html>', {
    pretendToBeVisual: true,
    url: 'http://localhost'
  });
  const {
    window
  } = dom; // tslint:disable-next-line:no-string-literal

  global['window'] = window; // tslint:disable-next-line:no-string-literal

  global['document'] = window.document; // tslint:disable-next-line:no-string-literal

  global['navigator'] = {
    userAgent: 'node.js',
    platform: 'node'
  }; // tslint:disable-next-line:no-string-literal

  global['self'] = window;
  copyProps(window, global); // Special case. Transform needs createRange
  // tslint:disable-next-line:no-string-literal

  global['document'].createRange = () => ({
    createContextualFragment: str => jsdom_1.JSDOM.fragment(str)
  }); // For Jupyter server to load correctly. It expects the window object to not be defined
  // tslint:disable-next-line:no-eval


  const fetchMod = eval('require')('node-fetch'); // tslint:disable-next-line:no-string-literal

  global['fetch'] = fetchMod; // tslint:disable-next-line:no-string-literal

  global['Request'] = fetchMod.Request; // tslint:disable-next-line:no-string-literal

  global['Headers'] = fetchMod.Headers; // tslint:disable-next-line:no-string-literal no-eval

  global['WebSocket'] = eval('require')('ws'); // For the loc test to work, we have to have a global getter for loc strings
  // tslint:disable-next-line:no-string-literal no-eval

  global['getLocStrings'] = () => {
    return {
      'DataScience.unknownMimeType': 'Unknown mime type from helper'
    };
  };

  enzyme_1.configure({
    adapter: new Adapter()
  });
}

exports.setUpDomEnvironment = setUpDomEnvironment;

function copyProps(src, target) {
  const props = Object.getOwnPropertyNames(src).filter(prop => typeof target[prop] === undefined);
  props.forEach(p => {
    target[p] = src[p];
  });
}

function waitForComponentDidUpdate(component) {
  return new Promise((resolve, reject) => {
    if (component) {
      let originalUpdateFunc = component.componentDidUpdate;

      if (originalUpdateFunc) {
        originalUpdateFunc = originalUpdateFunc.bind(component);
      } // tslint:disable-next-line:no-any


      component.componentDidUpdate = (prevProps, prevState, snapshot) => {
        // When the component updates, call the original function and resolve our promise
        if (originalUpdateFunc) {
          originalUpdateFunc(prevProps, prevState, snapshot);
        } // Reset our update function


        component.componentDidUpdate = originalUpdateFunc; // Finish the promise

        resolve();
      };
    } else {
      reject('Cannot find the component for waitForComponentDidUpdate');
    }
  });
}

function waitForRender(component) {
  return new Promise((resolve, reject) => {
    if (component) {
      let originalRenderFunc = component.render;

      if (originalRenderFunc) {
        originalRenderFunc = originalRenderFunc.bind(component);
      }

      component.render = () => {
        let result = null; // When the render occurs, call the original function and resolve our promise

        if (originalRenderFunc) {
          result = originalRenderFunc();
        } // Reset our render function


        component.render = originalRenderFunc;
        resolve();
        return result;
      };
    } else {
      reject('Cannot find the component for waitForRender');
    }
  });
}

function waitForUpdate(wrapper, mainClass) {
  return __awaiter(this, void 0, void 0, function* () {
    const mainObj = wrapper.find(mainClass).instance();

    if (mainObj) {
      // Hook the render first.
      const renderPromise = waitForRender(mainObj); // First wait for the update

      yield waitForComponentDidUpdate(mainObj); // Force a render

      wrapper.update(); // Wait for the render

      yield renderPromise;
    }
  });
}

exports.waitForUpdate = waitForUpdate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0SGVscGVycy5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiZW56eW1lXzEiLCJyZXF1aXJlIiwiQWRhcHRlciIsImpzZG9tXzEiLCJzZXRVcERvbUVudmlyb25tZW50IiwiZG9tIiwiSlNET00iLCJwcmV0ZW5kVG9CZVZpc3VhbCIsInVybCIsIndpbmRvdyIsImdsb2JhbCIsImRvY3VtZW50IiwidXNlckFnZW50IiwicGxhdGZvcm0iLCJjb3B5UHJvcHMiLCJjcmVhdGVSYW5nZSIsImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCIsInN0ciIsImZyYWdtZW50IiwiZmV0Y2hNb2QiLCJldmFsIiwiUmVxdWVzdCIsIkhlYWRlcnMiLCJjb25maWd1cmUiLCJhZGFwdGVyIiwic3JjIiwidGFyZ2V0IiwicHJvcHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwicHJvcCIsInVuZGVmaW5lZCIsImZvckVhY2giLCJwIiwid2FpdEZvckNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudCIsIm9yaWdpbmFsVXBkYXRlRnVuYyIsImNvbXBvbmVudERpZFVwZGF0ZSIsImJpbmQiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJzbmFwc2hvdCIsIndhaXRGb3JSZW5kZXIiLCJvcmlnaW5hbFJlbmRlckZ1bmMiLCJyZW5kZXIiLCJ3YWl0Rm9yVXBkYXRlIiwid3JhcHBlciIsIm1haW5DbGFzcyIsIm1haW5PYmoiLCJmaW5kIiwiaW5zdGFuY2UiLCJyZW5kZXJQcm9taXNlIiwidXBkYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtB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QUFrQixHQUFHQSxrQkFBa0IsQ0FBQ0wsSUFBbkIsQ0FBd0JILFNBQXhCLENBQXJCO0FBQ0g7O0FBQ0RBLE1BQUFBLFNBQVMsQ0FBQ1MsTUFBVixHQUFtQixNQUFNO0FBQ3JCLFlBQUluRCxNQUFNLEdBQUcsSUFBYixDQURxQixDQUVyQjs7QUFDQSxZQUFJa0Qsa0JBQUosRUFBd0I7QUFDcEJsRCxVQUFBQSxNQUFNLEdBQUdrRCxrQkFBa0IsRUFBM0I7QUFDSCxTQUxvQixDQU1yQjs7O0FBQ0FSLFFBQUFBLFNBQVMsQ0FBQ1MsTUFBVixHQUFtQkQsa0JBQW5CO0FBQ0ExRCxRQUFBQSxPQUFPO0FBQ1AsZUFBT1EsTUFBUDtBQUNILE9BVkQ7QUFXSCxLQWhCRCxNQWlCSztBQUNEUCxNQUFBQSxNQUFNLENBQUMsNkNBQUQsQ0FBTjtBQUNIO0FBQ0osR0FyQk0sQ0FBUDtBQXNCSDs7QUFDRCxTQUFTMkQsYUFBVCxDQUF1QkMsT0FBdkIsRUFBZ0NDLFNBQWhDLEVBQTJDO0FBQ3ZDLFNBQU9wRSxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRCxVQUFNcUUsT0FBTyxHQUFHRixPQUFPLENBQUNHLElBQVIsQ0FBYUYsU0FBYixFQUF3QkcsUUFBeEIsRUFBaEI7O0FBQ0EsUUFBSUYsT0FBSixFQUFhO0FBQ1Q7QUFDQSxZQUFNRyxhQUFhLEdBQUdULGFBQWEsQ0FBQ00sT0FBRCxDQUFuQyxDQUZTLENBR1Q7O0FBQ0EsWUFBTWQseUJBQXlCLENBQUNjLE9BQUQsQ0FBL0IsQ0FKUyxDQUtUOztBQUNBRixNQUFBQSxPQUFPLENBQUNNLE1BQVIsR0FOUyxDQU9UOztBQUNBLFlBQU1ELGFBQU47QUFDSDtBQUNKLEdBWmUsQ0FBaEI7QUFhSDs7QUFDRHBELE9BQU8sQ0FBQzhDLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVuenltZV8xID0gcmVxdWlyZShcImVuenltZVwiKTtcbmNvbnN0IEFkYXB0ZXIgPSByZXF1aXJlKFwiZW56eW1lLWFkYXB0ZXItcmVhY3QtMTZcIik7XG5jb25zdCBqc2RvbV8xID0gcmVxdWlyZShcImpzZG9tXCIpO1xuZnVuY3Rpb24gc2V0VXBEb21FbnZpcm9ubWVudCgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taHR0cC1zdHJpbmdcbiAgICBjb25zdCBkb20gPSBuZXcganNkb21fMS5KU0RPTSgnPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+PGRpdiBpZD1cInJvb3RcIj48L2Rpdj48L2JvZHk+PC9odG1sPicsIHsgcHJldGVuZFRvQmVWaXN1YWw6IHRydWUsIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3QnIH0pO1xuICAgIGNvbnN0IHsgd2luZG93IH0gPSBkb207XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgZ2xvYmFsWyd3aW5kb3cnXSA9IHdpbmRvdztcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICBnbG9iYWxbJ2RvY3VtZW50J10gPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgZ2xvYmFsWyduYXZpZ2F0b3InXSA9IHtcbiAgICAgICAgdXNlckFnZW50OiAnbm9kZS5qcycsXG4gICAgICAgIHBsYXRmb3JtOiAnbm9kZSdcbiAgICB9O1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgIGdsb2JhbFsnc2VsZiddID0gd2luZG93O1xuICAgIGNvcHlQcm9wcyh3aW5kb3csIGdsb2JhbCk7XG4gICAgLy8gU3BlY2lhbCBjYXNlLiBUcmFuc2Zvcm0gbmVlZHMgY3JlYXRlUmFuZ2VcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICBnbG9iYWxbJ2RvY3VtZW50J10uY3JlYXRlUmFuZ2UgPSAoKSA9PiAoe1xuICAgICAgICBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ6IHN0ciA9PiBqc2RvbV8xLkpTRE9NLmZyYWdtZW50KHN0cilcbiAgICB9KTtcbiAgICAvLyBGb3IgSnVweXRlciBzZXJ2ZXIgdG8gbG9hZCBjb3JyZWN0bHkuIEl0IGV4cGVjdHMgdGhlIHdpbmRvdyBvYmplY3QgdG8gbm90IGJlIGRlZmluZWRcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZXZhbFxuICAgIGNvbnN0IGZldGNoTW9kID0gZXZhbCgncmVxdWlyZScpKCdub2RlLWZldGNoJyk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgZ2xvYmFsWydmZXRjaCddID0gZmV0Y2hNb2Q7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgZ2xvYmFsWydSZXF1ZXN0J10gPSBmZXRjaE1vZC5SZXF1ZXN0O1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgIGdsb2JhbFsnSGVhZGVycyddID0gZmV0Y2hNb2QuSGVhZGVycztcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWwgbm8tZXZhbFxuICAgIGdsb2JhbFsnV2ViU29ja2V0J10gPSBldmFsKCdyZXF1aXJlJykoJ3dzJyk7XG4gICAgLy8gRm9yIHRoZSBsb2MgdGVzdCB0byB3b3JrLCB3ZSBoYXZlIHRvIGhhdmUgYSBnbG9iYWwgZ2V0dGVyIGZvciBsb2Mgc3RyaW5nc1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbCBuby1ldmFsXG4gICAgZ2xvYmFsWydnZXRMb2NTdHJpbmdzJ10gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7ICdEYXRhU2NpZW5jZS51bmtub3duTWltZVR5cGUnOiAnVW5rbm93biBtaW1lIHR5cGUgZnJvbSBoZWxwZXInIH07XG4gICAgfTtcbiAgICBlbnp5bWVfMS5jb25maWd1cmUoeyBhZGFwdGVyOiBuZXcgQWRhcHRlcigpIH0pO1xufVxuZXhwb3J0cy5zZXRVcERvbUVudmlyb25tZW50ID0gc2V0VXBEb21FbnZpcm9ubWVudDtcbmZ1bmN0aW9uIGNvcHlQcm9wcyhzcmMsIHRhcmdldCkge1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc3JjKVxuICAgICAgICAuZmlsdGVyKHByb3AgPT4gdHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gdW5kZWZpbmVkKTtcbiAgICBwcm9wcy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgIHRhcmdldFtwXSA9IHNyY1twXTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHdhaXRGb3JDb21wb25lbnREaWRVcGRhdGUoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgbGV0IG9yaWdpbmFsVXBkYXRlRnVuYyA9IGNvbXBvbmVudC5jb21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxVcGRhdGVGdW5jKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxVcGRhdGVGdW5jID0gb3JpZ2luYWxVcGRhdGVGdW5jLmJpbmQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRVcGRhdGUgPSAocHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgY29tcG9uZW50IHVwZGF0ZXMsIGNhbGwgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCByZXNvbHZlIG91ciBwcm9taXNlXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsVXBkYXRlRnVuYykge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFVwZGF0ZUZ1bmMocHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb3VyIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRVcGRhdGUgPSBvcmlnaW5hbFVwZGF0ZUZ1bmM7XG4gICAgICAgICAgICAgICAgLy8gRmluaXNoIHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnQ2Fubm90IGZpbmQgdGhlIGNvbXBvbmVudCBmb3Igd2FpdEZvckNvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiB3YWl0Rm9yUmVuZGVyKGNvbXBvbmVudCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxldCBvcmlnaW5hbFJlbmRlckZ1bmMgPSBjb21wb25lbnQucmVuZGVyO1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsUmVuZGVyRnVuYykge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVuZGVyRnVuYyA9IG9yaWdpbmFsUmVuZGVyRnVuYy5iaW5kKGNvbXBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQucmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHJlbmRlciBvY2N1cnMsIGNhbGwgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCByZXNvbHZlIG91ciBwcm9taXNlXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsUmVuZGVyRnVuYykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcmlnaW5hbFJlbmRlckZ1bmMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb3VyIHJlbmRlciBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5yZW5kZXIgPSBvcmlnaW5hbFJlbmRlckZ1bmM7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdDYW5ub3QgZmluZCB0aGUgY29tcG9uZW50IGZvciB3YWl0Rm9yUmVuZGVyJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHdhaXRGb3JVcGRhdGUod3JhcHBlciwgbWFpbkNsYXNzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgbWFpbk9iaiA9IHdyYXBwZXIuZmluZChtYWluQ2xhc3MpLmluc3RhbmNlKCk7XG4gICAgICAgIGlmIChtYWluT2JqKSB7XG4gICAgICAgICAgICAvLyBIb29rIHRoZSByZW5kZXIgZmlyc3QuXG4gICAgICAgICAgICBjb25zdCByZW5kZXJQcm9taXNlID0gd2FpdEZvclJlbmRlcihtYWluT2JqKTtcbiAgICAgICAgICAgIC8vIEZpcnN0IHdhaXQgZm9yIHRoZSB1cGRhdGVcbiAgICAgICAgICAgIHlpZWxkIHdhaXRGb3JDb21wb25lbnREaWRVcGRhdGUobWFpbk9iaik7XG4gICAgICAgICAgICAvLyBGb3JjZSBhIHJlbmRlclxuICAgICAgICAgICAgd3JhcHBlci51cGRhdGUoKTtcbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSByZW5kZXJcbiAgICAgICAgICAgIHlpZWxkIHJlbmRlclByb21pc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMud2FpdEZvclVwZGF0ZSA9IHdhaXRGb3JVcGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdEhlbHBlcnMuanMubWFwIl19