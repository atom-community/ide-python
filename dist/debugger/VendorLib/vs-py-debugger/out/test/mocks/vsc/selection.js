/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:all

const position_1 = require("./position");

const range_1 = require("./range");

var vscMockSelection;

(function (vscMockSelection) {
  /**
   * The direction of a selection.
   */
  let SelectionDirection;

  (function (SelectionDirection) {
    /**
     * The selection starts above where it ends.
     */
    SelectionDirection[SelectionDirection["LTR"] = 0] = "LTR";
    /**
     * The selection starts below where it ends.
     */

    SelectionDirection[SelectionDirection["RTL"] = 1] = "RTL";
  })(SelectionDirection = vscMockSelection.SelectionDirection || (vscMockSelection.SelectionDirection = {}));
  /**
   * A selection in the editor.
   * The selection is a range that has an orientation.
   */


  class Selection extends range_1.vscMockRange.Range {
    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {
      super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);
      this.selectionStartLineNumber = selectionStartLineNumber;
      this.selectionStartColumn = selectionStartColumn;
      this.positionLineNumber = positionLineNumber;
      this.positionColumn = positionColumn;
    }
    /**
     * Clone this selection.
     */


    clone() {
      return new Selection(this.selectionStartLineNumber, this.selectionStartColumn, this.positionLineNumber, this.positionColumn);
    }
    /**
     * Transform to a human-readable representation.
     */


    toString() {
      return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';
    }
    /**
     * Test if equals other selection.
     */


    equalsSelection(other) {
      return Selection.selectionsEqual(this, other);
    }
    /**
     * Test if the two selections are equal.
     */


    static selectionsEqual(a, b) {
      return a.selectionStartLineNumber === b.selectionStartLineNumber && a.selectionStartColumn === b.selectionStartColumn && a.positionLineNumber === b.positionLineNumber && a.positionColumn === b.positionColumn;
    }
    /**
     * Get directions (LTR or RTL).
     */


    getDirection() {
      if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {
        return SelectionDirection.LTR;
      }

      return SelectionDirection.RTL;
    }
    /**
     * Create a new selection with a different `positionLineNumber` and `positionColumn`.
     */


    setEndPosition(endLineNumber, endColumn) {
      if (this.getDirection() === SelectionDirection.LTR) {
        return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);
      }

      return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);
    }
    /**
     * Get the position at `positionLineNumber` and `positionColumn`.
     */


    getPosition() {
      return new position_1.vscMockPosition.Position(this.positionLineNumber, this.positionColumn);
    }
    /**
     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.
     */


    setStartPosition(startLineNumber, startColumn) {
      if (this.getDirection() === SelectionDirection.LTR) {
        return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);
      }

      return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);
    } // ----

    /**
     * Create a `Selection` from one or two positions
     */


    static fromPositions(start, end = start) {
      return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);
    }
    /**
     * Create a `Selection` from an `ISelection`.
     */


    static liftSelection(sel) {
      return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);
    }
    /**
     * `a` equals `b`.
     */


    static selectionsArrEqual(a, b) {
      if (a && !b || !a && b) {
        return false;
      }

      if (!a && !b) {
        return true;
      }

      if (a.length !== b.length) {
        return false;
      }

      for (var i = 0, len = a.length; i < len; i++) {
        if (!this.selectionsEqual(a[i], b[i])) {
          return false;
        }
      }

      return true;
    }
    /**
     * Test if `obj` is an `ISelection`.
     */


    static isISelection(obj) {
      return obj && typeof obj.selectionStartLineNumber === 'number' && typeof obj.selectionStartColumn === 'number' && typeof obj.positionLineNumber === 'number' && typeof obj.positionColumn === 'number';
    }
    /**
     * Create with a direction.
     */


    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {
      if (direction === SelectionDirection.LTR) {
        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);
      }

      return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);
    }

  }

  vscMockSelection.Selection = Selection;
})(vscMockSelection = exports.vscMockSelection || (exports.vscMockSelection = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,