// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-invalid-this no-require-imports no-var-requires no-any

const TypeMoq = require("typemoq");

const vscodeMocks = require("./mocks/vsc");

const telemetryReporter_1 = require("./mocks/vsc/telemetryReporter");

const Module = require('module');

const mockedVSCode = {};
const mockedVSCodeNamespaces = {};
const originalLoad = Module._load;

function generateMock(name) {
  const mockedObj = TypeMoq.Mock.ofType();
  mockedVSCode[name] = mockedObj.object;
  mockedVSCodeNamespaces[name] = mockedObj;
}

function initialize() {
  generateMock('workspace');
  generateMock('window');
  generateMock('commands');
  generateMock('languages');
  generateMock('env');
  generateMock('debug');
  generateMock('scm'); // When upgrading to npm 9-10, this might have to change, as we could have explicit imports (named imports).

  Module._load = function (request, parent) {
    if (request === 'vscode') {
      return mockedVSCode;
    }

    if (request === 'vscode-extension-telemetry') {
      return {
        default: telemetryReporter_1.vscMockTelemetryReporter
      };
    }

    return originalLoad.apply(this, arguments);
  };
}

exports.initialize = initialize;
mockedVSCode.Disposable = vscodeMocks.vscMock.Disposable;
mockedVSCode.EventEmitter = vscodeMocks.vscMock.EventEmitter;
mockedVSCode.CancellationTokenSource = vscodeMocks.vscMock.CancellationTokenSource;
mockedVSCode.CompletionItemKind = vscodeMocks.vscMock.CompletionItemKind;
mockedVSCode.SymbolKind = vscodeMocks.vscMock.SymbolKind;
mockedVSCode.Uri = vscodeMocks.vscMock.Uri;
mockedVSCode.Range = vscodeMocks.vscMockExtHostedTypes.Range;
mockedVSCode.Position = vscodeMocks.vscMockExtHostedTypes.Position;
mockedVSCode.Selection = vscodeMocks.vscMockExtHostedTypes.Selection;
mockedVSCode.Location = vscodeMocks.vscMockExtHostedTypes.Location;
mockedVSCode.SymbolInformation = vscodeMocks.vscMockExtHostedTypes.SymbolInformation;
mockedVSCode.CompletionItem = vscodeMocks.vscMockExtHostedTypes.CompletionItem;
mockedVSCode.CompletionItemKind = vscodeMocks.vscMockExtHostedTypes.CompletionItemKind;
mockedVSCode.CodeLens = vscodeMocks.vscMockExtHostedTypes.CodeLens;
mockedVSCode.DiagnosticSeverity = vscodeMocks.vscMockExtHostedTypes.DiagnosticSeverity;
mockedVSCode.SnippetString = vscodeMocks.vscMockExtHostedTypes.SnippetString;
mockedVSCode.EventEmitter = vscodeMocks.vscMock.EventEmitter;
mockedVSCode.ConfigurationTarget = vscodeMocks.vscMockExtHostedTypes.ConfigurationTarget;
mockedVSCode.StatusBarAlignment = vscodeMocks.vscMockExtHostedTypes.StatusBarAlignment;
mockedVSCode.SignatureHelp = vscodeMocks.vscMockExtHostedTypes.SignatureHelp;
mockedVSCode.DocumentLink = vscodeMocks.vscMockExtHostedTypes.DocumentLink;
mockedVSCode.TextEdit = vscodeMocks.vscMockExtHostedTypes.TextEdit;
mockedVSCode.WorkspaceEdit = vscodeMocks.vscMockExtHostedTypes.WorkspaceEdit;
mockedVSCode.RelativePattern = vscodeMocks.vscMockExtHostedTypes.RelativePattern;
mockedVSCode.ProgressLocation = vscodeMocks.vscMockExtHostedTypes.ProgressLocation; // This API is used in src/client/telemetry/telemetry.ts

const extensions = TypeMoq.Mock.ofType();
extensions.setup(e => e.all).returns(() => []);
const extension = TypeMoq.Mock.ofType();
const packageJson = TypeMoq.Mock.ofType();
const contributes = TypeMoq.Mock.ofType();
extension.setup(e => e.packageJSON).returns(() => packageJson.object);
packageJson.setup(p => p.contributes).returns(() => contributes.object);
contributes.setup(p => p.debuggers).returns(() => [{
  aiKey: ''
}]);
extensions.setup(e => e.getExtension(TypeMoq.It.isAny())).returns(() => extension.object);
mockedVSCode.extensions = extensions.object;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZzY29kZS1tb2NrLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVHlwZU1vcSIsInJlcXVpcmUiLCJ2c2NvZGVNb2NrcyIsInRlbGVtZXRyeVJlcG9ydGVyXzEiLCJNb2R1bGUiLCJtb2NrZWRWU0NvZGUiLCJtb2NrZWRWU0NvZGVOYW1lc3BhY2VzIiwib3JpZ2luYWxMb2FkIiwiX2xvYWQiLCJnZW5lcmF0ZU1vY2siLCJuYW1lIiwibW9ja2VkT2JqIiwiTW9jayIsIm9mVHlwZSIsIm9iamVjdCIsImluaXRpYWxpemUiLCJyZXF1ZXN0IiwicGFyZW50IiwiZGVmYXVsdCIsInZzY01vY2tUZWxlbWV0cnlSZXBvcnRlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiRGlzcG9zYWJsZSIsInZzY01vY2siLCJFdmVudEVtaXR0ZXIiLCJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsIkNvbXBsZXRpb25JdGVtS2luZCIsIlN5bWJvbEtpbmQiLCJVcmkiLCJSYW5nZSIsInZzY01vY2tFeHRIb3N0ZWRUeXBlcyIsIlBvc2l0aW9uIiwiU2VsZWN0aW9uIiwiTG9jYXRpb24iLCJTeW1ib2xJbmZvcm1hdGlvbiIsIkNvbXBsZXRpb25JdGVtIiwiQ29kZUxlbnMiLCJEaWFnbm9zdGljU2V2ZXJpdHkiLCJTbmlwcGV0U3RyaW5nIiwiQ29uZmlndXJhdGlvblRhcmdldCIsIlN0YXR1c0JhckFsaWdubWVudCIsIlNpZ25hdHVyZUhlbHAiLCJEb2N1bWVudExpbmsiLCJUZXh0RWRpdCIsIldvcmtzcGFjZUVkaXQiLCJSZWxhdGl2ZVBhdHRlcm4iLCJQcm9ncmVzc0xvY2F0aW9uIiwiZXh0ZW5zaW9ucyIsInNldHVwIiwiZSIsImFsbCIsInJldHVybnMiLCJleHRlbnNpb24iLCJwYWNrYWdlSnNvbiIsImNvbnRyaWJ1dGVzIiwicGFja2FnZUpTT04iLCJwIiwiZGVidWdnZXJzIiwiYWlLZXkiLCJnZXRFeHRlbnNpb24iLCJJ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YixHQUEwQkEsVUFBVSxDQUFDakMsTUFBckMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHRzbGludDpkaXNhYmxlOm5vLWludmFsaWQtdGhpcyBuby1yZXF1aXJlLWltcG9ydHMgbm8tdmFyLXJlcXVpcmVzIG5vLWFueVxuY29uc3QgVHlwZU1vcSA9IHJlcXVpcmUoXCJ0eXBlbW9xXCIpO1xuY29uc3QgdnNjb2RlTW9ja3MgPSByZXF1aXJlKFwiLi9tb2Nrcy92c2NcIik7XG5jb25zdCB0ZWxlbWV0cnlSZXBvcnRlcl8xID0gcmVxdWlyZShcIi4vbW9ja3MvdnNjL3RlbGVtZXRyeVJlcG9ydGVyXCIpO1xuY29uc3QgTW9kdWxlID0gcmVxdWlyZSgnbW9kdWxlJyk7XG5jb25zdCBtb2NrZWRWU0NvZGUgPSB7fTtcbmNvbnN0IG1vY2tlZFZTQ29kZU5hbWVzcGFjZXMgPSB7fTtcbmNvbnN0IG9yaWdpbmFsTG9hZCA9IE1vZHVsZS5fbG9hZDtcbmZ1bmN0aW9uIGdlbmVyYXRlTW9jayhuYW1lKSB7XG4gICAgY29uc3QgbW9ja2VkT2JqID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xuICAgIG1vY2tlZFZTQ29kZVtuYW1lXSA9IG1vY2tlZE9iai5vYmplY3Q7XG4gICAgbW9ja2VkVlNDb2RlTmFtZXNwYWNlc1tuYW1lXSA9IG1vY2tlZE9iajtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgZ2VuZXJhdGVNb2NrKCd3b3Jrc3BhY2UnKTtcbiAgICBnZW5lcmF0ZU1vY2soJ3dpbmRvdycpO1xuICAgIGdlbmVyYXRlTW9jaygnY29tbWFuZHMnKTtcbiAgICBnZW5lcmF0ZU1vY2soJ2xhbmd1YWdlcycpO1xuICAgIGdlbmVyYXRlTW9jaygnZW52Jyk7XG4gICAgZ2VuZXJhdGVNb2NrKCdkZWJ1ZycpO1xuICAgIGdlbmVyYXRlTW9jaygnc2NtJyk7XG4gICAgLy8gV2hlbiB1cGdyYWRpbmcgdG8gbnBtIDktMTAsIHRoaXMgbWlnaHQgaGF2ZSB0byBjaGFuZ2UsIGFzIHdlIGNvdWxkIGhhdmUgZXhwbGljaXQgaW1wb3J0cyAobmFtZWQgaW1wb3J0cykuXG4gICAgTW9kdWxlLl9sb2FkID0gZnVuY3Rpb24gKHJlcXVlc3QsIHBhcmVudCkge1xuICAgICAgICBpZiAocmVxdWVzdCA9PT0gJ3ZzY29kZScpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2NrZWRWU0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcXVlc3QgPT09ICd2c2NvZGUtZXh0ZW5zaW9uLXRlbGVtZXRyeScpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IHRlbGVtZXRyeVJlcG9ydGVyXzEudnNjTW9ja1RlbGVtZXRyeVJlcG9ydGVyIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTG9hZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5leHBvcnRzLmluaXRpYWxpemUgPSBpbml0aWFsaXplO1xubW9ja2VkVlNDb2RlLkRpc3Bvc2FibGUgPSB2c2NvZGVNb2Nrcy52c2NNb2NrLkRpc3Bvc2FibGU7XG5tb2NrZWRWU0NvZGUuRXZlbnRFbWl0dGVyID0gdnNjb2RlTW9ja3MudnNjTW9jay5FdmVudEVtaXR0ZXI7XG5tb2NrZWRWU0NvZGUuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSB2c2NvZGVNb2Nrcy52c2NNb2NrLkNhbmNlbGxhdGlvblRva2VuU291cmNlO1xubW9ja2VkVlNDb2RlLkNvbXBsZXRpb25JdGVtS2luZCA9IHZzY29kZU1vY2tzLnZzY01vY2suQ29tcGxldGlvbkl0ZW1LaW5kO1xubW9ja2VkVlNDb2RlLlN5bWJvbEtpbmQgPSB2c2NvZGVNb2Nrcy52c2NNb2NrLlN5bWJvbEtpbmQ7XG5tb2NrZWRWU0NvZGUuVXJpID0gdnNjb2RlTW9ja3MudnNjTW9jay5Vcmk7XG5tb2NrZWRWU0NvZGUuUmFuZ2UgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuUmFuZ2U7XG5tb2NrZWRWU0NvZGUuUG9zaXRpb24gPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuUG9zaXRpb247XG5tb2NrZWRWU0NvZGUuU2VsZWN0aW9uID0gdnNjb2RlTW9ja3MudnNjTW9ja0V4dEhvc3RlZFR5cGVzLlNlbGVjdGlvbjtcbm1vY2tlZFZTQ29kZS5Mb2NhdGlvbiA9IHZzY29kZU1vY2tzLnZzY01vY2tFeHRIb3N0ZWRUeXBlcy5Mb2NhdGlvbjtcbm1vY2tlZFZTQ29kZS5TeW1ib2xJbmZvcm1hdGlvbiA9IHZzY29kZU1vY2tzLnZzY01vY2tFeHRIb3N0ZWRUeXBlcy5TeW1ib2xJbmZvcm1hdGlvbjtcbm1vY2tlZFZTQ29kZS5Db21wbGV0aW9uSXRlbSA9IHZzY29kZU1vY2tzLnZzY01vY2tFeHRIb3N0ZWRUeXBlcy5Db21wbGV0aW9uSXRlbTtcbm1vY2tlZFZTQ29kZS5Db21wbGV0aW9uSXRlbUtpbmQgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuQ29tcGxldGlvbkl0ZW1LaW5kO1xubW9ja2VkVlNDb2RlLkNvZGVMZW5zID0gdnNjb2RlTW9ja3MudnNjTW9ja0V4dEhvc3RlZFR5cGVzLkNvZGVMZW5zO1xubW9ja2VkVlNDb2RlLkRpYWdub3N0aWNTZXZlcml0eSA9IHZzY29kZU1vY2tzLnZzY01vY2tFeHRIb3N0ZWRUeXBlcy5EaWFnbm9zdGljU2V2ZXJpdHk7XG5tb2NrZWRWU0NvZGUuU25pcHBldFN0cmluZyA9IHZzY29kZU1vY2tzLnZzY01vY2tFeHRIb3N0ZWRUeXBlcy5TbmlwcGV0U3RyaW5nO1xubW9ja2VkVlNDb2RlLkV2ZW50RW1pdHRlciA9IHZzY29kZU1vY2tzLnZzY01vY2suRXZlbnRFbWl0dGVyO1xubW9ja2VkVlNDb2RlLkNvbmZpZ3VyYXRpb25UYXJnZXQgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuQ29uZmlndXJhdGlvblRhcmdldDtcbm1vY2tlZFZTQ29kZS5TdGF0dXNCYXJBbGlnbm1lbnQgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuU3RhdHVzQmFyQWxpZ25tZW50O1xubW9ja2VkVlNDb2RlLlNpZ25hdHVyZUhlbHAgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuU2lnbmF0dXJlSGVscDtcbm1vY2tlZFZTQ29kZS5Eb2N1bWVudExpbmsgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuRG9jdW1lbnRMaW5rO1xubW9ja2VkVlNDb2RlLlRleHRFZGl0ID0gdnNjb2RlTW9ja3MudnNjTW9ja0V4dEhvc3RlZFR5cGVzLlRleHRFZGl0O1xubW9ja2VkVlNDb2RlLldvcmtzcGFjZUVkaXQgPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuV29ya3NwYWNlRWRpdDtcbm1vY2tlZFZTQ29kZS5SZWxhdGl2ZVBhdHRlcm4gPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuUmVsYXRpdmVQYXR0ZXJuO1xubW9ja2VkVlNDb2RlLlByb2dyZXNzTG9jYXRpb24gPSB2c2NvZGVNb2Nrcy52c2NNb2NrRXh0SG9zdGVkVHlwZXMuUHJvZ3Jlc3NMb2NhdGlvbjtcbi8vIFRoaXMgQVBJIGlzIHVzZWQgaW4gc3JjL2NsaWVudC90ZWxlbWV0cnkvdGVsZW1ldHJ5LnRzXG5jb25zdCBleHRlbnNpb25zID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xuZXh0ZW5zaW9ucy5zZXR1cChlID0+IGUuYWxsKS5yZXR1cm5zKCgpID0+IFtdKTtcbmNvbnN0IGV4dGVuc2lvbiA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcbmNvbnN0IHBhY2thZ2VKc29uID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xuY29uc3QgY29udHJpYnV0ZXMgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCk7XG5leHRlbnNpb24uc2V0dXAoZSA9PiBlLnBhY2thZ2VKU09OKS5yZXR1cm5zKCgpID0+IHBhY2thZ2VKc29uLm9iamVjdCk7XG5wYWNrYWdlSnNvbi5zZXR1cChwID0+IHAuY29udHJpYnV0ZXMpLnJldHVybnMoKCkgPT4gY29udHJpYnV0ZXMub2JqZWN0KTtcbmNvbnRyaWJ1dGVzLnNldHVwKHAgPT4gcC5kZWJ1Z2dlcnMpLnJldHVybnMoKCkgPT4gW3sgYWlLZXk6ICcnIH1dKTtcbmV4dGVuc2lvbnMuc2V0dXAoZSA9PiBlLmdldEV4dGVuc2lvbihUeXBlTW9xLkl0LmlzQW55KCkpKS5yZXR1cm5zKCgpID0+IGV4dGVuc2lvbi5vYmplY3QpO1xubW9ja2VkVlNDb2RlLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zLm9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZzY29kZS1tb2NrLmpzLm1hcCJdfQ==