// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable-next-line:no-any

if (Reflect.metadata === undefined) {
  // tslint:disable-next-line:no-require-imports no-var-requires
  require('reflect-metadata');
}

const ciConstants_1 = require("./ciConstants");

const constants_1 = require("./constants");

const testRunner = require("./testRunner");

process.env.VSC_PYTHON_CI_TEST = '1';
process.env.IS_MULTI_ROOT_TEST = constants_1.IS_MULTI_ROOT_TEST.toString(); // If running on CI server and we're running the debugger tests, then ensure we only run debug tests.
// We do this to ensure we only run debugger test, as debugger tests are very flaky on CI.
// So the solution is to run them separately and first on CI.

const grep = ciConstants_1.IS_CI_SERVER_TEST_DEBUGGER ? 'Debug' : undefined;
const testFilesSuffix = process.env.TEST_FILES_SUFFIX; // You can directly control Mocha options by uncommenting the following lines.
// See https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options for more info.
// Hack, as retries is not supported as setting in tsd.

const options = {
  ui: 'tdd',
  useColors: true,
  timeout: 25000,
  retries: 3,
  grep,
  testFilesSuffix
}; // VSTS CI doesn't display colours correctly (yet).

if (ciConstants_1.IS_VSTS) {
  options.useColors = false;
} // CI can ask for a JUnit reporter if the environment variable
// 'MOCHA_REPORTER_JUNIT' is defined, further control is afforded
// by other 'MOCHA_CI_...' variables. See constants.ts for info.


if (ciConstants_1.MOCHA_REPORTER_JUNIT) {
  options.reporter = ciConstants_1.MOCHA_CI_REPORTER_ID;
  options.reporterOptions = {
    mochaFile: ciConstants_1.MOCHA_CI_REPORTFILE,
    properties: ciConstants_1.MOCHA_CI_PROPERTIES
  };
}

process.on('unhandledRejection', (ex, a) => {
  const message = [`${ex}`];

  if (typeof ex !== 'string' && ex && ex.message) {
    message.push(ex.name);
    message.push(ex.message);

    if (ex.stack) {
      message.push(ex.stack);
    }
  }

  console.error(`Unhandled Promise Rejection with the message ${message.join(', ')}`);
});
testRunner.configure(options, {
  coverageConfig: '../coverconfig.json'
});
module.exports = testRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVmbGVjdCIsIm1ldGFkYXRhIiwidW5kZWZpbmVkIiwicmVxdWlyZSIsImNpQ29uc3RhbnRzXzEiLCJjb25zdGFudHNfMSIsInRlc3RSdW5uZXIiLCJwcm9jZXNzIiwiZW52IiwiVlNDX1BZVEhPTl9DSV9URVNUIiwiSVNfTVVMVElfUk9PVF9URVNUIiwidG9TdHJpbmciLCJncmVwIiwiSVNfQ0lfU0VSVkVSX1RFU1RfREVCVUdHRVIiLCJ0ZXN0RmlsZXNTdWZmaXgiLCJURVNUX0ZJTEVTX1NVRkZJWCIsIm9wdGlvbnMiLCJ1aSIsInVzZUNvbG9ycyIsInRpbWVvdXQiLCJyZXRyaWVzIiwiSVNfVlNUUyIsIk1PQ0hBX1JFUE9SVEVSX0pVTklUIiwicmVwb3J0ZXIiLCJNT0NIQV9DSV9SRVBPUlRFUl9JRCIsInJlcG9ydGVyT3B0aW9ucyIsIm1vY2hhRmlsZSIsIk1PQ0hBX0NJX1JFUE9SVEZJTEUiLCJwcm9wZXJ0aWVzIiwiTU9DSEFfQ0lfUFJPUEVSVElFUyIsIm9uIiwiZXgiLCJhIiwibWVzc2FnZSIsInB1c2giLCJuYW1lIiwic3RhY2siLCJjb25zb2xlIiwiZXJyb3IiLCJqb2luIiwiY29uZmlndXJlIiwiY292ZXJhZ2VDb25maWciLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3QyxFLENBQ0E7O0FBQ0EsSUFBSUMsT0FBTyxDQUFDQyxRQUFSLEtBQXFCQyxTQUF6QixFQUFvQztBQUNoQztBQUNBQyxFQUFBQSxPQUFPLENBQUMsa0JBQUQsQ0FBUDtBQUNIOztBQUNELE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUMsYUFBRCxDQUEzQjs7QUFDQSxNQUFNRyxVQUFVLEdBQUdILE9BQU8sQ0FBQyxjQUFELENBQTFCOztBQUNBSSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQVosR0FBaUMsR0FBakM7QUFDQUYsT0FBTyxDQUFDQyxHQUFSLENBQVlFLGtCQUFaLEdBQWlDTCxXQUFXLENBQUNLLGtCQUFaLENBQStCQyxRQUEvQixFQUFqQyxDLENBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1DLElBQUksR0FBR1IsYUFBYSxDQUFDUywwQkFBZCxHQUEyQyxPQUEzQyxHQUFxRFgsU0FBbEU7QUFDQSxNQUFNWSxlQUFlLEdBQUdQLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxpQkFBcEMsQyxDQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxPQUFPLEdBQUc7QUFDWkMsRUFBQUEsRUFBRSxFQUFFLEtBRFE7QUFFWkMsRUFBQUEsU0FBUyxFQUFFLElBRkM7QUFHWkMsRUFBQUEsT0FBTyxFQUFFLEtBSEc7QUFJWkMsRUFBQUEsT0FBTyxFQUFFLENBSkc7QUFLWlIsRUFBQUEsSUFMWTtBQU1aRSxFQUFBQTtBQU5ZLENBQWhCLEMsQ0FRQTs7QUFDQSxJQUFJVixhQUFhLENBQUNpQixPQUFsQixFQUEyQjtBQUN2QkwsRUFBQUEsT0FBTyxDQUFDRSxTQUFSLEdBQW9CLEtBQXBCO0FBQ0gsQyxDQUNEO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBSWQsYUFBYSxDQUFDa0Isb0JBQWxCLEVBQXdDO0FBQ3BDTixFQUFBQSxPQUFPLENBQUNPLFFBQVIsR0FBbUJuQixhQUFhLENBQUNvQixvQkFBakM7QUFDQVIsRUFBQUEsT0FBTyxDQUFDUyxlQUFSLEdBQTBCO0FBQ3RCQyxJQUFBQSxTQUFTLEVBQUV0QixhQUFhLENBQUN1QixtQkFESDtBQUV0QkMsSUFBQUEsVUFBVSxFQUFFeEIsYUFBYSxDQUFDeUI7QUFGSixHQUExQjtBQUlIOztBQUNEdEIsT0FBTyxDQUFDdUIsRUFBUixDQUFXLG9CQUFYLEVBQWlDLENBQUNDLEVBQUQsRUFBS0MsQ0FBTCxLQUFXO0FBQ3hDLFFBQU1DLE9BQU8sR0FBRyxDQUFFLEdBQUVGLEVBQUcsRUFBUCxDQUFoQjs7QUFDQSxNQUFJLE9BQU9BLEVBQVAsS0FBYyxRQUFkLElBQTBCQSxFQUExQixJQUFnQ0EsRUFBRSxDQUFDRSxPQUF2QyxFQUFnRDtBQUM1Q0EsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFILEVBQUUsQ0FBQ0ksSUFBaEI7QUFDQUYsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFILEVBQUUsQ0FBQ0UsT0FBaEI7O0FBQ0EsUUFBSUYsRUFBRSxDQUFDSyxLQUFQLEVBQWM7QUFDVkgsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFILEVBQUUsQ0FBQ0ssS0FBaEI7QUFDSDtBQUNKOztBQUNEQyxFQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBZSxnREFBK0NMLE9BQU8sQ0FBQ00sSUFBUixDQUFhLElBQWIsQ0FBbUIsRUFBakY7QUFDSCxDQVZEO0FBV0FqQyxVQUFVLENBQUNrQyxTQUFYLENBQXFCeEIsT0FBckIsRUFBOEI7QUFBRXlCLEVBQUFBLGNBQWMsRUFBRTtBQUFsQixDQUE5QjtBQUNBQyxNQUFNLENBQUM1QyxPQUFQLEdBQWlCUSxVQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuaWYgKFJlZmxlY3QubWV0YWRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1yZXF1aXJlLWltcG9ydHMgbm8tdmFyLXJlcXVpcmVzXG4gICAgcmVxdWlyZSgncmVmbGVjdC1tZXRhZGF0YScpO1xufVxuY29uc3QgY2lDb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NpQ29uc3RhbnRzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCB0ZXN0UnVubmVyID0gcmVxdWlyZShcIi4vdGVzdFJ1bm5lclwiKTtcbnByb2Nlc3MuZW52LlZTQ19QWVRIT05fQ0lfVEVTVCA9ICcxJztcbnByb2Nlc3MuZW52LklTX01VTFRJX1JPT1RfVEVTVCA9IGNvbnN0YW50c18xLklTX01VTFRJX1JPT1RfVEVTVC50b1N0cmluZygpO1xuLy8gSWYgcnVubmluZyBvbiBDSSBzZXJ2ZXIgYW5kIHdlJ3JlIHJ1bm5pbmcgdGhlIGRlYnVnZ2VyIHRlc3RzLCB0aGVuIGVuc3VyZSB3ZSBvbmx5IHJ1biBkZWJ1ZyB0ZXN0cy5cbi8vIFdlIGRvIHRoaXMgdG8gZW5zdXJlIHdlIG9ubHkgcnVuIGRlYnVnZ2VyIHRlc3QsIGFzIGRlYnVnZ2VyIHRlc3RzIGFyZSB2ZXJ5IGZsYWt5IG9uIENJLlxuLy8gU28gdGhlIHNvbHV0aW9uIGlzIHRvIHJ1biB0aGVtIHNlcGFyYXRlbHkgYW5kIGZpcnN0IG9uIENJLlxuY29uc3QgZ3JlcCA9IGNpQ29uc3RhbnRzXzEuSVNfQ0lfU0VSVkVSX1RFU1RfREVCVUdHRVIgPyAnRGVidWcnIDogdW5kZWZpbmVkO1xuY29uc3QgdGVzdEZpbGVzU3VmZml4ID0gcHJvY2Vzcy5lbnYuVEVTVF9GSUxFU19TVUZGSVg7XG4vLyBZb3UgY2FuIGRpcmVjdGx5IGNvbnRyb2wgTW9jaGEgb3B0aW9ucyBieSB1bmNvbW1lbnRpbmcgdGhlIGZvbGxvd2luZyBsaW5lcy5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9jaGFqcy9tb2NoYS93aWtpL1VzaW5nLW1vY2hhLXByb2dyYW1tYXRpY2FsbHkjc2V0LW9wdGlvbnMgZm9yIG1vcmUgaW5mby5cbi8vIEhhY2ssIGFzIHJldHJpZXMgaXMgbm90IHN1cHBvcnRlZCBhcyBzZXR0aW5nIGluIHRzZC5cbmNvbnN0IG9wdGlvbnMgPSB7XG4gICAgdWk6ICd0ZGQnLFxuICAgIHVzZUNvbG9yczogdHJ1ZSxcbiAgICB0aW1lb3V0OiAyNTAwMCxcbiAgICByZXRyaWVzOiAzLFxuICAgIGdyZXAsXG4gICAgdGVzdEZpbGVzU3VmZml4XG59O1xuLy8gVlNUUyBDSSBkb2Vzbid0IGRpc3BsYXkgY29sb3VycyBjb3JyZWN0bHkgKHlldCkuXG5pZiAoY2lDb25zdGFudHNfMS5JU19WU1RTKSB7XG4gICAgb3B0aW9ucy51c2VDb2xvcnMgPSBmYWxzZTtcbn1cbi8vIENJIGNhbiBhc2sgZm9yIGEgSlVuaXQgcmVwb3J0ZXIgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlXG4vLyAnTU9DSEFfUkVQT1JURVJfSlVOSVQnIGlzIGRlZmluZWQsIGZ1cnRoZXIgY29udHJvbCBpcyBhZmZvcmRlZFxuLy8gYnkgb3RoZXIgJ01PQ0hBX0NJXy4uLicgdmFyaWFibGVzLiBTZWUgY29uc3RhbnRzLnRzIGZvciBpbmZvLlxuaWYgKGNpQ29uc3RhbnRzXzEuTU9DSEFfUkVQT1JURVJfSlVOSVQpIHtcbiAgICBvcHRpb25zLnJlcG9ydGVyID0gY2lDb25zdGFudHNfMS5NT0NIQV9DSV9SRVBPUlRFUl9JRDtcbiAgICBvcHRpb25zLnJlcG9ydGVyT3B0aW9ucyA9IHtcbiAgICAgICAgbW9jaGFGaWxlOiBjaUNvbnN0YW50c18xLk1PQ0hBX0NJX1JFUE9SVEZJTEUsXG4gICAgICAgIHByb3BlcnRpZXM6IGNpQ29uc3RhbnRzXzEuTU9DSEFfQ0lfUFJPUEVSVElFU1xuICAgIH07XG59XG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZXgsIGEpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gW2Ake2V4fWBdO1xuICAgIGlmICh0eXBlb2YgZXggIT09ICdzdHJpbmcnICYmIGV4ICYmIGV4Lm1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZS5wdXNoKGV4Lm5hbWUpO1xuICAgICAgICBtZXNzYWdlLnB1c2goZXgubWVzc2FnZSk7XG4gICAgICAgIGlmIChleC5zdGFjaykge1xuICAgICAgICAgICAgbWVzc2FnZS5wdXNoKGV4LnN0YWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb24gd2l0aCB0aGUgbWVzc2FnZSAke21lc3NhZ2Uuam9pbignLCAnKX1gKTtcbn0pO1xudGVzdFJ1bm5lci5jb25maWd1cmUob3B0aW9ucywgeyBjb3ZlcmFnZUNvbmZpZzogJy4uL2NvdmVyY29uZmlnLmpzb24nIH0pO1xubW9kdWxlLmV4cG9ydHMgPSB0ZXN0UnVubmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl19