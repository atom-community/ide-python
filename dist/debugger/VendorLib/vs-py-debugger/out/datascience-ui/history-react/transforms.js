/* tslint:disable */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // This code is from @nteract/transforms-full except without the Vega transforms:
// https://github.com/nteract/nteract/blob/v0.12.2/packages/transforms-full/src/index.js .
// Vega transforms mess up our npm pkg install because they rely on the npm canvas module that needs
// to be built on each system.

const transform_plotly_1 = require("@nteract/transform-plotly");

const transform_geojson_1 = require("@nteract/transform-geojson");

const transform_model_debug_1 = require("@nteract/transform-model-debug");

const transform_dataresource_1 = require("@nteract/transform-dataresource"); // import { VegaLite1, VegaLite2, Vega2, Vega3 } from "@nteract/transform-vega";


const transforms_1 = require("@nteract/transforms");

exports.registerTransform = transforms_1.registerTransform;
exports.richestMimetype = transforms_1.richestMimetype;
const additionalTransforms = [transform_dataresource_1.default, transform_model_debug_1.default, transform_plotly_1.PlotlyNullTransform, transform_plotly_1.default, transform_geojson_1.default];
const {
  transforms,
  displayOrder
} = additionalTransforms.reduce(transforms_1.registerTransform, {
  transforms: transforms_1.standardTransforms,
  displayOrder: transforms_1.standardDisplayOrder
});
exports.transforms = transforms;
exports.displayOrder = displayOrder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybXMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFuc2Zvcm1fcGxvdGx5XzEiLCJyZXF1aXJlIiwidHJhbnNmb3JtX2dlb2pzb25fMSIsInRyYW5zZm9ybV9tb2RlbF9kZWJ1Z18xIiwidHJhbnNmb3JtX2RhdGFyZXNvdXJjZV8xIiwidHJhbnNmb3Jtc18xIiwicmVnaXN0ZXJUcmFuc2Zvcm0iLCJyaWNoZXN0TWltZXR5cGUiLCJhZGRpdGlvbmFsVHJhbnNmb3JtcyIsImRlZmF1bHQiLCJQbG90bHlOdWxsVHJhbnNmb3JtIiwidHJhbnNmb3JtcyIsImRpc3BsYXlPcmRlciIsInJlZHVjZSIsInN0YW5kYXJkVHJhbnNmb3JtcyIsInN0YW5kYXJkRGlzcGxheU9yZGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDLEUsQ0FDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0MsT0FBTyxDQUFDLDJCQUFELENBQWxDOztBQUNBLE1BQU1DLG1CQUFtQixHQUFHRCxPQUFPLENBQUMsNEJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUUsdUJBQXVCLEdBQUdGLE9BQU8sQ0FBQyxnQ0FBRCxDQUF2Qzs7QUFDQSxNQUFNRyx3QkFBd0IsR0FBR0gsT0FBTyxDQUFDLGlDQUFELENBQXhDLEMsQ0FDQTs7O0FBQ0EsTUFBTUksWUFBWSxHQUFHSixPQUFPLENBQUMscUJBQUQsQ0FBNUI7O0FBQ0FILE9BQU8sQ0FBQ1EsaUJBQVIsR0FBNEJELFlBQVksQ0FBQ0MsaUJBQXpDO0FBQ0FSLE9BQU8sQ0FBQ1MsZUFBUixHQUEwQkYsWUFBWSxDQUFDRSxlQUF2QztBQUNBLE1BQU1DLG9CQUFvQixHQUFHLENBQ3pCSix3QkFBd0IsQ0FBQ0ssT0FEQSxFQUV6Qk4sdUJBQXVCLENBQUNNLE9BRkMsRUFHekJULGtCQUFrQixDQUFDVSxtQkFITSxFQUl6QlYsa0JBQWtCLENBQUNTLE9BSk0sRUFLekJQLG1CQUFtQixDQUFDTyxPQUxLLENBQTdCO0FBT0EsTUFBTTtBQUFFRSxFQUFBQSxVQUFGO0FBQWNDLEVBQUFBO0FBQWQsSUFBK0JKLG9CQUFvQixDQUFDSyxNQUFyQixDQUE0QlIsWUFBWSxDQUFDQyxpQkFBekMsRUFBNEQ7QUFDN0ZLLEVBQUFBLFVBQVUsRUFBRU4sWUFBWSxDQUFDUyxrQkFEb0U7QUFFN0ZGLEVBQUFBLFlBQVksRUFBRVAsWUFBWSxDQUFDVTtBQUZrRSxDQUE1RCxDQUFyQztBQUlBakIsT0FBTyxDQUFDYSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBYixPQUFPLENBQUNjLFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFRoaXMgY29kZSBpcyBmcm9tIEBudGVyYWN0L3RyYW5zZm9ybXMtZnVsbCBleGNlcHQgd2l0aG91dCB0aGUgVmVnYSB0cmFuc2Zvcm1zOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL250ZXJhY3QvbnRlcmFjdC9ibG9iL3YwLjEyLjIvcGFja2FnZXMvdHJhbnNmb3Jtcy1mdWxsL3NyYy9pbmRleC5qcyAuXG4vLyBWZWdhIHRyYW5zZm9ybXMgbWVzcyB1cCBvdXIgbnBtIHBrZyBpbnN0YWxsIGJlY2F1c2UgdGhleSByZWx5IG9uIHRoZSBucG0gY2FudmFzIG1vZHVsZSB0aGF0IG5lZWRzXG4vLyB0byBiZSBidWlsdCBvbiBlYWNoIHN5c3RlbS5cbmNvbnN0IHRyYW5zZm9ybV9wbG90bHlfMSA9IHJlcXVpcmUoXCJAbnRlcmFjdC90cmFuc2Zvcm0tcGxvdGx5XCIpO1xuY29uc3QgdHJhbnNmb3JtX2dlb2pzb25fMSA9IHJlcXVpcmUoXCJAbnRlcmFjdC90cmFuc2Zvcm0tZ2VvanNvblwiKTtcbmNvbnN0IHRyYW5zZm9ybV9tb2RlbF9kZWJ1Z18xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybS1tb2RlbC1kZWJ1Z1wiKTtcbmNvbnN0IHRyYW5zZm9ybV9kYXRhcmVzb3VyY2VfMSA9IHJlcXVpcmUoXCJAbnRlcmFjdC90cmFuc2Zvcm0tZGF0YXJlc291cmNlXCIpO1xuLy8gaW1wb3J0IHsgVmVnYUxpdGUxLCBWZWdhTGl0ZTIsIFZlZ2EyLCBWZWdhMyB9IGZyb20gXCJAbnRlcmFjdC90cmFuc2Zvcm0tdmVnYVwiO1xuY29uc3QgdHJhbnNmb3Jtc18xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybXNcIik7XG5leHBvcnRzLnJlZ2lzdGVyVHJhbnNmb3JtID0gdHJhbnNmb3Jtc18xLnJlZ2lzdGVyVHJhbnNmb3JtO1xuZXhwb3J0cy5yaWNoZXN0TWltZXR5cGUgPSB0cmFuc2Zvcm1zXzEucmljaGVzdE1pbWV0eXBlO1xuY29uc3QgYWRkaXRpb25hbFRyYW5zZm9ybXMgPSBbXG4gICAgdHJhbnNmb3JtX2RhdGFyZXNvdXJjZV8xLmRlZmF1bHQsXG4gICAgdHJhbnNmb3JtX21vZGVsX2RlYnVnXzEuZGVmYXVsdCxcbiAgICB0cmFuc2Zvcm1fcGxvdGx5XzEuUGxvdGx5TnVsbFRyYW5zZm9ybSxcbiAgICB0cmFuc2Zvcm1fcGxvdGx5XzEuZGVmYXVsdCxcbiAgICB0cmFuc2Zvcm1fZ2VvanNvbl8xLmRlZmF1bHQsXG5dO1xuY29uc3QgeyB0cmFuc2Zvcm1zLCBkaXNwbGF5T3JkZXIgfSA9IGFkZGl0aW9uYWxUcmFuc2Zvcm1zLnJlZHVjZSh0cmFuc2Zvcm1zXzEucmVnaXN0ZXJUcmFuc2Zvcm0sIHtcbiAgICB0cmFuc2Zvcm1zOiB0cmFuc2Zvcm1zXzEuc3RhbmRhcmRUcmFuc2Zvcm1zLFxuICAgIGRpc3BsYXlPcmRlcjogdHJhbnNmb3Jtc18xLnN0YW5kYXJkRGlzcGxheU9yZGVyXG59KTtcbmV4cG9ydHMudHJhbnNmb3JtcyA9IHRyYW5zZm9ybXM7XG5leHBvcnRzLmRpc3BsYXlPcmRlciA9IGRpc3BsYXlPcmRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybXMuanMubWFwIl19