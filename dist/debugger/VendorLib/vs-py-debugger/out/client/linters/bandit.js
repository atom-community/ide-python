// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

const types_2 = require("./types");

class Bandit extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.bandit, outputChannel, serviceContainer);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      // View all errors in bandit <= 1.5.1 (https://github.com/PyCQA/bandit/issues/371)
      const messages = yield this.run(['-f', 'custom', '--msg-template', '{line},0,{severity},{test_id}:{msg}', '-n', '-1', document.uri.fsPath], document, cancellation);
      messages.forEach(msg => {
        msg.severity = {
          LOW: types_2.LintMessageSeverity.Information,
          MEDIUM: types_2.LintMessageSeverity.Warning,
          HIGH: types_2.LintMessageSeverity.Error
        }[msg.type];
      });
      return messages;
    });
  }

}

exports.Bandit = Bandit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhbmRpdC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicmVxdWlyZSIsInR5cGVzXzEiLCJiYXNlTGludGVyXzEiLCJ0eXBlc18yIiwiQmFuZGl0IiwiQmFzZUxpbnRlciIsImNvbnN0cnVjdG9yIiwib3V0cHV0Q2hhbm5lbCIsInNlcnZpY2VDb250YWluZXIiLCJQcm9kdWN0IiwiYmFuZGl0IiwicnVuTGludGVyIiwiZG9jdW1lbnQiLCJjYW5jZWxsYXRpb24iLCJtZXNzYWdlcyIsInJ1biIsInVyaSIsImZzUGF0aCIsImZvckVhY2giLCJtc2ciLCJzZXZlcml0eSIsIkxPVyIsIkxpbnRNZXNzYWdlU2V2ZXJpdHkiLCJJbmZvcm1hdGlvbiIsIk1FRElVTSIsIldhcm5pbmciLCJISUdIIiwiRXJyb3IiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQVksT0FBTyxDQUFDLHNCQUFELENBQVA7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1JLE1BQU4sU0FBcUJGLFlBQVksQ0FBQ0csVUFBbEMsQ0FBNkM7QUFDekNDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBRCxFQUFnQkMsZ0JBQWhCLEVBQWtDO0FBQ3pDLFVBQU1QLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQkMsTUFBdEIsRUFBOEJILGFBQTlCLEVBQTZDQyxnQkFBN0M7QUFDSDs7QUFDREcsRUFBQUEsU0FBUyxDQUFDQyxRQUFELEVBQVdDLFlBQVgsRUFBeUI7QUFDOUIsV0FBT2xDLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hEO0FBQ0EsWUFBTW1DLFFBQVEsR0FBRyxNQUFNLEtBQUtDLEdBQUwsQ0FBUyxDQUM1QixJQUQ0QixFQUN0QixRQURzQixFQUNaLGdCQURZLEVBQ00scUNBRE4sRUFDNkMsSUFEN0MsRUFDbUQsSUFEbkQsRUFDeURILFFBQVEsQ0FBQ0ksR0FBVCxDQUFhQyxNQUR0RSxDQUFULEVBRXBCTCxRQUZvQixFQUVWQyxZQUZVLENBQXZCO0FBR0FDLE1BQUFBLFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQkMsR0FBRyxJQUFJO0FBQ3BCQSxRQUFBQSxHQUFHLENBQUNDLFFBQUosR0FBZTtBQUNYQyxVQUFBQSxHQUFHLEVBQUVsQixPQUFPLENBQUNtQixtQkFBUixDQUE0QkMsV0FEdEI7QUFFWEMsVUFBQUEsTUFBTSxFQUFFckIsT0FBTyxDQUFDbUIsbUJBQVIsQ0FBNEJHLE9BRnpCO0FBR1hDLFVBQUFBLElBQUksRUFBRXZCLE9BQU8sQ0FBQ21CLG1CQUFSLENBQTRCSztBQUh2QixVQUliUixHQUFHLENBQUNTLElBSlMsQ0FBZjtBQUtILE9BTkQ7QUFPQSxhQUFPZCxRQUFQO0FBQ0gsS0FiZSxDQUFoQjtBQWNIOztBQW5Cd0M7O0FBcUI3Q2YsT0FBTyxDQUFDSyxNQUFSLEdBQWlCQSxNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi4vY29tbW9uL2V4dGVuc2lvbnNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlc1wiKTtcbmNvbnN0IGJhc2VMaW50ZXJfMSA9IHJlcXVpcmUoXCIuL2Jhc2VMaW50ZXJcIik7XG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jbGFzcyBCYW5kaXQgZXh0ZW5kcyBiYXNlTGludGVyXzEuQmFzZUxpbnRlciB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcih0eXBlc18xLlByb2R1Y3QuYmFuZGl0LCBvdXRwdXRDaGFubmVsLCBzZXJ2aWNlQ29udGFpbmVyKTtcbiAgICB9XG4gICAgcnVuTGludGVyKGRvY3VtZW50LCBjYW5jZWxsYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIFZpZXcgYWxsIGVycm9ycyBpbiBiYW5kaXQgPD0gMS41LjEgKGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9iYW5kaXQvaXNzdWVzLzM3MSlcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0geWllbGQgdGhpcy5ydW4oW1xuICAgICAgICAgICAgICAgICctZicsICdjdXN0b20nLCAnLS1tc2ctdGVtcGxhdGUnLCAne2xpbmV9LDAse3NldmVyaXR5fSx7dGVzdF9pZH06e21zZ30nLCAnLW4nLCAnLTEnLCBkb2N1bWVudC51cmkuZnNQYXRoXG4gICAgICAgICAgICBdLCBkb2N1bWVudCwgY2FuY2VsbGF0aW9uKTtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobXNnID0+IHtcbiAgICAgICAgICAgICAgICBtc2cuc2V2ZXJpdHkgPSB7XG4gICAgICAgICAgICAgICAgICAgIExPVzogdHlwZXNfMi5MaW50TWVzc2FnZVNldmVyaXR5LkluZm9ybWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBNRURJVU06IHR5cGVzXzIuTGludE1lc3NhZ2VTZXZlcml0eS5XYXJuaW5nLFxuICAgICAgICAgICAgICAgICAgICBISUdIOiB0eXBlc18yLkxpbnRNZXNzYWdlU2V2ZXJpdHkuRXJyb3JcbiAgICAgICAgICAgICAgICB9W21zZy50eXBlXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkJhbmRpdCA9IEJhbmRpdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhbmRpdC5qcy5tYXAiXX0=