"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

exports.REGEX = '(?<file>.+):(?<line>\\d+): (?<type>\\w+): (?<message>.*)\\r?(\\n|$)';

class MyPy extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.mypy, outputChannel, serviceContainer);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      const messages = yield this.run([document.uri.fsPath], document, cancellation, exports.REGEX);
      messages.forEach(msg => {
        msg.severity = this.parseMessagesSeverity(msg.type, this.pythonSettings.linting.mypyCategorySeverity);
        msg.code = msg.type;
      });
      return messages;
    });
  }

}

exports.MyPy = MyPy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm15cHkuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInJlcXVpcmUiLCJ0eXBlc18xIiwiYmFzZUxpbnRlcl8xIiwiUkVHRVgiLCJNeVB5IiwiQmFzZUxpbnRlciIsImNvbnN0cnVjdG9yIiwib3V0cHV0Q2hhbm5lbCIsInNlcnZpY2VDb250YWluZXIiLCJQcm9kdWN0IiwibXlweSIsInJ1bkxpbnRlciIsImRvY3VtZW50IiwiY2FuY2VsbGF0aW9uIiwibWVzc2FnZXMiLCJydW4iLCJ1cmkiLCJmc1BhdGgiLCJmb3JFYWNoIiwibXNnIiwic2V2ZXJpdHkiLCJwYXJzZU1lc3NhZ2VzU2V2ZXJpdHkiLCJ0eXBlIiwicHl0aG9uU2V0dGluZ3MiLCJsaW50aW5nIiwibXlweUNhdGVnb3J5U2V2ZXJpdHkiLCJjb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBWSxPQUFPLENBQUMsc0JBQUQsQ0FBUDs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQyxjQUFELENBQTVCOztBQUNBRCxPQUFPLENBQUNJLEtBQVIsR0FBZ0IscUVBQWhCOztBQUNBLE1BQU1DLElBQU4sU0FBbUJGLFlBQVksQ0FBQ0csVUFBaEMsQ0FBMkM7QUFDdkNDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBRCxFQUFnQkMsZ0JBQWhCLEVBQWtDO0FBQ3pDLFVBQU1QLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQkMsSUFBdEIsRUFBNEJILGFBQTVCLEVBQTJDQyxnQkFBM0M7QUFDSDs7QUFDREcsRUFBQUEsU0FBUyxDQUFDQyxRQUFELEVBQVdDLFlBQVgsRUFBeUI7QUFDOUIsV0FBT2xDLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFlBQU1tQyxRQUFRLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVMsQ0FBQ0gsUUFBUSxDQUFDSSxHQUFULENBQWFDLE1BQWQsQ0FBVCxFQUFnQ0wsUUFBaEMsRUFBMENDLFlBQTFDLEVBQXdEZCxPQUFPLENBQUNJLEtBQWhFLENBQXZCO0FBQ0FXLE1BQUFBLFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQkMsR0FBRyxJQUFJO0FBQ3BCQSxRQUFBQSxHQUFHLENBQUNDLFFBQUosR0FBZSxLQUFLQyxxQkFBTCxDQUEyQkYsR0FBRyxDQUFDRyxJQUEvQixFQUFxQyxLQUFLQyxjQUFMLENBQW9CQyxPQUFwQixDQUE0QkMsb0JBQWpFLENBQWY7QUFDQU4sUUFBQUEsR0FBRyxDQUFDTyxJQUFKLEdBQVdQLEdBQUcsQ0FBQ0csSUFBZjtBQUNILE9BSEQ7QUFJQSxhQUFPUixRQUFQO0FBQ0gsS0FQZSxDQUFoQjtBQVFIOztBQWJzQzs7QUFlM0NmLE9BQU8sQ0FBQ0ssSUFBUixHQUFlQSxJQUFmIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnJlcXVpcmUoXCIuLi9jb21tb24vZXh0ZW5zaW9uc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgYmFzZUxpbnRlcl8xID0gcmVxdWlyZShcIi4vYmFzZUxpbnRlclwiKTtcbmV4cG9ydHMuUkVHRVggPSAnKD88ZmlsZT4uKyk6KD88bGluZT5cXFxcZCspOiAoPzx0eXBlPlxcXFx3Kyk6ICg/PG1lc3NhZ2U+LiopXFxcXHI/KFxcXFxufCQpJztcbmNsYXNzIE15UHkgZXh0ZW5kcyBiYXNlTGludGVyXzEuQmFzZUxpbnRlciB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcih0eXBlc18xLlByb2R1Y3QubXlweSwgb3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJ1bkxpbnRlcihkb2N1bWVudCwgY2FuY2VsbGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IHlpZWxkIHRoaXMucnVuKFtkb2N1bWVudC51cmkuZnNQYXRoXSwgZG9jdW1lbnQsIGNhbmNlbGxhdGlvbiwgZXhwb3J0cy5SRUdFWCk7XG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAgICAgbXNnLnNldmVyaXR5ID0gdGhpcy5wYXJzZU1lc3NhZ2VzU2V2ZXJpdHkobXNnLnR5cGUsIHRoaXMucHl0aG9uU2V0dGluZ3MubGludGluZy5teXB5Q2F0ZWdvcnlTZXZlcml0eSk7XG4gICAgICAgICAgICAgICAgbXNnLmNvZGUgPSBtc2cudHlwZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk15UHkgPSBNeVB5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlweS5qcy5tYXAiXX0=