"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const path = require("path");

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

class Prospector extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.prospector, outputChannel, serviceContainer);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      const cwd = this.getWorkspaceRootPath(document);
      const relativePath = path.relative(cwd, document.uri.fsPath);
      return this.run(['--absolute-paths', '--output-format=json', relativePath], document, cancellation);
    });
  }

  parseMessages(output, document, token, regEx) {
    return __awaiter(this, void 0, void 0, function* () {
      let parsedData;

      try {
        parsedData = JSON.parse(output);
      } catch (ex) {
        this.outputChannel.appendLine(`${'#'.repeat(10)}Linting Output - ${this.info.id}${'#'.repeat(10)}`);
        this.outputChannel.append(output);
        this.logger.logError('Failed to parse Prospector output', ex);
        return [];
      }

      return parsedData.messages.filter((value, index) => index <= this.pythonSettings.linting.maxNumberOfProblems).map(msg => {
        const lineNumber = msg.location.line === null || isNaN(msg.location.line) ? 1 : msg.location.line;
        return {
          code: msg.code,
          message: msg.message,
          column: msg.location.character,
          line: lineNumber,
          type: msg.code,
          provider: `${this.info.id} - ${msg.source}`
        };
      });
    });
  }

}

exports.Prospector = Prospector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3NwZWN0b3IuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInBhdGgiLCJyZXF1aXJlIiwidHlwZXNfMSIsImJhc2VMaW50ZXJfMSIsIlByb3NwZWN0b3IiLCJCYXNlTGludGVyIiwiY29uc3RydWN0b3IiLCJvdXRwdXRDaGFubmVsIiwic2VydmljZUNvbnRhaW5lciIsIlByb2R1Y3QiLCJwcm9zcGVjdG9yIiwicnVuTGludGVyIiwiZG9jdW1lbnQiLCJjYW5jZWxsYXRpb24iLCJjd2QiLCJnZXRXb3Jrc3BhY2VSb290UGF0aCIsInJlbGF0aXZlUGF0aCIsInJlbGF0aXZlIiwidXJpIiwiZnNQYXRoIiwicnVuIiwicGFyc2VNZXNzYWdlcyIsIm91dHB1dCIsInRva2VuIiwicmVnRXgiLCJwYXJzZWREYXRhIiwiSlNPTiIsInBhcnNlIiwiZXgiLCJhcHBlbmRMaW5lIiwicmVwZWF0IiwiaW5mbyIsImlkIiwiYXBwZW5kIiwibG9nZ2VyIiwibG9nRXJyb3IiLCJtZXNzYWdlcyIsImZpbHRlciIsImluZGV4IiwicHl0aG9uU2V0dGluZ3MiLCJsaW50aW5nIiwibWF4TnVtYmVyT2ZQcm9ibGVtcyIsIm1hcCIsIm1zZyIsImxpbmVOdW1iZXIiLCJsb2NhdGlvbiIsImxpbmUiLCJpc05hTiIsImNvZGUiLCJtZXNzYWdlIiwiY29sdW1uIiwiY2hhcmFjdGVyIiwidHlwZSIsInByb3ZpZGVyIiwic291cmNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9B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RUFBRVQsR0FBRyxDQUFDSyxJQUxQO0FBTUhLLFVBQUFBLFFBQVEsRUFBRyxHQUFFLEtBQUt0QixJQUFMLENBQVVDLEVBQUcsTUFBS1csR0FBRyxDQUFDVyxNQUFPO0FBTnZDLFNBQVA7QUFRSCxPQVpNLENBQVA7QUFhSCxLQXhCZSxDQUFoQjtBQXlCSDs7QUFyQzRDOztBQXVDakR2RCxPQUFPLENBQUNLLFVBQVIsR0FBcUJBLFVBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbnJlcXVpcmUoXCIuLi9jb21tb24vZXh0ZW5zaW9uc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgYmFzZUxpbnRlcl8xID0gcmVxdWlyZShcIi4vYmFzZUxpbnRlclwiKTtcbmNsYXNzIFByb3NwZWN0b3IgZXh0ZW5kcyBiYXNlTGludGVyXzEuQmFzZUxpbnRlciB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcih0eXBlc18xLlByb2R1Y3QucHJvc3BlY3Rvciwgb3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJ1bkxpbnRlcihkb2N1bWVudCwgY2FuY2VsbGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBjd2QgPSB0aGlzLmdldFdvcmtzcGFjZVJvb3RQYXRoKGRvY3VtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoY3dkLCBkb2N1bWVudC51cmkuZnNQYXRoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bihbJy0tYWJzb2x1dGUtcGF0aHMnLCAnLS1vdXRwdXQtZm9ybWF0PWpzb24nLCByZWxhdGl2ZVBhdGhdLCBkb2N1bWVudCwgY2FuY2VsbGF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhcnNlTWVzc2FnZXMob3V0cHV0LCBkb2N1bWVudCwgdG9rZW4sIHJlZ0V4KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgcGFyc2VkRGF0YTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0Q2hhbm5lbC5hcHBlbmRMaW5lKGAkeycjJy5yZXBlYXQoMTApfUxpbnRpbmcgT3V0cHV0IC0gJHt0aGlzLmluZm8uaWR9JHsnIycucmVwZWF0KDEwKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm91dHB1dENoYW5uZWwuYXBwZW5kKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBQcm9zcGVjdG9yIG91dHB1dCcsIGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkRGF0YS5tZXNzYWdlc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHZhbHVlLCBpbmRleCkgPT4gaW5kZXggPD0gdGhpcy5weXRob25TZXR0aW5ncy5saW50aW5nLm1heE51bWJlck9mUHJvYmxlbXMpXG4gICAgICAgICAgICAgICAgLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBtc2cubG9jYXRpb24ubGluZSA9PT0gbnVsbCB8fCBpc05hTihtc2cubG9jYXRpb24ubGluZSkgPyAxIDogbXNnLmxvY2F0aW9uLmxpbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogbXNnLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZy5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IG1zZy5sb2NhdGlvbi5jaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1zZy5jb2RlLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogYCR7dGhpcy5pbmZvLmlkfSAtICR7bXNnLnNvdXJjZX1gXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlByb3NwZWN0b3IgPSBQcm9zcGVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvc3BlY3Rvci5qcy5tYXAiXX0=