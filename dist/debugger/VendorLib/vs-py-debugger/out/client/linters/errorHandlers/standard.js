"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const types_1 = require("../types");

const baseErrorHandler_1 = require("./baseErrorHandler");

class StandardErrorHandler extends baseErrorHandler_1.BaseErrorHandler {
  constructor(product, outputChannel, serviceContainer) {
    super(product, outputChannel, serviceContainer);
  }

  handleError(error, resource, execInfo) {
    return __awaiter(this, void 0, void 0, function* () {
      if (typeof error === 'string' && error.indexOf('OSError: [Errno 2] No such file or directory: \'/') > 0) {
        return this.nextHandler ? this.nextHandler.handleError(error, resource, execInfo) : Promise.resolve(false);
      }

      const linterManager = this.serviceContainer.get(types_1.ILinterManager);
      const info = linterManager.getLinterInfo(execInfo.product);
      this.logger.logError(`There was an error in running the linter ${info.id}`, error);
      this.outputChannel.appendLine(`Linting with ${info.id} failed.`);
      this.outputChannel.appendLine(error.toString());
      this.displayLinterError(info.id, resource);
      return true;
    });
  }

  displayLinterError(linterId, resource) {
    return __awaiter(this, void 0, void 0, function* () {
      const message = `There was an error in running the linter '${linterId}'`;
      yield vscode_1.window.showErrorMessage(message, 'View Errors');
      this.outputChannel.show();
    });
  }

}

exports.StandardErrorHandler = StandardErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW5kYXJkLmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2c2NvZGVfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwiYmFzZUVycm9ySGFuZGxlcl8xIiwiU3RhbmRhcmRFcnJvckhhbmRsZXIiLCJCYXNlRXJyb3JIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJwcm9kdWN0Iiwib3V0cHV0Q2hhbm5lbCIsInNlcnZpY2VDb250YWluZXIiLCJoYW5kbGVFcnJvciIsImVycm9yIiwicmVzb3VyY2UiLCJleGVjSW5mbyIsImluZGV4T2YiLCJuZXh0SGFuZGxlciIsImxpbnRlck1hbmFnZXIiLCJnZXQiLCJJTGludGVyTWFuYWdlciIsImluZm8iLCJnZXRMaW50ZXJJbmZvIiwibG9nZ2VyIiwibG9nRXJyb3IiLCJpZCIsImFwcGVuZExpbmUiLCJ0b1N0cmluZyIsImRpc3BsYXlMaW50ZXJFcnJvciIsImxpbnRlcklkIiwibWVzc2FnZSIsIndpbmRvdyIsInNob3dFcnJvck1lc3NhZ2UiLCJzaG93Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFB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QUFOLEVBQTlCO0FBQ0EsV0FBS0Msa0JBQUwsQ0FBd0JQLElBQUksQ0FBQ0ksRUFBN0IsRUFBaUNYLFFBQWpDO0FBQ0EsYUFBTyxJQUFQO0FBQ0gsS0FYZSxDQUFoQjtBQVlIOztBQUNEYyxFQUFBQSxrQkFBa0IsQ0FBQ0MsUUFBRCxFQUFXZixRQUFYLEVBQXFCO0FBQ25DLFdBQU9qQyxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRCxZQUFNaUQsT0FBTyxHQUFJLDZDQUE0Q0QsUUFBUyxHQUF0RTtBQUNBLFlBQU0zQixRQUFRLENBQUM2QixNQUFULENBQWdCQyxnQkFBaEIsQ0FBaUNGLE9BQWpDLEVBQTBDLGFBQTFDLENBQU47QUFDQSxXQUFLcEIsYUFBTCxDQUFtQnVCLElBQW5CO0FBQ0gsS0FKZSxDQUFoQjtBQUtIOztBQXhCa0U7O0FBMEJ2RWhDLE9BQU8sQ0FBQ0ssb0JBQVIsR0FBK0JBLG9CQUEvQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuY29uc3QgYmFzZUVycm9ySGFuZGxlcl8xID0gcmVxdWlyZShcIi4vYmFzZUVycm9ySGFuZGxlclwiKTtcbmNsYXNzIFN0YW5kYXJkRXJyb3JIYW5kbGVyIGV4dGVuZHMgYmFzZUVycm9ySGFuZGxlcl8xLkJhc2VFcnJvckhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb2R1Y3QsIG91dHB1dENoYW5uZWwsIHNlcnZpY2VDb250YWluZXIpIHtcbiAgICAgICAgc3VwZXIocHJvZHVjdCwgb3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcik7XG4gICAgfVxuICAgIGhhbmRsZUVycm9yKGVycm9yLCByZXNvdXJjZSwgZXhlY0luZm8pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnICYmIGVycm9yLmluZGV4T2YoJ09TRXJyb3I6IFtFcnJubyAyXSBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiBcXCcvJykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dEhhbmRsZXIgPyB0aGlzLm5leHRIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yLCByZXNvdXJjZSwgZXhlY0luZm8pIDogUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxpbnRlck1hbmFnZXIgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzEuSUxpbnRlck1hbmFnZXIpO1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGxpbnRlck1hbmFnZXIuZ2V0TGludGVySW5mbyhleGVjSW5mby5wcm9kdWN0KTtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZ0Vycm9yKGBUaGVyZSB3YXMgYW4gZXJyb3IgaW4gcnVubmluZyB0aGUgbGludGVyICR7aW5mby5pZH1gLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLm91dHB1dENoYW5uZWwuYXBwZW5kTGluZShgTGludGluZyB3aXRoICR7aW5mby5pZH0gZmFpbGVkLmApO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRDaGFubmVsLmFwcGVuZExpbmUoZXJyb3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlMaW50ZXJFcnJvcihpbmZvLmlkLCByZXNvdXJjZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpc3BsYXlMaW50ZXJFcnJvcihsaW50ZXJJZCwgcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgVGhlcmUgd2FzIGFuIGVycm9yIGluIHJ1bm5pbmcgdGhlIGxpbnRlciAnJHtsaW50ZXJJZH0nYDtcbiAgICAgICAgICAgIHlpZWxkIHZzY29kZV8xLndpbmRvdy5zaG93RXJyb3JNZXNzYWdlKG1lc3NhZ2UsICdWaWV3IEVycm9ycycpO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRDaGFubmVsLnNob3coKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdGFuZGFyZEVycm9ySGFuZGxlciA9IFN0YW5kYXJkRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhbmRhcmQuanMubWFwIl19