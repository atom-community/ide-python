// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const codeCssGenerator_1 = require("./codeCssGenerator");

const datascience_1 = require("./datascience");

const codelensprovider_1 = require("./editor-integration/codelensprovider");

const history_1 = require("./history");

const historycommandlistener_1 = require("./historycommandlistener");

const historyProvider_1 = require("./historyProvider");

const jupyterExecution_1 = require("./jupyterExecution");

const jupyterImporter_1 = require("./jupyterImporter");

const jupyterProcess_1 = require("./jupyterProcess");

const jupyterServer_1 = require("./jupyterServer");

const statusProvider_1 = require("./statusProvider");

const types_1 = require("./types");

function registerTypes(serviceManager) {
  serviceManager.addSingleton(types_1.IDataScienceCodeLensProvider, codelensprovider_1.DataScienceCodeLensProvider);
  serviceManager.addSingleton(types_1.IDataScience, datascience_1.DataScience);
  serviceManager.addSingleton(types_1.IJupyterExecution, jupyterExecution_1.JupyterExecution);
  serviceManager.add(types_1.IDataScienceCommandListener, historycommandlistener_1.HistoryCommandListener);
  serviceManager.addSingleton(types_1.IHistoryProvider, historyProvider_1.HistoryProvider);
  serviceManager.add(types_1.IHistory, history_1.History);
  serviceManager.add(types_1.INotebookImporter, jupyterImporter_1.JupyterImporter);
  serviceManager.add(types_1.INotebookServer, jupyterServer_1.JupyterServer);
  serviceManager.add(types_1.INotebookProcess, jupyterProcess_1.JupyterProcess);
  serviceManager.addSingleton(types_1.ICodeCssGenerator, codeCssGenerator_1.CodeCssGenerator);
  serviceManager.addSingleton(types_1.IStatusProvider, statusProvider_1.StatusProvider);
}

exports.registerTypes = registerTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VSZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVDc3NHZW5lcmF0b3JfMSIsInJlcXVpcmUiLCJkYXRhc2NpZW5jZV8xIiwiY29kZWxlbnNwcm92aWRlcl8xIiwiaGlzdG9yeV8xIiwiaGlzdG9yeWNvbW1hbmRsaXN0ZW5lcl8xIiwiaGlzdG9yeVByb3ZpZGVyXzEiLCJqdXB5dGVyRXhlY3V0aW9uXzEiLCJqdXB5dGVySW1wb3J0ZXJfMSIsImp1cHl0ZXJQcm9jZXNzXzEiLCJqdXB5dGVyU2VydmVyXzEiLCJzdGF0dXNQcm92aWRlcl8xIiwidHlwZXNfMSIsInJlZ2lzdGVyVHlwZXMiLCJzZXJ2aWNlTWFuYWdlciIsImFkZFNpbmdsZXRvbiIsIklEYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIiLCJEYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIiLCJJRGF0YVNjaWVuY2UiLCJEYXRhU2NpZW5jZSIsIklKdXB5dGVyRXhlY3V0aW9uIiwiSnVweXRlckV4ZWN1dGlvbiIsImFkZCIsIklEYXRhU2NpZW5jZUNvbW1hbmRMaXN0ZW5lciIsIkhpc3RvcnlDb21tYW5kTGlzdGVuZXIiLCJJSGlzdG9yeVByb3ZpZGVyIiwiSGlzdG9yeVByb3ZpZGVyIiwiSUhpc3RvcnkiLCJIaXN0b3J5IiwiSU5vdGVib29rSW1wb3J0ZXIiLCJKdXB5dGVySW1wb3J0ZXIiLCJJTm90ZWJvb2tTZXJ2ZXIiLCJKdXB5dGVyU2VydmVyIiwiSU5vdGVib29rUHJvY2VzcyIsIkp1cHl0ZXJQcm9jZXNzIiwiSUNvZGVDc3NHZW5lcmF0b3IiLCJDb2RlQ3NzR2VuZXJhdG9yIiwiSVN0YXR1c1Byb3ZpZGVyIiwiU3RhdHVzUHJvdmlkZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdGLE9BQU8sQ0FBQyx1Q0FBRCxDQUFsQzs7QUFDQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU1JLHdCQUF3QixHQUFHSixPQUFPLENBQUMsMEJBQUQsQ0FBeEM7O0FBQ0EsTUFBTUssaUJBQWlCLEdBQUdMLE9BQU8sQ0FBQyxtQkFBRCxDQUFqQzs7QUFDQSxNQUFNTSxrQkFBa0IsR0FBR04sT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLE1BQU1PLGlCQUFpQixHQUFHUCxPQUFPLENBQUMsbUJBQUQsQ0FBakM7O0FBQ0EsTUFBTVEsZ0JBQWdCLEdBQUdSLE9BQU8sQ0FBQyxrQkFBRCxDQUFoQzs7QUFDQSxNQUFNUyxlQUFlLEdBQUdULE9BQU8sQ0FBQyxpQkFBRCxDQUEvQjs7QUFDQSxNQUFNVSxnQkFBZ0IsR0FBR1YsT0FBTyxDQUFDLGtCQUFELENBQWhDOztBQUNBLE1BQU1XLE9BQU8sR0FBR1gsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsU0FBU1ksYUFBVCxDQUF1QkMsY0FBdkIsRUFBdUM7QUFDbkNBLEVBQUFBLGNBQWMsQ0FBQ0MsWUFBZixDQUE0QkgsT0FBTyxDQUFDSSw0QkFBcEMsRUFBa0ViLGtCQUFrQixDQUFDYywyQkFBckY7QUFDQUgsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNNLFlBQXBDLEVBQWtEaEIsYUFBYSxDQUFDaUIsV0FBaEU7QUFDQUwsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNRLGlCQUFwQyxFQUF1RGIsa0JBQWtCLENBQUNjLGdCQUExRTtBQUNBUCxFQUFBQSxjQUFjLENBQUNRLEdBQWYsQ0FBbUJWLE9BQU8sQ0FBQ1csMkJBQTNCLEVBQXdEbEIsd0JBQXdCLENBQUNtQixzQkFBakY7QUFDQVYsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNhLGdCQUFwQyxFQUFzRG5CLGlCQUFpQixDQUFDb0IsZUFBeEU7QUFDQVosRUFBQUEsY0FBYyxDQUFDUSxHQUFmLENBQW1CVixPQUFPLENBQUNlLFFBQTNCLEVBQXFDdkIsU0FBUyxDQUFDd0IsT0FBL0M7QUFDQWQsRUFBQUEsY0FBYyxDQUFDUSxHQUFmLENBQW1CVixPQUFPLENBQUNpQixpQkFBM0IsRUFBOENyQixpQkFBaUIsQ0FBQ3NCLGVBQWhFO0FBQ0FoQixFQUFBQSxjQUFjLENBQUNRLEdBQWYsQ0FBbUJWLE9BQU8sQ0FBQ21CLGVBQTNCLEVBQTRDckIsZUFBZSxDQUFDc0IsYUFBNUQ7QUFDQWxCLEVBQUFBLGNBQWMsQ0FBQ1EsR0FBZixDQUFtQlYsT0FBTyxDQUFDcUIsZ0JBQTNCLEVBQTZDeEIsZ0JBQWdCLENBQUN5QixjQUE5RDtBQUNBcEIsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUN1QixpQkFBcEMsRUFBdURuQyxrQkFBa0IsQ0FBQ29DLGdCQUExRTtBQUNBdEIsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUN5QixlQUFwQyxFQUFxRDFCLGdCQUFnQixDQUFDMkIsY0FBdEU7QUFDSDs7QUFDRHhDLE9BQU8sQ0FBQ2UsYUFBUixHQUF3QkEsYUFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVDc3NHZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuL2NvZGVDc3NHZW5lcmF0b3JcIik7XG5jb25zdCBkYXRhc2NpZW5jZV8xID0gcmVxdWlyZShcIi4vZGF0YXNjaWVuY2VcIik7XG5jb25zdCBjb2RlbGVuc3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9lZGl0b3ItaW50ZWdyYXRpb24vY29kZWxlbnNwcm92aWRlclwiKTtcbmNvbnN0IGhpc3RvcnlfMSA9IHJlcXVpcmUoXCIuL2hpc3RvcnlcIik7XG5jb25zdCBoaXN0b3J5Y29tbWFuZGxpc3RlbmVyXzEgPSByZXF1aXJlKFwiLi9oaXN0b3J5Y29tbWFuZGxpc3RlbmVyXCIpO1xuY29uc3QgaGlzdG9yeVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9oaXN0b3J5UHJvdmlkZXJcIik7XG5jb25zdCBqdXB5dGVyRXhlY3V0aW9uXzEgPSByZXF1aXJlKFwiLi9qdXB5dGVyRXhlY3V0aW9uXCIpO1xuY29uc3QganVweXRlckltcG9ydGVyXzEgPSByZXF1aXJlKFwiLi9qdXB5dGVySW1wb3J0ZXJcIik7XG5jb25zdCBqdXB5dGVyUHJvY2Vzc18xID0gcmVxdWlyZShcIi4vanVweXRlclByb2Nlc3NcIik7XG5jb25zdCBqdXB5dGVyU2VydmVyXzEgPSByZXF1aXJlKFwiLi9qdXB5dGVyU2VydmVyXCIpO1xuY29uc3Qgc3RhdHVzUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3N0YXR1c1Byb3ZpZGVyXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gcmVnaXN0ZXJUeXBlcyhzZXJ2aWNlTWFuYWdlcikge1xuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc18xLklEYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIsIGNvZGVsZW5zcHJvdmlkZXJfMS5EYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIpO1xuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc18xLklEYXRhU2NpZW5jZSwgZGF0YXNjaWVuY2VfMS5EYXRhU2NpZW5jZSk7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkU2luZ2xldG9uKHR5cGVzXzEuSUp1cHl0ZXJFeGVjdXRpb24sIGp1cHl0ZXJFeGVjdXRpb25fMS5KdXB5dGVyRXhlY3V0aW9uKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGQodHlwZXNfMS5JRGF0YVNjaWVuY2VDb21tYW5kTGlzdGVuZXIsIGhpc3Rvcnljb21tYW5kbGlzdGVuZXJfMS5IaXN0b3J5Q29tbWFuZExpc3RlbmVyKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JSGlzdG9yeVByb3ZpZGVyLCBoaXN0b3J5UHJvdmlkZXJfMS5IaXN0b3J5UHJvdmlkZXIpO1xuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZCh0eXBlc18xLklIaXN0b3J5LCBoaXN0b3J5XzEuSGlzdG9yeSk7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSU5vdGVib29rSW1wb3J0ZXIsIGp1cHl0ZXJJbXBvcnRlcl8xLkp1cHl0ZXJJbXBvcnRlcik7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSU5vdGVib29rU2VydmVyLCBqdXB5dGVyU2VydmVyXzEuSnVweXRlclNlcnZlcik7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSU5vdGVib29rUHJvY2VzcywganVweXRlclByb2Nlc3NfMS5KdXB5dGVyUHJvY2Vzcyk7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkU2luZ2xldG9uKHR5cGVzXzEuSUNvZGVDc3NHZW5lcmF0b3IsIGNvZGVDc3NHZW5lcmF0b3JfMS5Db2RlQ3NzR2VuZXJhdG9yKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JU3RhdHVzUHJvdmlkZXIsIHN0YXR1c1Byb3ZpZGVyXzEuU3RhdHVzUHJvdmlkZXIpO1xufVxuZXhwb3J0cy5yZWdpc3RlclR5cGVzID0gcmVnaXN0ZXJUeXBlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2VSZWdpc3RyeS5qcy5tYXAiXX0=