// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../common/types");

const types_2 = require("../ioc/types");

const types_3 = require("./types");

let HistoryProvider = class HistoryProvider {
  constructor(serviceContainer, disposables) {
    this.serviceContainer = serviceContainer;
    this.disposables = disposables;

    this.create = () => {
      const result = this.serviceContainer.get(types_3.IHistory);
      const handler = result.closed(this.onHistoryClosed);
      this.disposables.push(result);
      this.disposables.push(handler);
      return result;
    };

    this.onHistoryClosed = history => {
      if (this.activeHistory === history) {
        this.activeHistory = undefined;
      }
    };
  }

  get active() {
    if (!this.activeHistory) {
      this.activeHistory = this.create();
    }

    return this.activeHistory;
  }

  set active(history) {
    this.activeHistory = history;
  }

};
HistoryProvider = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_2.IServiceContainer)), __param(1, inversify_1.inject(types_1.IDisposableRegistry))], HistoryProvider);
exports.HistoryProvider = HistoryProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhpc3RvcnlQcm92aWRlci5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJ0eXBlc18yIiwidHlwZXNfMyIsIkhpc3RvcnlQcm92aWRlciIsImNvbnN0cnVjdG9yIiwic2VydmljZUNvbnRhaW5lciIsImRpc3Bvc2FibGVzIiwiY3JlYXRlIiwicmVzdWx0IiwiZ2V0IiwiSUhpc3RvcnkiLCJoYW5kbGVyIiwiY2xvc2VkIiwib25IaXN0b3J5Q2xvc2VkIiwicHVzaCIsImhpc3RvcnkiLCJhY3RpdmVIaXN0b3J5IiwidW5kZWZpbmVkIiwiYWN0aXZlIiwiaW5qZWN0YWJsZSIsImluamVjdCIsIklTZXJ2aWNlQ29udGFpbmVyIiwiSURpc3Bvc2FibGVSZWdpc3RyeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcsQ0FBSixHQUFRSCxNQUFSLEdBQWlCRSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBSSxHQUFHSyxNQUFNLENBQUNDLHdCQUFQLENBQWdDUixNQUFoQyxFQUF3Q0MsR0FBeEMsQ0FBdkIsR0FBc0VDLElBQXJIO0FBQUEs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QUFVO0FBQ2hCLFNBQUtDLGFBQUwsR0FBcUJELE9BQXJCO0FBQ0g7O0FBekJ1QyxDQUE1QztBQTJCQVosZUFBZSxHQUFHMUIsVUFBVSxDQUFDLENBQ3pCcUIsV0FBVyxDQUFDcUIsVUFBWixFQUR5QixFQUV6QjFCLE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQ3NCLE1BQVosQ0FBbUJuQixPQUFPLENBQUNvQixpQkFBM0IsQ0FBSixDQUZrQixFQUd6QjVCLE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQ3NCLE1BQVosQ0FBbUJwQixPQUFPLENBQUNzQixtQkFBM0IsQ0FBSixDQUhrQixDQUFELEVBSXpCbkIsZUFKeUIsQ0FBNUI7QUFLQVAsT0FBTyxDQUFDTyxlQUFSLEdBQTBCQSxlQUExQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlc1wiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vaW9jL3R5cGVzXCIpO1xuY29uc3QgdHlwZXNfMyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xubGV0IEhpc3RvcnlQcm92aWRlciA9IGNsYXNzIEhpc3RvcnlQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZUNvbnRhaW5lciwgZGlzcG9zYWJsZXMpIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlQ29udGFpbmVyID0gc2VydmljZUNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IGRpc3Bvc2FibGVzO1xuICAgICAgICB0aGlzLmNyZWF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMy5JSGlzdG9yeSk7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gcmVzdWx0LmNsb3NlZCh0aGlzLm9uSGlzdG9yeUNsb3NlZCk7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zYWJsZXMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25IaXN0b3J5Q2xvc2VkID0gKGhpc3RvcnkpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUhpc3RvcnkgPT09IGhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUhpc3RvcnkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVIaXN0b3J5KSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUhpc3RvcnkgPSB0aGlzLmNyZWF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUhpc3Rvcnk7XG4gICAgfVxuICAgIHNldCBhY3RpdmUoaGlzdG9yeSkge1xuICAgICAgICB0aGlzLmFjdGl2ZUhpc3RvcnkgPSBoaXN0b3J5O1xuICAgIH1cbn07XG5IaXN0b3J5UHJvdmlkZXIgPSBfX2RlY29yYXRlKFtcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKCksXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMi5JU2VydmljZUNvbnRhaW5lcikpLFxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSURpc3Bvc2FibGVSZWdpc3RyeSkpXG5dLCBIaXN0b3J5UHJvdmlkZXIpO1xuZXhwb3J0cy5IaXN0b3J5UHJvdmlkZXIgPSBIaXN0b3J5UHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaXN0b3J5UHJvdmlkZXIuanMubWFwIl19