// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const types_1 = require("../../common/application/types");

const constants_1 = require("../../common/constants");

const types_2 = require("../../common/types");

const types_3 = require("../../ioc/types");

const telemetry_1 = require("../../telemetry");

const constants_2 = require("../../telemetry/constants");

const types_4 = require("../../terminals/types");

let CodeExecutionManager = class CodeExecutionManager {
  constructor(commandManager, documentManager, disposableRegistry, serviceContainer) {
    this.commandManager = commandManager;
    this.documentManager = documentManager;
    this.disposableRegistry = disposableRegistry;
    this.serviceContainer = serviceContainer;
  }

  registerCommands() {
    this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_In_Terminal, this.executeFileInterTerminal.bind(this)));
    this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_Selection_In_Terminal, this.executeSelectionInTerminal.bind(this)));
    this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_Selection_In_Django_Shell, this.executeSelectionInDjangoShell.bind(this)));
  }

  executeFileInterTerminal(file) {
    return __awaiter(this, void 0, void 0, function* () {
      const codeExecutionHelper = this.serviceContainer.get(types_4.ICodeExecutionHelper);
      file = file instanceof vscode_1.Uri ? file : undefined;
      const fileToExecute = file ? file : yield codeExecutionHelper.getFileToExecute();

      if (!fileToExecute) {
        return;
      }

      yield codeExecutionHelper.saveFileIfDirty(fileToExecute);
      const executionService = this.serviceContainer.get(types_4.ICodeExecutionService, 'standard');
      yield executionService.executeFile(fileToExecute);
    });
  }

  executeSelectionInTerminal() {
    return __awaiter(this, void 0, void 0, function* () {
      const executionService = this.serviceContainer.get(types_4.ICodeExecutionService, 'standard');
      yield this.executeSelection(executionService);
    });
  }

  executeSelectionInDjangoShell() {
    return __awaiter(this, void 0, void 0, function* () {
      const executionService = this.serviceContainer.get(types_4.ICodeExecutionService, 'djangoShell');
      yield this.executeSelection(executionService);
    });
  }

  executeSelection(executionService) {
    return __awaiter(this, void 0, void 0, function* () {
      const activeEditor = this.documentManager.activeTextEditor;

      if (!activeEditor) {
        return;
      }

      const codeExecutionHelper = this.serviceContainer.get(types_4.ICodeExecutionHelper);
      const codeToExecute = yield codeExecutionHelper.getSelectedTextToExecute(activeEditor);
      const normalizedCode = yield codeExecutionHelper.normalizeLines(codeToExecute);

      if (!normalizedCode || normalizedCode.trim().length === 0) {
        return;
      }

      yield executionService.execute(normalizedCode, activeEditor.document.uri);
    });
  }

};

__decorate([telemetry_1.captureTelemetry(constants_2.EXECUTION_CODE, {
  scope: 'file'
}, false)], CodeExecutionManager.prototype, "executeFileInterTerminal", null);

__decorate([telemetry_1.captureTelemetry(constants_2.EXECUTION_CODE, {
  scope: 'selection'
}, false)], CodeExecutionManager.prototype, "executeSelectionInTerminal", null);

__decorate([telemetry_1.captureTelemetry(constants_2.EXECUTION_DJANGO, {
  scope: 'selection'
}, false)], CodeExecutionManager.prototype, "executeSelectionInDjangoShell", null);

CodeExecutionManager = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.ICommandManager)), __param(1, inversify_1.inject(types_1.IDocumentManager)), __param(2, inversify_1.inject(types_2.IDisposableRegistry)), __param(3, inversify_1.inject(types_3.IServiceContainer))], CodeExecutionManager);
exports.CodeExecutionManager = CodeExecutionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGVFeGVjdXRpb25NYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImV4cG9ydHMiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJ2c2NvZGVfMSIsInR5cGVzXzEiLCJjb25zdGFudHNfMSIsInR5cGVzXzIiLCJ0eXBlc18zIiwidGVsZW1ldHJ5XzEiLCJjb25zdGFudHNfMiIsInR5cGVzXzQiLCJDb2RlRXhlY3V0aW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiY29tbWFuZE1hbmFnZXIiLCJkb2N1bWVudE1hbmFnZXIiLCJkaXNwb3NhYmxlUmVnaXN0cnkiLCJzZXJ2aWNlQ29udGFpbmVyIiwicmVnaXN0ZXJDb21tYW5kcyIsInB1c2giLCJyZWdpc3RlckNvbW1hbmQiLCJDb21tYW5kcyIsIkV4ZWNfSW5fVGVybWluYWwiLCJleGVjdXRlRmlsZUludGVyVGVybWluYWwiLCJiaW5kIiwiRXhlY19TZWxlY3Rpb25fSW5fVGVybWluYWwiLCJleGVjdXRlU2VsZWN0aW9uSW5UZXJtaW5hbCIsIkV4ZWNfU2VsZWN0aW9uX0luX0RqYW5nb19TaGVsbCIsImV4ZWN1dGVTZWxlY3Rpb25JbkRqYW5nb1NoZWxsIiwiZmlsZSIsImNvZGVFeGVjdXRpb25IZWxwZXIiLCJnZXQiLCJJQ29kZUV4ZWN1dGlvbkhlbHBlciIsIlVyaSIsInVuZGVmaW5lZCIsImZpbGVUb0V4ZWN1dGUiLCJnZXRGaWxlVG9FeGVjdXRlIiwic2F2ZUZpbGVJZkRpcnR5IiwiZXhlY3V0aW9uU2VydmljZSIsIklDb2RlRXhlY3V0aW9uU2VydmljZSIsImV4ZWN1dGVGaWxlIiwiZXhlY3V0ZVNlbGVjdGlvbiIsImFjdGl2ZUVkaXRvciIsImFjdGl2ZVRleHRFZGl0b3IiLCJjb2RlVG9FeGVjdXRlIiwiZ2V0U2VsZWN0ZWRUZXh0VG9FeGVjdXRlIiwibm9ybWFsaXplZENvZGUiLCJub3JtYWxpemVMaW5lcyIsInRyaW0iLCJleGVjdXRlIiwiZG9jdW1lbnQiLCJ1cmkiLCJjYXB0dXJlVGVsZW1ldHJ5IiwiRVhFQ1VUSU9OX0NPREUiLCJzY29wZSIsInByb3RvdHlwZSIsIkVYRUNVVElPTl9ESkFOR08iLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSUNvbW1hbmRNYW5hZ2VyIiwiSURvY3VtZW50TWFuYWdlciIsIklEaXNwb3NhYmxlUmVnaXN0cnkiLCJJU2VydmljZUNvbnRhaW5lciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcsQ0FBSixHQUFRSCxNQUFSLEdBQWlCRSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBSSxHQUFHSyxNQUFNLENBQUNDLHdCQUFQLENBQWdDUixNQUFoQyxFQUF3Q0MsR0FBeEMsQ0FBdkIsR0FBc0VDLElBQXJIO0FBQUEsTUFBMkhPLENBQTNIO0FBQ0EsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFFBQW5CLElBQStCLE9BQU9BLE9BQU8sQ0FB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QUFXLENBQUN3RCxNQUFaLENBQW1CckQsT0FBTyxDQUFDdUQsZ0JBQTNCLENBQUosQ0FIdUIsRUFJOUJoRixPQUFPLENBQUMsQ0FBRCxFQUFJc0IsV0FBVyxDQUFDd0QsTUFBWixDQUFtQm5ELE9BQU8sQ0FBQ3NELG1CQUEzQixDQUFKLENBSnVCLEVBSzlCakYsT0FBTyxDQUFDLENBQUQsRUFBSXNCLFdBQVcsQ0FBQ3dELE1BQVosQ0FBbUJsRCxPQUFPLENBQUNzRCxpQkFBM0IsQ0FBSixDQUx1QixDQUFELEVBTTlCbEQsb0JBTjhCLENBQWpDO0FBT0FYLE9BQU8sQ0FBQ1csb0JBQVIsR0FBK0JBLG9CQUEvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgdHlwZXNfMyA9IHJlcXVpcmUoXCIuLi8uLi9pb2MvdHlwZXNcIik7XG5jb25zdCB0ZWxlbWV0cnlfMSA9IHJlcXVpcmUoXCIuLi8uLi90ZWxlbWV0cnlcIik7XG5jb25zdCBjb25zdGFudHNfMiA9IHJlcXVpcmUoXCIuLi8uLi90ZWxlbWV0cnkvY29uc3RhbnRzXCIpO1xuY29uc3QgdHlwZXNfNCA9IHJlcXVpcmUoXCIuLi8uLi90ZXJtaW5hbHMvdHlwZXNcIik7XG5sZXQgQ29kZUV4ZWN1dGlvbk1hbmFnZXIgPSBjbGFzcyBDb2RlRXhlY3V0aW9uTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoY29tbWFuZE1hbmFnZXIsIGRvY3VtZW50TWFuYWdlciwgZGlzcG9zYWJsZVJlZ2lzdHJ5LCBzZXJ2aWNlQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZE1hbmFnZXIgPSBjb21tYW5kTWFuYWdlcjtcbiAgICAgICAgdGhpcy5kb2N1bWVudE1hbmFnZXIgPSBkb2N1bWVudE1hbmFnZXI7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZVJlZ2lzdHJ5ID0gZGlzcG9zYWJsZVJlZ2lzdHJ5O1xuICAgICAgICB0aGlzLnNlcnZpY2VDb250YWluZXIgPSBzZXJ2aWNlQ29udGFpbmVyO1xuICAgIH1cbiAgICByZWdpc3RlckNvbW1hbmRzKCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVSZWdpc3RyeS5wdXNoKHRoaXMuY29tbWFuZE1hbmFnZXIucmVnaXN0ZXJDb21tYW5kKGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfSW5fVGVybWluYWwsIHRoaXMuZXhlY3V0ZUZpbGVJbnRlclRlcm1pbmFsLmJpbmQodGhpcykpKTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlUmVnaXN0cnkucHVzaCh0aGlzLmNvbW1hbmRNYW5hZ2VyLnJlZ2lzdGVyQ29tbWFuZChjb25zdGFudHNfMS5Db21tYW5kcy5FeGVjX1NlbGVjdGlvbl9Jbl9UZXJtaW5hbCwgdGhpcy5leGVjdXRlU2VsZWN0aW9uSW5UZXJtaW5hbC5iaW5kKHRoaXMpKSk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZVJlZ2lzdHJ5LnB1c2godGhpcy5jb21tYW5kTWFuYWdlci5yZWdpc3RlckNvbW1hbmQoY29uc3RhbnRzXzEuQ29tbWFuZHMuRXhlY19TZWxlY3Rpb25fSW5fRGphbmdvX1NoZWxsLCB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25JbkRqYW5nb1NoZWxsLmJpbmQodGhpcykpKTtcbiAgICB9XG4gICAgZXhlY3V0ZUZpbGVJbnRlclRlcm1pbmFsKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGVFeGVjdXRpb25IZWxwZXIgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzQuSUNvZGVFeGVjdXRpb25IZWxwZXIpO1xuICAgICAgICAgICAgZmlsZSA9IGZpbGUgaW5zdGFuY2VvZiB2c2NvZGVfMS5VcmkgPyBmaWxlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgZmlsZVRvRXhlY3V0ZSA9IGZpbGUgPyBmaWxlIDogeWllbGQgY29kZUV4ZWN1dGlvbkhlbHBlci5nZXRGaWxlVG9FeGVjdXRlKCk7XG4gICAgICAgICAgICBpZiAoIWZpbGVUb0V4ZWN1dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5aWVsZCBjb2RlRXhlY3V0aW9uSGVscGVyLnNhdmVGaWxlSWZEaXJ0eShmaWxlVG9FeGVjdXRlKTtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGlvblNlcnZpY2UgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzQuSUNvZGVFeGVjdXRpb25TZXJ2aWNlLCAnc3RhbmRhcmQnKTtcbiAgICAgICAgICAgIHlpZWxkIGV4ZWN1dGlvblNlcnZpY2UuZXhlY3V0ZUZpbGUoZmlsZVRvRXhlY3V0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGVjdXRlU2VsZWN0aW9uSW5UZXJtaW5hbCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGlvblNlcnZpY2UgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzQuSUNvZGVFeGVjdXRpb25TZXJ2aWNlLCAnc3RhbmRhcmQnKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZXhlY3V0ZVNlbGVjdGlvbihleGVjdXRpb25TZXJ2aWNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4ZWN1dGVTZWxlY3Rpb25JbkRqYW5nb1NoZWxsKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgZXhlY3V0aW9uU2VydmljZSA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfNC5JQ29kZUV4ZWN1dGlvblNlcnZpY2UsICdkamFuZ29TaGVsbCcpO1xuICAgICAgICAgICAgeWllbGQgdGhpcy5leGVjdXRlU2VsZWN0aW9uKGV4ZWN1dGlvblNlcnZpY2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZXhlY3V0ZVNlbGVjdGlvbihleGVjdXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVFZGl0b3IgPSB0aGlzLmRvY3VtZW50TWFuYWdlci5hY3RpdmVUZXh0RWRpdG9yO1xuICAgICAgICAgICAgaWYgKCFhY3RpdmVFZGl0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlRXhlY3V0aW9uSGVscGVyID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc180LklDb2RlRXhlY3V0aW9uSGVscGVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvZGVUb0V4ZWN1dGUgPSB5aWVsZCBjb2RlRXhlY3V0aW9uSGVscGVyLmdldFNlbGVjdGVkVGV4dFRvRXhlY3V0ZShhY3RpdmVFZGl0b3IpO1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZENvZGUgPSB5aWVsZCBjb2RlRXhlY3V0aW9uSGVscGVyLm5vcm1hbGl6ZUxpbmVzKGNvZGVUb0V4ZWN1dGUpO1xuICAgICAgICAgICAgaWYgKCFub3JtYWxpemVkQ29kZSB8fCBub3JtYWxpemVkQ29kZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgZXhlY3V0aW9uU2VydmljZS5leGVjdXRlKG5vcm1hbGl6ZWRDb2RlLCBhY3RpdmVFZGl0b3IuZG9jdW1lbnQudXJpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbl9fZGVjb3JhdGUoW1xuICAgIHRlbGVtZXRyeV8xLmNhcHR1cmVUZWxlbWV0cnkoY29uc3RhbnRzXzIuRVhFQ1VUSU9OX0NPREUsIHsgc2NvcGU6ICdmaWxlJyB9LCBmYWxzZSlcbl0sIENvZGVFeGVjdXRpb25NYW5hZ2VyLnByb3RvdHlwZSwgXCJleGVjdXRlRmlsZUludGVyVGVybWluYWxcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICB0ZWxlbWV0cnlfMS5jYXB0dXJlVGVsZW1ldHJ5KGNvbnN0YW50c18yLkVYRUNVVElPTl9DT0RFLCB7IHNjb3BlOiAnc2VsZWN0aW9uJyB9LCBmYWxzZSlcbl0sIENvZGVFeGVjdXRpb25NYW5hZ2VyLnByb3RvdHlwZSwgXCJleGVjdXRlU2VsZWN0aW9uSW5UZXJtaW5hbFwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIHRlbGVtZXRyeV8xLmNhcHR1cmVUZWxlbWV0cnkoY29uc3RhbnRzXzIuRVhFQ1VUSU9OX0RKQU5HTywgeyBzY29wZTogJ3NlbGVjdGlvbicgfSwgZmFsc2UpXG5dLCBDb2RlRXhlY3V0aW9uTWFuYWdlci5wcm90b3R5cGUsIFwiZXhlY3V0ZVNlbGVjdGlvbkluRGphbmdvU2hlbGxcIiwgbnVsbCk7XG5Db2RlRXhlY3V0aW9uTWFuYWdlciA9IF9fZGVjb3JhdGUoW1xuICAgIGludmVyc2lmeV8xLmluamVjdGFibGUoKSxcbiAgICBfX3BhcmFtKDAsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklDb21tYW5kTWFuYWdlcikpLFxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSURvY3VtZW50TWFuYWdlcikpLFxuICAgIF9fcGFyYW0oMiwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSURpc3Bvc2FibGVSZWdpc3RyeSkpLFxuICAgIF9fcGFyYW0oMywgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzMuSVNlcnZpY2VDb250YWluZXIpKVxuXSwgQ29kZUV4ZWN1dGlvbk1hbmFnZXIpO1xuZXhwb3J0cy5Db2RlRXhlY3V0aW9uTWFuYWdlciA9IENvZGVFeGVjdXRpb25NYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29kZUV4ZWN1dGlvbk1hbmFnZXIuanMubWFwIl19