// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const path = require("path");

const types_1 = require("../../common/application/types");

require("../../common/extensions");

const types_2 = require("../../common/platform/types");

const types_3 = require("../../common/terminal/types");

const types_4 = require("../../common/types");

let TerminalCodeExecutionProvider = class TerminalCodeExecutionProvider {
  constructor(terminalServiceFactory, configurationService, workspace, disposables, platformService) {
    this.terminalServiceFactory = terminalServiceFactory;
    this.configurationService = configurationService;
    this.workspace = workspace;
    this.disposables = disposables;
    this.platformService = platformService;
  }

  executeFile(file) {
    return __awaiter(this, void 0, void 0, function* () {
      const pythonSettings = this.configurationService.getSettings(file);
      yield this.setCwdForFileExecution(file);
      const command = this.platformService.isWindows ? pythonSettings.pythonPath.replace(/\\/g, '/') : pythonSettings.pythonPath;
      const launchArgs = pythonSettings.terminal.launchArgs;
      yield this.getTerminalService(file).sendCommand(command, launchArgs.concat(file.fsPath.fileToCommandArgument()));
    });
  }

  execute(code, resource) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!code || code.trim().length === 0) {
        return;
      }

      yield this.initializeRepl();
      yield this.getTerminalService(resource).sendText(code);
    });
  }

  initializeRepl(resource) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.replActive && (yield this.replActive)) {
        yield this._terminalService.show();
        return;
      }

      this.replActive = new Promise(resolve => __awaiter(this, void 0, void 0, function* () {
        const replCommandArgs = this.getReplCommandArgs(resource);
        yield this.getTerminalService(resource).sendCommand(replCommandArgs.command, replCommandArgs.args); // Give python repl time to start before we start sending text.

        setTimeout(() => resolve(true), 1000);
      }));
      yield this.replActive;
    });
  }

  getReplCommandArgs(resource) {
    const pythonSettings = this.configurationService.getSettings(resource);
    const command = this.platformService.isWindows ? pythonSettings.pythonPath.replace(/\\/g, '/') : pythonSettings.pythonPath;
    const args = pythonSettings.terminal.launchArgs.slice();
    return {
      command,
      args
    };
  }

  getTerminalService(resource) {
    if (!this._terminalService) {
      this._terminalService = this.terminalServiceFactory.getTerminalService(resource, this.terminalTitle);
      this.disposables.push(this._terminalService.onDidCloseTerminal(() => {
        this.replActive = undefined;
      }));
    }

    return this._terminalService;
  }

  setCwdForFileExecution(file) {
    return __awaiter(this, void 0, void 0, function* () {
      const pythonSettings = this.configurationService.getSettings(file);

      if (!pythonSettings.terminal.executeInFileDir) {
        return;
      }

      const fileDirPath = path.dirname(file.fsPath);
      const wkspace = this.workspace.getWorkspaceFolder(file);

      if (wkspace && fileDirPath !== wkspace.uri.fsPath && fileDirPath.length > 0) {
        yield this.getTerminalService(file).sendText(`cd ${fileDirPath.fileToCommandArgument()}`);
      }
    });
  }

};
TerminalCodeExecutionProvider = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_3.ITerminalServiceFactory)), __param(1, inversify_1.inject(types_4.IConfigurationService)), __param(2, inversify_1.inject(types_1.IWorkspaceService)), __param(3, inversify_1.inject(types_4.IDisposableRegistry)), __param(4, inversify_1.inject(types_2.IPlatformService))], TerminalCodeExecutionProvider);
exports.TerminalCodeExecutionProvider = TerminalCodeExecutionProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlcm1pbmFsQ29kZUV4ZWN1dGlvbi5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJleHBvcnRzIiwiaW52ZXJzaWZ5XzEiLCJyZXF1aXJlIiwicGF0aCIsInR5cGVzXzEiLCJ0eXBlc18yIiwidHlwZXNfMyIsInR5cGVzXzQiLCJUZXJtaW5hbENvZGVFeGVjdXRpb25Qcm92aWRlciIsImNvbnN0cnVjdG9yIiwidGVybWluYWxTZXJ2aWNlRmFjdG9yeSIsImNvbmZpZ3VyYXRpb25TZXJ2aWNlIiwid29ya3NwYWNlIiwiZGlzcG9zYWJsZXMiLCJwbGF0Zm9ybVNlcnZpY2UiLCJleGVjdXRlRmlsZSIsImZpbGUiLCJweXRob25TZXR0aW5ncyIsImdldFNldHRpbmdzIiwic2V0Q3dkRm9yRmlsZUV4ZWN1dGlvbiIsImNvbW1hbmQiLCJpc1dpbmRvd3MiLCJweXRob25QYXRoIiwicmVwbGFjZSIsImxhdW5jaEFyZ3MiLCJ0ZXJtaW5hbCIsImdldFRlcm1pbmFsU2VydmljZSIsInNlbmRDb21tYW5kIiwiY29uY2F0IiwiZnNQYXRoIiwiZmlsZVRvQ29tbWFuZEFyZ3VtZW50IiwiZXhlY3V0ZSIsImNvZGUiLCJyZXNvdXJjZSIsInRyaW0iLCJpbml0aWFsaXplUmVwbCIsInNlbmRUZXh0IiwicmVwbEFjdGl2ZSIsIl90ZXJtaW5hbFNlcnZpY2UiLCJzaG93IiwicmVwbENvbW1hbmRBcmdzIiwiZ2V0UmVwbENvbW1hbmRBcmdzIiwiYXJncyIsInNldFRpbWVvdXQiLCJzbGljZSIsInRlcm1pbmFsVGl0bGUiLCJwdXNoIiwib25EaWRDbG9zZVRlcm1pbmFsIiwidW5kZWZpbmVkIiwiZXhlY3V0ZUluRmlsZURpciIsImZpbGVEaXJQYXRoIiwiZGlybmFtZSIsIndrc3BhY2UiLCJnZXRXb3Jrc3BhY2VGb2xkZXIiLCJ1cmkiLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSVRlcm1pbmFsU2VydmljZUZhY3RvcnkiLCJJQ29uZmlndXJhdGlvblNlcnZpY2UiLCJJV29ya3NwYWNlU2VydmljZSIsIklEaXNwb3NhYmxlUmVnaXN0cnkiLCJJUGxhdGZvcm1TZXJ2aWNlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7QUFBQSxNQUEySE8sQ0FBM0g7QUFDQSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0EsT0FBTyxDQUFDQyxRQUFmLEtBQTRCLFVBQS9ELEVBQTJFTCxDQUFDLEdBQUdJLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQlosVUFBakIsRUFBNkJDLE1BQTdCLEVBQXFDQyxHQUFyQyxFQUEwQ0MsSUFBMUMsQ0FBSixDQUEz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TyxDQUFDLENBQUQsRUFBSXNCLFdBQVcsQ0FBQ3VELE1BQVosQ0FBbUJqRCxPQUFPLENBQUNxRCxtQkFBM0IsQ0FBSixDQUxnQyxFQU12Q2pGLE9BQU8sQ0FBQyxDQUFELEVBQUlzQixXQUFXLENBQUN1RCxNQUFaLENBQW1CbkQsT0FBTyxDQUFDd0QsZ0JBQTNCLENBQUosQ0FOZ0MsQ0FBRCxFQU92Q3JELDZCQVB1QyxDQUExQztBQVFBUixPQUFPLENBQUNRLDZCQUFSLEdBQXdDQSw2QkFBeEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0JztcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9hcHBsaWNhdGlvbi90eXBlc1wiKTtcbnJlcXVpcmUoXCIuLi8uLi9jb21tb24vZXh0ZW5zaW9uc1wiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3BsYXRmb3JtL3R5cGVzXCIpO1xuY29uc3QgdHlwZXNfMyA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdGVybWluYWwvdHlwZXNcIik7XG5jb25zdCB0eXBlc180ID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi90eXBlc1wiKTtcbmxldCBUZXJtaW5hbENvZGVFeGVjdXRpb25Qcm92aWRlciA9IGNsYXNzIFRlcm1pbmFsQ29kZUV4ZWN1dGlvblByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXJtaW5hbFNlcnZpY2VGYWN0b3J5LCBjb25maWd1cmF0aW9uU2VydmljZSwgd29ya3NwYWNlLCBkaXNwb3NhYmxlcywgcGxhdGZvcm1TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudGVybWluYWxTZXJ2aWNlRmFjdG9yeSA9IHRlcm1pbmFsU2VydmljZUZhY3Rvcnk7XG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2UgPSBjb25maWd1cmF0aW9uU2VydmljZTtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2UgPSB3b3Jrc3BhY2U7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBkaXNwb3NhYmxlcztcbiAgICAgICAgdGhpcy5wbGF0Zm9ybVNlcnZpY2UgPSBwbGF0Zm9ybVNlcnZpY2U7XG4gICAgfVxuICAgIGV4ZWN1dGVGaWxlKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHB5dGhvblNldHRpbmdzID0gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZS5nZXRTZXR0aW5ncyhmaWxlKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuc2V0Q3dkRm9yRmlsZUV4ZWN1dGlvbihmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLnBsYXRmb3JtU2VydmljZS5pc1dpbmRvd3MgPyBweXRob25TZXR0aW5ncy5weXRob25QYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKSA6IHB5dGhvblNldHRpbmdzLnB5dGhvblBhdGg7XG4gICAgICAgICAgICBjb25zdCBsYXVuY2hBcmdzID0gcHl0aG9uU2V0dGluZ3MudGVybWluYWwubGF1bmNoQXJncztcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0VGVybWluYWxTZXJ2aWNlKGZpbGUpLnNlbmRDb21tYW5kKGNvbW1hbmQsIGxhdW5jaEFyZ3MuY29uY2F0KGZpbGUuZnNQYXRoLmZpbGVUb0NvbW1hbmRBcmd1bWVudCgpKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGVjdXRlKGNvZGUsIHJlc291cmNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNvZGUgfHwgY29kZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgdGhpcy5pbml0aWFsaXplUmVwbCgpO1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXRUZXJtaW5hbFNlcnZpY2UocmVzb3VyY2UpLnNlbmRUZXh0KGNvZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVJlcGwocmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcGxBY3RpdmUgJiYgKHlpZWxkIHRoaXMucmVwbEFjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLl90ZXJtaW5hbFNlcnZpY2Uuc2hvdygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVwbEFjdGl2ZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbENvbW1hbmRBcmdzID0gdGhpcy5nZXRSZXBsQ29tbWFuZEFyZ3MocmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0VGVybWluYWxTZXJ2aWNlKHJlc291cmNlKS5zZW5kQ29tbWFuZChyZXBsQ29tbWFuZEFyZ3MuY29tbWFuZCwgcmVwbENvbW1hbmRBcmdzLmFyZ3MpO1xuICAgICAgICAgICAgICAgIC8vIEdpdmUgcHl0aG9uIHJlcGwgdGltZSB0byBzdGFydCBiZWZvcmUgd2Ugc3RhcnQgc2VuZGluZyB0ZXh0LlxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh0cnVlKSwgMTAwMCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLnJlcGxBY3RpdmU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRSZXBsQ29tbWFuZEFyZ3MocmVzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgcHl0aG9uU2V0dGluZ3MgPSB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFNldHRpbmdzKHJlc291cmNlKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMucGxhdGZvcm1TZXJ2aWNlLmlzV2luZG93cyA/IHB5dGhvblNldHRpbmdzLnB5dGhvblBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpIDogcHl0aG9uU2V0dGluZ3MucHl0aG9uUGF0aDtcbiAgICAgICAgY29uc3QgYXJncyA9IHB5dGhvblNldHRpbmdzLnRlcm1pbmFsLmxhdW5jaEFyZ3Muc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIHsgY29tbWFuZCwgYXJncyB9O1xuICAgIH1cbiAgICBnZXRUZXJtaW5hbFNlcnZpY2UocmVzb3VyY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXJtaW5hbFNlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsU2VydmljZSA9IHRoaXMudGVybWluYWxTZXJ2aWNlRmFjdG9yeS5nZXRUZXJtaW5hbFNlcnZpY2UocmVzb3VyY2UsIHRoaXMudGVybWluYWxUaXRsZSk7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLnB1c2godGhpcy5fdGVybWluYWxTZXJ2aWNlLm9uRGlkQ2xvc2VUZXJtaW5hbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsQWN0aXZlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hbFNlcnZpY2U7XG4gICAgfVxuICAgIHNldEN3ZEZvckZpbGVFeGVjdXRpb24oZmlsZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcHl0aG9uU2V0dGluZ3MgPSB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFNldHRpbmdzKGZpbGUpO1xuICAgICAgICAgICAgaWYgKCFweXRob25TZXR0aW5ncy50ZXJtaW5hbC5leGVjdXRlSW5GaWxlRGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsZURpclBhdGggPSBwYXRoLmRpcm5hbWUoZmlsZS5mc1BhdGgpO1xuICAgICAgICAgICAgY29uc3Qgd2tzcGFjZSA9IHRoaXMud29ya3NwYWNlLmdldFdvcmtzcGFjZUZvbGRlcihmaWxlKTtcbiAgICAgICAgICAgIGlmICh3a3NwYWNlICYmIGZpbGVEaXJQYXRoICE9PSB3a3NwYWNlLnVyaS5mc1BhdGggJiYgZmlsZURpclBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0VGVybWluYWxTZXJ2aWNlKGZpbGUpLnNlbmRUZXh0KGBjZCAke2ZpbGVEaXJQYXRoLmZpbGVUb0NvbW1hbmRBcmd1bWVudCgpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuVGVybWluYWxDb2RlRXhlY3V0aW9uUHJvdmlkZXIgPSBfX2RlY29yYXRlKFtcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKCksXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMy5JVGVybWluYWxTZXJ2aWNlRmFjdG9yeSkpLFxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzQuSUNvbmZpZ3VyYXRpb25TZXJ2aWNlKSksXG4gICAgX19wYXJhbSgyLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMS5JV29ya3NwYWNlU2VydmljZSkpLFxuICAgIF9fcGFyYW0oMywgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzQuSURpc3Bvc2FibGVSZWdpc3RyeSkpLFxuICAgIF9fcGFyYW0oNCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSVBsYXRmb3JtU2VydmljZSkpXG5dLCBUZXJtaW5hbENvZGVFeGVjdXRpb25Qcm92aWRlcik7XG5leHBvcnRzLlRlcm1pbmFsQ29kZUV4ZWN1dGlvblByb3ZpZGVyID0gVGVybWluYWxDb2RlRXhlY3V0aW9uUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXJtaW5hbENvZGVFeGVjdXRpb24uanMubWFwIl19