"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const types_1 = require("../common/application/types");

const constants_1 = require("../common/constants");

const helpers_1 = require("../common/helpers");

const types_2 = require("../common/platform/types");

const types_3 = require("../common/process/types");

const types_4 = require("../common/types");

const generator_1 = require("./generator");

const provider_1 = require("./provider");

const MAX_NUMBER_OF_ATTEMPTS_TO_INSTALL_AND_BUILD = 2;

class WorkspaceSymbols {
  constructor(serviceContainer) {
    this.serviceContainer = serviceContainer;
    this.generators = [];
    this.outputChannel = this.serviceContainer.get(types_4.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
    this.commandMgr = this.serviceContainer.get(types_1.ICommandManager);
    this.fs = this.serviceContainer.get(types_2.IFileSystem);
    this.workspace = this.serviceContainer.get(types_1.IWorkspaceService);
    this.disposables = [];
    this.disposables.push(this.outputChannel);
    this.registerCommands();
    this.initializeGenerators();
    vscode_1.languages.registerWorkspaceSymbolProvider(new provider_1.WorkspaceSymbolProvider(this.fs, this.commandMgr, this.generators));
    this.disposables.push(this.workspace.onDidChangeWorkspaceFolders(() => this.initializeGenerators()));
  }

  dispose() {
    this.disposables.forEach(d => d.dispose());
  }

  initializeGenerators() {
    while (this.generators.length > 0) {
      const generator = this.generators.shift();
      generator.dispose();
    }

    if (Array.isArray(this.workspace.workspaceFolders)) {
      this.workspace.workspaceFolders.forEach(wkSpc => {
        const processServiceFactory = this.serviceContainer.get(types_3.IProcessServiceFactory);
        this.generators.push(new generator_1.Generator(wkSpc.uri, this.outputChannel, processServiceFactory));
      });
    }
  }

  registerCommands() {
    this.disposables.push(this.commandMgr.registerCommand(constants_1.Commands.Build_Workspace_Symbols, (rebuild = true, token) => __awaiter(this, void 0, void 0, function* () {
      const promises = this.buildWorkspaceSymbols(rebuild, token);
      return Promise.all(promises);
    })));
  } // tslint:disable-next-line:no-any


  buildWorkspaceSymbols(rebuild = true, token) {
    if (token && token.isCancellationRequested) {
      return [];
    }

    if (this.generators.length === 0) {
      return [];
    }

    let promptPromise;
    let promptResponse;
    return this.generators.map(generator => __awaiter(this, void 0, void 0, function* () {
      if (!generator.enabled) {
        return;
      }

      const exists = yield this.fs.fileExists(generator.tagFilePath); // If file doesn't exist, then run the ctag generator,
      // or check if required to rebuild.

      if (!rebuild && exists) {
        return;
      }

      for (let counter = 0; counter < MAX_NUMBER_OF_ATTEMPTS_TO_INSTALL_AND_BUILD; counter += 1) {
        try {
          yield generator.generateWorkspaceTags();
          return;
        } catch (error) {
          if (!helpers_1.isNotInstalledError(error)) {
            this.outputChannel.show();
            return;
          }
        }

        if (!token || token.isCancellationRequested) {
          return;
        } // Display prompt once for all workspaces.


        if (promptPromise) {
          promptResponse = yield promptPromise;
          continue;
        } else {
          const installer = this.serviceContainer.get(types_4.IInstaller);
          promptPromise = installer.promptToInstall(types_4.Product.ctags, this.workspace.workspaceFolders[0].uri);
          promptResponse = yield promptPromise;
        }

        if (promptResponse !== types_4.InstallerResponse.Installed || !token || token.isCancellationRequested) {
          return;
        }
      }
    }));
  }

}

exports.WorkspaceSymbols = WorkspaceSymbols;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZzY29kZV8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJjb25zdGFudHNfMSIsImhlbHBlcnNfMSIsInR5cGVzXzIiLCJ0eXBlc18zIiwidHlwZXNfNCIsImdlbmVyYXRvcl8xIiwicHJvdmlkZXJfMSIsIk1BWF9OVU1CRVJfT0ZfQVRURU1QVFNfVE9fSU5TVEFMTF9BTkRfQlVJTEQiLCJXb3Jrc3BhY2VTeW1ib2xzIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwiZ2VuZXJhdG9ycyIsIm91dHB1dENoYW5uZWwiLCJnZXQiLCJJT3V0cHV0Q2hhbm5lbCIsIlNUQU5EQVJEX09VVFBVVF9DSEFOTkVMIiwiY29tbWFuZE1nciIsIklDb21tYW5kTWFuYWdlciIsImZzIiwiSUZpbGVTeXN0ZW0iLCJ3b3Jrc3BhY2UiLCJJV29ya3NwYWNlU2VydmljZSIsImRpc3Bvc2FibGVzIiwicHVzaCIsInJlZ2lzdGVyQ29tbWFuZHMiLCJpbml0aWFsaXplR2VuZXJhdG9ycyIsImxhbmd1YWdlcyIsInJlZ2lzdGVyV29ya3NwYWNlU3ltYm9sUHJvdmlkZXIiLCJXb3Jrc3BhY2VTeW1ib2xQcm92aWRlciIsIm9uRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVycyIsImRpc3Bvc2UiLCJmb3JFYWNoIiwiZCIsImxlbmd0aCIsInNoaWZ0IiwiQXJyYXkiLCJpc0FycmF5Iiwid29ya3NwYWNlRm9sZGVycyIsIndrU3BjIiwicHJvY2Vzc1NlcnZpY2VGYWN0b3J5IiwiSVByb2Nlc3NTZXJ2aWNlRmFjdG9yeSIsIkdlbmVyYXRvciIsInVyaSIsInJlZ2lzdGVyQ29tbWFuZCIsIkNvbW1hbmRzIiwiQnVpbGRfV29ya3NwYWNlX1N5bWJvbHMiLCJyZWJ1aWxkIiwidG9rZW4iLCJwcm9taXNlcyIsImJ1aWxkV29ya3NwYWNlU3ltYm9scyIsImFsbCIsImlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwicHJvbXB0UHJvbWlzZSIsInByb21wdFJlc3BvbnNlIiwibWFwIiwiZW5hYmxlZCIsImV4aXN0cyIsImZpbGVFeGlzdHMiLCJ0YWdGaWxlUGF0aCIsImNvdW50ZXIiLCJnZW5lcmF0ZVdvcmtzcGFjZVRhZ3MiLCJlcnJvciIsImlzTm90SW5zdGFsbGVkRXJyb3IiLCJzaG93IiwiaW5zdGFsbGVyIiwiSUluc3RhbGxlciIsInByb21wdFRvSW5zdGFsbCIsIlByb2R1Y3QiLCJjdGFncyIsIkluc3RhbGxlclJlc3BvbnNlIiwiSW5zdGFsbGVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1C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dkMsaUJBQUtqRCxhQUFMLENBQW1CbUQsSUFBbkI7QUFDQTtBQUNIO0FBQ0o7O0FBQ0QsWUFBSSxDQUFDaEIsS0FBRCxJQUFVQSxLQUFLLENBQUNJLHVCQUFwQixFQUE2QztBQUN6QztBQUNILFNBYnNGLENBY3ZGOzs7QUFDQSxZQUFJQyxhQUFKLEVBQW1CO0FBQ2ZDLFVBQUFBLGNBQWMsR0FBRyxNQUFNRCxhQUF2QjtBQUNBO0FBQ0gsU0FIRCxNQUlLO0FBQ0QsZ0JBQU1ZLFNBQVMsR0FBRyxLQUFLdEQsZ0JBQUwsQ0FBc0JHLEdBQXRCLENBQTBCVCxPQUFPLENBQUM2RCxVQUFsQyxDQUFsQjtBQUNBYixVQUFBQSxhQUFhLEdBQUdZLFNBQVMsQ0FBQ0UsZUFBVixDQUEwQjlELE9BQU8sQ0FBQytELE9BQVIsQ0FBZ0JDLEtBQTFDLEVBQWlELEtBQUtoRCxTQUFMLENBQWVpQixnQkFBZixDQUFnQyxDQUFoQyxFQUFtQ0ssR0FBcEYsQ0FBaEI7QUFDQVcsVUFBQUEsY0FBYyxHQUFHLE1BQU1ELGFBQXZCO0FBQ0g7O0FBQ0QsWUFBSUMsY0FBYyxLQUFLakQsT0FBTyxDQUFDaUUsaUJBQVIsQ0FBMEJDLFNBQTdDLElBQTJELENBQUN2QixLQUFELElBQVVBLEtBQUssQ0FBQ0ksdUJBQS9FLEVBQXlHO0FBQ3JHO0FBQ0g7QUFDSjtBQUNKLEtBdENrRCxDQUE1QyxDQUFQO0FBdUNIOztBQXJGa0I7O0FBdUZ2QnZELE9BQU8sQ0FBQ1ksZ0JBQVIsR0FBMkJBLGdCQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9hcHBsaWNhdGlvbi90eXBlc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb25zdGFudHNcIik7XG5jb25zdCBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2hlbHBlcnNcIik7XG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wbGF0Zm9ybS90eXBlc1wiKTtcbmNvbnN0IHR5cGVzXzMgPSByZXF1aXJlKFwiLi4vY29tbW9uL3Byb2Nlc3MvdHlwZXNcIik7XG5jb25zdCB0eXBlc180ID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlc1wiKTtcbmNvbnN0IGdlbmVyYXRvcl8xID0gcmVxdWlyZShcIi4vZ2VuZXJhdG9yXCIpO1xuY29uc3QgcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyXCIpO1xuY29uc3QgTUFYX05VTUJFUl9PRl9BVFRFTVBUU19UT19JTlNUQUxMX0FORF9CVUlMRCA9IDI7XG5jbGFzcyBXb3Jrc3BhY2VTeW1ib2xzIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuc2VydmljZUNvbnRhaW5lciA9IHNlcnZpY2VDb250YWluZXI7XG4gICAgICAgIHRoaXMuZ2VuZXJhdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLm91dHB1dENoYW5uZWwgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzQuSU91dHB1dENoYW5uZWwsIGNvbnN0YW50c18xLlNUQU5EQVJEX09VVFBVVF9DSEFOTkVMKTtcbiAgICAgICAgdGhpcy5jb21tYW5kTWdyID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18xLklDb21tYW5kTWFuYWdlcik7XG4gICAgICAgIHRoaXMuZnMgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzIuSUZpbGVTeXN0ZW0pO1xuICAgICAgICB0aGlzLndvcmtzcGFjZSA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMS5JV29ya3NwYWNlU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5wdXNoKHRoaXMub3V0cHV0Q2hhbm5lbCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kcygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVHZW5lcmF0b3JzKCk7XG4gICAgICAgIHZzY29kZV8xLmxhbmd1YWdlcy5yZWdpc3RlcldvcmtzcGFjZVN5bWJvbFByb3ZpZGVyKG5ldyBwcm92aWRlcl8xLldvcmtzcGFjZVN5bWJvbFByb3ZpZGVyKHRoaXMuZnMsIHRoaXMuY29tbWFuZE1nciwgdGhpcy5nZW5lcmF0b3JzKSk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMucHVzaCh0aGlzLndvcmtzcGFjZS5vbkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMoKCkgPT4gdGhpcy5pbml0aWFsaXplR2VuZXJhdG9ycygpKSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuZm9yRWFjaChkID0+IGQuZGlzcG9zZSgpKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZUdlbmVyYXRvcnMoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLmdlbmVyYXRvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdG9yID0gdGhpcy5nZW5lcmF0b3JzLnNoaWZ0KCk7XG4gICAgICAgICAgICBnZW5lcmF0b3IuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMpKSB7XG4gICAgICAgICAgICB0aGlzLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzLmZvckVhY2god2tTcGMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NTZXJ2aWNlRmFjdG9yeSA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMy5JUHJvY2Vzc1NlcnZpY2VGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRvcnMucHVzaChuZXcgZ2VuZXJhdG9yXzEuR2VuZXJhdG9yKHdrU3BjLnVyaSwgdGhpcy5vdXRwdXRDaGFubmVsLCBwcm9jZXNzU2VydmljZUZhY3RvcnkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZ2lzdGVyQ29tbWFuZHMoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMucHVzaCh0aGlzLmNvbW1hbmRNZ3IucmVnaXN0ZXJDb21tYW5kKGNvbnN0YW50c18xLkNvbW1hbmRzLkJ1aWxkX1dvcmtzcGFjZV9TeW1ib2xzLCAocmVidWlsZCA9IHRydWUsIHRva2VuKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuYnVpbGRXb3Jrc3BhY2VTeW1ib2xzKHJlYnVpbGQsIHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBidWlsZFdvcmtzcGFjZVN5bWJvbHMocmVidWlsZCA9IHRydWUsIHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdlbmVyYXRvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb21wdFByb21pc2U7XG4gICAgICAgIGxldCBwcm9tcHRSZXNwb25zZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdG9ycy5tYXAoKGdlbmVyYXRvcikgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKCFnZW5lcmF0b3IuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IHlpZWxkIHRoaXMuZnMuZmlsZUV4aXN0cyhnZW5lcmF0b3IudGFnRmlsZVBhdGgpO1xuICAgICAgICAgICAgLy8gSWYgZmlsZSBkb2Vzbid0IGV4aXN0LCB0aGVuIHJ1biB0aGUgY3RhZyBnZW5lcmF0b3IsXG4gICAgICAgICAgICAvLyBvciBjaGVjayBpZiByZXF1aXJlZCB0byByZWJ1aWxkLlxuICAgICAgICAgICAgaWYgKCFyZWJ1aWxkICYmIGV4aXN0cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ZXIgPSAwOyBjb3VudGVyIDwgTUFYX05VTUJFUl9PRl9BVFRFTVBUU19UT19JTlNUQUxMX0FORF9CVUlMRDsgY291bnRlciArPSAxKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgZ2VuZXJhdG9yLmdlbmVyYXRlV29ya3NwYWNlVGFncygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhlbHBlcnNfMS5pc05vdEluc3RhbGxlZEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDaGFubmVsLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuIHx8IHRva2VuLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRGlzcGxheSBwcm9tcHQgb25jZSBmb3IgYWxsIHdvcmtzcGFjZXMuXG4gICAgICAgICAgICAgICAgaWYgKHByb21wdFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0UmVzcG9uc2UgPSB5aWVsZCBwcm9tcHRQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbGxlciA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfNC5JSW5zdGFsbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0UHJvbWlzZSA9IGluc3RhbGxlci5wcm9tcHRUb0luc3RhbGwodHlwZXNfNC5Qcm9kdWN0LmN0YWdzLCB0aGlzLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzWzBdLnVyaSk7XG4gICAgICAgICAgICAgICAgICAgIHByb21wdFJlc3BvbnNlID0geWllbGQgcHJvbXB0UHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb21wdFJlc3BvbnNlICE9PSB0eXBlc180Lkluc3RhbGxlclJlc3BvbnNlLkluc3RhbGxlZCB8fCAoIXRva2VuIHx8IHRva2VuLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxufVxuZXhwb3J0cy5Xb3Jrc3BhY2VTeW1ib2xzID0gV29ya3NwYWNlU3ltYm9scztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFwIl19