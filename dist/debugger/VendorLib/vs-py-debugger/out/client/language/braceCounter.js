"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("./types");

class BracePair {
  constructor(openBrace, closeBrace) {
    this.openBrace = openBrace;
    this.closeBrace = closeBrace;
  }

}

class Stack {
  constructor() {
    this.store = [];
  }

  push(val) {
    this.store.push(val);
  }

  pop() {
    return this.store.pop();
  }

  get length() {
    return this.store.length;
  }

}

class BraceCounter {
  constructor() {
    this.bracePairs = [new BracePair(types_1.TokenType.OpenBrace, types_1.TokenType.CloseBrace), new BracePair(types_1.TokenType.OpenBracket, types_1.TokenType.CloseBracket), new BracePair(types_1.TokenType.OpenCurly, types_1.TokenType.CloseCurly)];
    this.braceStacks = [new Stack(), new Stack(), new Stack()];
  }

  get count() {
    let c = 0;

    for (const s of this.braceStacks) {
      c += s.length;
    }

    return c;
  }

  isOpened(type) {
    for (let i = 0; i < this.bracePairs.length; i += 1) {
      const pair = this.bracePairs[i];

      if (pair.openBrace === type || pair.closeBrace === type) {
        return this.braceStacks[i].length > 0;
      }
    }

    return false;
  }

  countBrace(brace) {
    for (let i = 0; i < this.bracePairs.length; i += 1) {
      const pair = this.bracePairs[i];

      if (pair.openBrace === brace.type) {
        this.braceStacks[i].push(brace);
        return true;
      }

      if (pair.closeBrace === brace.type) {
        if (this.braceStacks[i].length > 0) {
          this.braceStacks[i].pop();
        }

        return true;
      }
    }

    return false;
  }

}

exports.BraceCounter = BraceCounter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyYWNlQ291bnRlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInR5cGVzXzEiLCJyZXF1aXJlIiwiQnJhY2VQYWlyIiwiY29uc3RydWN0b3IiLCJvcGVuQnJhY2UiLCJjbG9zZUJyYWNlIiwiU3RhY2siLCJzdG9yZSIsInB1c2giLCJ2YWwiLCJwb3AiLCJsZW5ndGgiLCJCcmFjZUNvdW50ZXIiLCJicmFjZVBhaXJzIiwiVG9rZW5UeXBlIiwiT3BlbkJyYWNlIiwiQ2xvc2VCcmFjZSIsIk9wZW5CcmFja2V0IiwiQ2xvc2VCcmFja2V0IiwiT3BlbkN1cmx5IiwiQ2xvc2VDdXJseSIsImJyYWNlU3RhY2tzIiwiY291bnQiLCJjIiwicyIsImlzT3BlbmVkIiwidHlwZSIsImkiLCJwYWlyIiwiY291bnRCcmFjZSIsImJyYWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLFNBQU4sQ0FBZ0I7QUFDWkMsRUFBQUEsV0FBVyxDQUFDQyxTQUFELEVBQVlDLFVBQVosRUFBd0I7QUFDL0IsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNIOztBQUpXOztBQU1oQixNQUFNQyxLQUFOLENBQVk7QUFDUkgsRUFBQUEsV0FBVyxHQUFHO0FBQ1YsU0FBS0ksS0FBTCxHQUFhLEVBQWI7QUFDSDs7QUFDREMsRUFBQUEsSUFBSSxDQUFDQyxHQUFELEVBQU07QUFDTixTQUFLRixLQUFMLENBQVdDLElBQVgsQ0FBZ0JDLEdBQWhCO0FBQ0g7O0FBQ0RDLEVBQUFBLEdBQUcsR0FBRztBQUNGLFdBQU8sS0FBS0gsS0FBTCxDQUFXRyxHQUFYLEVBQVA7QUFDSDs7QUFDUyxNQUFOQyxNQUFNLEdBQUc7QUFDVCxXQUFPLEtBQUtKLEtBQUwsQ0FBV0ksTUFBbEI7QUFDSDs7QUFaTzs7QUFjWixNQUFNQyxZQUFOLENBQW1CO0FBQ2ZULEVBQUFBLFdBQVcsR0FBRztBQUNWLFNBQUtVLFVBQUwsR0FBa0IsQ0FDZCxJQUFJWCxTQUFKLENBQWNGLE9BQU8sQ0FBQ2MsU0FBUixDQUFrQkMsU0FBaEMsRUFBMkNmLE9BQU8sQ0FBQ2MsU0FBUixDQUFrQkUsVUFBN0QsQ0FEYyxFQUVkLElBQUlkLFNBQUosQ0FBY0YsT0FBTyxDQUFDYyxTQUFSLENBQWtCRyxXQUFoQyxFQUE2Q2pCLE9BQU8sQ0FBQ2MsU0FBUixDQUFrQkksWUFBL0QsQ0FGYyxFQUdkLElBQUloQixTQUFKLENBQWNGLE9BQU8sQ0FBQ2MsU0FBUixDQUFrQkssU0FBaEMsRUFBMkNuQixPQUFPLENBQUNjLFNBQVIsQ0FBa0JNLFVBQTdELENBSGMsQ0FBbEI7QUFLQSxTQUFLQyxXQUFMLEdBQW1CLENBQUMsSUFBSWYsS0FBSixFQUFELEVBQWMsSUFBSUEsS0FBSixFQUFkLEVBQTJCLElBQUlBLEtBQUosRUFBM0IsQ0FBbkI7QUFDSDs7QUFDUSxNQUFMZ0IsS0FBSyxHQUFHO0FBQ1IsUUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsU0FBSyxNQUFNQyxDQUFYLElBQWdCLEtBQUtILFdBQXJCLEVBQWtDO0FBQzlCRSxNQUFBQSxDQUFDLElBQUlDLENBQUMsQ0FBQ2IsTUFBUDtBQUNIOztBQUNELFdBQU9ZLENBQVA7QUFDSDs7QUFDREUsRUFBQUEsUUFBUSxDQUFDQyxJQUFELEVBQU87QUFDWCxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS2QsVUFBTCxDQUFnQkYsTUFBcEMsRUFBNENnQixDQUFDLElBQUksQ0FBakQsRUFBb0Q7QUFDaEQsWUFBTUMsSUFBSSxHQUFHLEtBQUtmLFVBQUwsQ0FBZ0JjLENBQWhCLENBQWI7O0FBQ0EsVUFBSUMsSUFBSSxDQUFDeEIsU0FBTCxLQUFtQnNCLElBQW5CLElBQTJCRSxJQUFJLENBQUN2QixVQUFMLEtBQW9CcUIsSUFBbkQsRUFBeUQ7QUFDckQsZUFBTyxLQUFLTCxXQUFMLENBQWlCTSxDQUFqQixFQUFvQmhCLE1BQXBCLEdBQTZCLENBQXBDO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQVA7QUFDSDs7QUFDRGtCLEVBQUFBLFVBQVUsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2QsU0FBSyxJQUFJSCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtkLFVBQUwsQ0FBZ0JGLE1BQXBDLEVBQTRDZ0IsQ0FBQyxJQUFJLENBQWpELEVBQW9EO0FBQ2hELFlBQU1DLElBQUksR0FBRyxLQUFLZixVQUFMLENBQWdCYyxDQUFoQixDQUFiOztBQUNBLFVBQUlDLElBQUksQ0FBQ3hCLFNBQUwsS0FBbUIwQixLQUFLLENBQUNKLElBQTdCLEVBQW1DO0FBQy9CLGFBQUtMLFdBQUwsQ0FBaUJNLENBQWpCLEVBQW9CbkIsSUFBcEIsQ0FBeUJzQixLQUF6QjtBQUNBLGVBQU8sSUFBUDtBQUNIOztBQUNELFVBQUlGLElBQUksQ0FBQ3ZCLFVBQUwsS0FBb0J5QixLQUFLLENBQUNKLElBQTlCLEVBQW9DO0FBQ2hDLFlBQUksS0FBS0wsV0FBTCxDQUFpQk0sQ0FBakIsRUFBb0JoQixNQUFwQixHQUE2QixDQUFqQyxFQUFvQztBQUNoQyxlQUFLVSxXQUFMLENBQWlCTSxDQUFqQixFQUFvQmpCLEdBQXBCO0FBQ0g7O0FBQ0QsZUFBTyxJQUFQO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQVA7QUFDSDs7QUF4Q2M7O0FBMENuQlosT0FBTyxDQUFDYyxZQUFSLEdBQXVCQSxZQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jbGFzcyBCcmFjZVBhaXIge1xuICAgIGNvbnN0cnVjdG9yKG9wZW5CcmFjZSwgY2xvc2VCcmFjZSkge1xuICAgICAgICB0aGlzLm9wZW5CcmFjZSA9IG9wZW5CcmFjZTtcbiAgICAgICAgdGhpcy5jbG9zZUJyYWNlID0gY2xvc2VCcmFjZTtcbiAgICB9XG59XG5jbGFzcyBTdGFjayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBbXTtcbiAgICB9XG4gICAgcHVzaCh2YWwpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHBvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUucG9wKCk7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmxlbmd0aDtcbiAgICB9XG59XG5jbGFzcyBCcmFjZUNvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJyYWNlUGFpcnMgPSBbXG4gICAgICAgICAgICBuZXcgQnJhY2VQYWlyKHR5cGVzXzEuVG9rZW5UeXBlLk9wZW5CcmFjZSwgdHlwZXNfMS5Ub2tlblR5cGUuQ2xvc2VCcmFjZSksXG4gICAgICAgICAgICBuZXcgQnJhY2VQYWlyKHR5cGVzXzEuVG9rZW5UeXBlLk9wZW5CcmFja2V0LCB0eXBlc18xLlRva2VuVHlwZS5DbG9zZUJyYWNrZXQpLFxuICAgICAgICAgICAgbmV3IEJyYWNlUGFpcih0eXBlc18xLlRva2VuVHlwZS5PcGVuQ3VybHksIHR5cGVzXzEuVG9rZW5UeXBlLkNsb3NlQ3VybHkpXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuYnJhY2VTdGFja3MgPSBbbmV3IFN0YWNrKCksIG5ldyBTdGFjaygpLCBuZXcgU3RhY2soKV07XG4gICAgfVxuICAgIGdldCBjb3VudCgpIHtcbiAgICAgICAgbGV0IGMgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5icmFjZVN0YWNrcykge1xuICAgICAgICAgICAgYyArPSBzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgaXNPcGVuZWQodHlwZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnJhY2VQYWlycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgcGFpciA9IHRoaXMuYnJhY2VQYWlyc1tpXTtcbiAgICAgICAgICAgIGlmIChwYWlyLm9wZW5CcmFjZSA9PT0gdHlwZSB8fCBwYWlyLmNsb3NlQnJhY2UgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5icmFjZVN0YWNrc1tpXS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY291bnRCcmFjZShicmFjZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnJhY2VQYWlycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgcGFpciA9IHRoaXMuYnJhY2VQYWlyc1tpXTtcbiAgICAgICAgICAgIGlmIChwYWlyLm9wZW5CcmFjZSA9PT0gYnJhY2UudHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnJhY2VTdGFja3NbaV0ucHVzaChicmFjZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFpci5jbG9zZUJyYWNlID09PSBicmFjZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnJhY2VTdGFja3NbaV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJyYWNlU3RhY2tzW2ldLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5CcmFjZUNvdW50ZXIgPSBCcmFjZUNvdW50ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmFjZUNvdW50ZXIuanMubWFwIl19