// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-require-imports no-var-requires

var UnicodeCategory;

(function (UnicodeCategory) {
  UnicodeCategory[UnicodeCategory["Unknown"] = 0] = "Unknown";
  UnicodeCategory[UnicodeCategory["UppercaseLetter"] = 1] = "UppercaseLetter";
  UnicodeCategory[UnicodeCategory["LowercaseLetter"] = 2] = "LowercaseLetter";
  UnicodeCategory[UnicodeCategory["TitlecaseLetter"] = 3] = "TitlecaseLetter";
  UnicodeCategory[UnicodeCategory["ModifierLetter"] = 4] = "ModifierLetter";
  UnicodeCategory[UnicodeCategory["OtherLetter"] = 5] = "OtherLetter";
  UnicodeCategory[UnicodeCategory["LetterNumber"] = 6] = "LetterNumber";
  UnicodeCategory[UnicodeCategory["NonSpacingMark"] = 7] = "NonSpacingMark";
  UnicodeCategory[UnicodeCategory["SpacingCombiningMark"] = 8] = "SpacingCombiningMark";
  UnicodeCategory[UnicodeCategory["DecimalDigitNumber"] = 9] = "DecimalDigitNumber";
  UnicodeCategory[UnicodeCategory["ConnectorPunctuation"] = 10] = "ConnectorPunctuation";
})(UnicodeCategory = exports.UnicodeCategory || (exports.UnicodeCategory = {}));

function getUnicodeCategory(ch) {
  const unicodeLu = require('unicode/category/Lu');

  const unicodeLl = require('unicode/category/Ll');

  const unicodeLt = require('unicode/category/Lt');

  const unicodeLo = require('unicode/category/Lo');

  const unicodeLm = require('unicode/category/Lm');

  const unicodeNl = require('unicode/category/Nl');

  const unicodeMn = require('unicode/category/Mn');

  const unicodeMc = require('unicode/category/Mc');

  const unicodeNd = require('unicode/category/Nd');

  const unicodePc = require('unicode/category/Pc');

  if (unicodeLu[ch]) {
    return UnicodeCategory.UppercaseLetter;
  }

  if (unicodeLl[ch]) {
    return UnicodeCategory.LowercaseLetter;
  }

  if (unicodeLt[ch]) {
    return UnicodeCategory.TitlecaseLetter;
  }

  if (unicodeLo[ch]) {
    return UnicodeCategory.OtherLetter;
  }

  if (unicodeLm[ch]) {
    return UnicodeCategory.ModifierLetter;
  }

  if (unicodeNl[ch]) {
    return UnicodeCategory.LetterNumber;
  }

  if (unicodeMn[ch]) {
    return UnicodeCategory.NonSpacingMark;
  }

  if (unicodeMc[ch]) {
    return UnicodeCategory.SpacingCombiningMark;
  }

  if (unicodeNd[ch]) {
    return UnicodeCategory.DecimalDigitNumber;
  }

  if (unicodePc[ch]) {
    return UnicodeCategory.ConnectorPunctuation;
  }

  return UnicodeCategory.Unknown;
}

exports.getUnicodeCategory = getUnicodeCategory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaWNvZGUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJVbmljb2RlQ2F0ZWdvcnkiLCJnZXRVbmljb2RlQ2F0ZWdvcnkiLCJjaCIsInVuaWNvZGVMdSIsInJlcXVpcmUiLCJ1bmljb2RlTGwiLCJ1bmljb2RlTHQiLCJ1bmljb2RlTG8iLCJ1bmljb2RlTG0iLCJ1bmljb2RlTmwiLCJ1bmljb2RlTW4iLCJ1bmljb2RlTWMiLCJ1bmljb2RlTmQiLCJ1bmljb2RlUGMiLCJVcHBlcmNhc2VMZXR0ZXIiLCJMb3dlcmNhc2VMZXR0ZXIiLCJUaXRsZWNhc2VMZXR0ZXIiLCJPdGhlckxldHRlciIsIk1vZGlmaWVyTGV0dGVyIiwiTGV0dGVyTnVtYmVyIiwiTm9uU3BhY2luZ01hcmsiLCJTcGFjaW5nQ29tYmluaW5nTWFyayIsIkRlY2ltYWxEaWdpdE51bWJlciIsIkNvbm5lY3RvclB1bmN0dWF0aW9uIiwiVW5rbm93biJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDLEUsQ0FDQTs7QUFDQSxJQUFJQyxlQUFKOztBQUNBLENBQUMsVUFBVUEsZUFBVixFQUEyQjtBQUN4QkEsRUFBQUEsZUFBZSxDQUFDQSxlQUFlLENBQUMsU0FBRCxDQUFmLEdBQTZCLENBQTlCLENBQWYsR0FBa0QsU0FBbEQ7QUFDQUEsRUFBQUEsZUFBZSxDQUFDQSxlQUFlLENBQUMsaUJBQUQsQ0FBZixHQUFxQyxDQUF0QyxDQUFmLEdBQTBELGlCQUExRDtBQUNBQSxFQUFBQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxpQkFBRCxDQUFmLEdBQXFDLENBQXRDLENBQWYsR0FBMEQsaUJBQTFEO0FBQ0FBLEVBQUFBLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDLGlCQUFELENBQWYsR0FBcUMsQ0FBdEMsQ0FBZixHQUEwRCxpQkFBMUQ7QUFDQUEsRUFBQUEsZUFBZSxDQUFDQSxlQUFlLENBQUMsZ0JBQUQsQ0FBZixHQUFvQyxDQUFyQyxDQUFmLEdBQXlELGdCQUF6RDtBQUNBQSxFQUFBQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxhQUFELENBQWYsR0FBaUMsQ0FBbEMsQ0FBZixHQUFzRCxhQUF0RDtBQUNBQSxFQUFBQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxjQUFELENBQWYsR0FBa0MsQ0FBbkMsQ0FBZixHQUF1RCxjQUF2RDtBQUNBQSxFQUFBQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxnQkFBRCxDQUFmLEdBQW9DLENBQXJDLENBQWYsR0FBeUQsZ0JBQXpEO0FBQ0FBLEVBQUFBLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDLHNCQUFELENBQWYsR0FBMEMsQ0FBM0MsQ0FBZixHQUErRCxzQkFBL0Q7QUFDQUEsRUFBQUEsZUFBZSxDQUFDQSxlQUFlLENBQUMsb0JBQUQsQ0FBZixHQUF3QyxDQUF6QyxDQUFmLEdBQTZELG9CQUE3RDtBQUNBQSxFQUFBQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxzQkFBRCxDQUFmLEdBQTBDLEVBQTNDLENBQWYsR0FBZ0Usc0JBQWhFO0FBQ0gsQ0FaRCxFQVlHQSxlQUFlLEdBQUdGLE9BQU8sQ0FBQ0UsZUFBUixLQUE0QkYsT0FBTyxDQUFDRSxlQUFSLEdBQTBCLEVBQXRELENBWnJCOztBQWFBLFNBQVNDLGtCQUFULENBQTRCQyxFQUE1QixFQUFnQztBQUM1QixRQUFNQyxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNUSxTQUFTLEdBQUdSLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxRQUFNUyxTQUFTLEdBQUdULE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxNQUFJRCxTQUFTLENBQUNELEVBQUQsQ0FBYixFQUFtQjtBQUNmLFdBQU9GLGVBQWUsQ0FBQ2MsZUFBdkI7QUFDSDs7QUFDRCxNQUFJVCxTQUFTLENBQUNILEVBQUQsQ0FBYixFQUFtQjtBQUNmLFdBQU9GLGVBQWUsQ0FBQ2UsZUFBdkI7QUFDSDs7QUFDRCxNQUFJVCxTQUFTLENBQUNKLEVBQUQsQ0FBYixFQUFtQjtBQUNmLFdBQU9GLGVBQWUsQ0FBQ2dCLGVBQXZCO0FBQ0g7O0FBQ0QsTUFBSVQsU0FBUyxDQUFDTCxFQUFELENBQWIsRUFBbUI7QUFDZixXQUFPRixlQUFlLENBQUNpQixXQUF2QjtBQUNIOztBQUNELE1BQUlULFNBQVMsQ0FBQ04sRUFBRCxDQUFiLEVBQW1CO0FBQ2YsV0FBT0YsZUFBZSxDQUFDa0IsY0FBdkI7QUFDSDs7QUFDRCxNQUFJVCxTQUFTLENBQUNQLEVBQUQsQ0FBYixFQUFtQjtBQUNmLFdBQU9GLGVBQWUsQ0FBQ21CLFlBQXZCO0FBQ0g7O0FBQ0QsTUFBSVQsU0FBUyxDQUFDUixFQUFELENBQWIsRUFBbUI7QUFDZixXQUFPRixlQUFlLENBQUNvQixjQUF2QjtBQUNIOztBQUNELE1BQUlULFNBQVMsQ0FBQ1QsRUFBRCxDQUFiLEVBQW1CO0FBQ2YsV0FBT0YsZUFBZSxDQUFDcUIsb0JBQXZCO0FBQ0g7O0FBQ0QsTUFBSVQsU0FBUyxDQUFDVixFQUFELENBQWIsRUFBbUI7QUFDZixXQUFPRixlQUFlLENBQUNzQixrQkFBdkI7QUFDSDs7QUFDRCxNQUFJVCxTQUFTLENBQUNYLEVBQUQsQ0FBYixFQUFtQjtBQUNmLFdBQU9GLGVBQWUsQ0FBQ3VCLG9CQUF2QjtBQUNIOztBQUNELFNBQU92QixlQUFlLENBQUN3QixPQUF2QjtBQUNIOztBQUNEMUIsT0FBTyxDQUFDRyxrQkFBUixHQUE2QkEsa0JBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgbm8tdmFyLXJlcXVpcmVzXG52YXIgVW5pY29kZUNhdGVnb3J5O1xuKGZ1bmN0aW9uIChVbmljb2RlQ2F0ZWdvcnkpIHtcbiAgICBVbmljb2RlQ2F0ZWdvcnlbVW5pY29kZUNhdGVnb3J5W1wiVW5rbm93blwiXSA9IDBdID0gXCJVbmtub3duXCI7XG4gICAgVW5pY29kZUNhdGVnb3J5W1VuaWNvZGVDYXRlZ29yeVtcIlVwcGVyY2FzZUxldHRlclwiXSA9IDFdID0gXCJVcHBlcmNhc2VMZXR0ZXJcIjtcbiAgICBVbmljb2RlQ2F0ZWdvcnlbVW5pY29kZUNhdGVnb3J5W1wiTG93ZXJjYXNlTGV0dGVyXCJdID0gMl0gPSBcIkxvd2VyY2FzZUxldHRlclwiO1xuICAgIFVuaWNvZGVDYXRlZ29yeVtVbmljb2RlQ2F0ZWdvcnlbXCJUaXRsZWNhc2VMZXR0ZXJcIl0gPSAzXSA9IFwiVGl0bGVjYXNlTGV0dGVyXCI7XG4gICAgVW5pY29kZUNhdGVnb3J5W1VuaWNvZGVDYXRlZ29yeVtcIk1vZGlmaWVyTGV0dGVyXCJdID0gNF0gPSBcIk1vZGlmaWVyTGV0dGVyXCI7XG4gICAgVW5pY29kZUNhdGVnb3J5W1VuaWNvZGVDYXRlZ29yeVtcIk90aGVyTGV0dGVyXCJdID0gNV0gPSBcIk90aGVyTGV0dGVyXCI7XG4gICAgVW5pY29kZUNhdGVnb3J5W1VuaWNvZGVDYXRlZ29yeVtcIkxldHRlck51bWJlclwiXSA9IDZdID0gXCJMZXR0ZXJOdW1iZXJcIjtcbiAgICBVbmljb2RlQ2F0ZWdvcnlbVW5pY29kZUNhdGVnb3J5W1wiTm9uU3BhY2luZ01hcmtcIl0gPSA3XSA9IFwiTm9uU3BhY2luZ01hcmtcIjtcbiAgICBVbmljb2RlQ2F0ZWdvcnlbVW5pY29kZUNhdGVnb3J5W1wiU3BhY2luZ0NvbWJpbmluZ01hcmtcIl0gPSA4XSA9IFwiU3BhY2luZ0NvbWJpbmluZ01hcmtcIjtcbiAgICBVbmljb2RlQ2F0ZWdvcnlbVW5pY29kZUNhdGVnb3J5W1wiRGVjaW1hbERpZ2l0TnVtYmVyXCJdID0gOV0gPSBcIkRlY2ltYWxEaWdpdE51bWJlclwiO1xuICAgIFVuaWNvZGVDYXRlZ29yeVtVbmljb2RlQ2F0ZWdvcnlbXCJDb25uZWN0b3JQdW5jdHVhdGlvblwiXSA9IDEwXSA9IFwiQ29ubmVjdG9yUHVuY3R1YXRpb25cIjtcbn0pKFVuaWNvZGVDYXRlZ29yeSA9IGV4cG9ydHMuVW5pY29kZUNhdGVnb3J5IHx8IChleHBvcnRzLlVuaWNvZGVDYXRlZ29yeSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRVbmljb2RlQ2F0ZWdvcnkoY2gpIHtcbiAgICBjb25zdCB1bmljb2RlTHUgPSByZXF1aXJlKCd1bmljb2RlL2NhdGVnb3J5L0x1Jyk7XG4gICAgY29uc3QgdW5pY29kZUxsID0gcmVxdWlyZSgndW5pY29kZS9jYXRlZ29yeS9MbCcpO1xuICAgIGNvbnN0IHVuaWNvZGVMdCA9IHJlcXVpcmUoJ3VuaWNvZGUvY2F0ZWdvcnkvTHQnKTtcbiAgICBjb25zdCB1bmljb2RlTG8gPSByZXF1aXJlKCd1bmljb2RlL2NhdGVnb3J5L0xvJyk7XG4gICAgY29uc3QgdW5pY29kZUxtID0gcmVxdWlyZSgndW5pY29kZS9jYXRlZ29yeS9MbScpO1xuICAgIGNvbnN0IHVuaWNvZGVObCA9IHJlcXVpcmUoJ3VuaWNvZGUvY2F0ZWdvcnkvTmwnKTtcbiAgICBjb25zdCB1bmljb2RlTW4gPSByZXF1aXJlKCd1bmljb2RlL2NhdGVnb3J5L01uJyk7XG4gICAgY29uc3QgdW5pY29kZU1jID0gcmVxdWlyZSgndW5pY29kZS9jYXRlZ29yeS9NYycpO1xuICAgIGNvbnN0IHVuaWNvZGVOZCA9IHJlcXVpcmUoJ3VuaWNvZGUvY2F0ZWdvcnkvTmQnKTtcbiAgICBjb25zdCB1bmljb2RlUGMgPSByZXF1aXJlKCd1bmljb2RlL2NhdGVnb3J5L1BjJyk7XG4gICAgaWYgKHVuaWNvZGVMdVtjaF0pIHtcbiAgICAgICAgcmV0dXJuIFVuaWNvZGVDYXRlZ29yeS5VcHBlcmNhc2VMZXR0ZXI7XG4gICAgfVxuICAgIGlmICh1bmljb2RlTGxbY2hdKSB7XG4gICAgICAgIHJldHVybiBVbmljb2RlQ2F0ZWdvcnkuTG93ZXJjYXNlTGV0dGVyO1xuICAgIH1cbiAgICBpZiAodW5pY29kZUx0W2NoXSkge1xuICAgICAgICByZXR1cm4gVW5pY29kZUNhdGVnb3J5LlRpdGxlY2FzZUxldHRlcjtcbiAgICB9XG4gICAgaWYgKHVuaWNvZGVMb1tjaF0pIHtcbiAgICAgICAgcmV0dXJuIFVuaWNvZGVDYXRlZ29yeS5PdGhlckxldHRlcjtcbiAgICB9XG4gICAgaWYgKHVuaWNvZGVMbVtjaF0pIHtcbiAgICAgICAgcmV0dXJuIFVuaWNvZGVDYXRlZ29yeS5Nb2RpZmllckxldHRlcjtcbiAgICB9XG4gICAgaWYgKHVuaWNvZGVObFtjaF0pIHtcbiAgICAgICAgcmV0dXJuIFVuaWNvZGVDYXRlZ29yeS5MZXR0ZXJOdW1iZXI7XG4gICAgfVxuICAgIGlmICh1bmljb2RlTW5bY2hdKSB7XG4gICAgICAgIHJldHVybiBVbmljb2RlQ2F0ZWdvcnkuTm9uU3BhY2luZ01hcms7XG4gICAgfVxuICAgIGlmICh1bmljb2RlTWNbY2hdKSB7XG4gICAgICAgIHJldHVybiBVbmljb2RlQ2F0ZWdvcnkuU3BhY2luZ0NvbWJpbmluZ01hcms7XG4gICAgfVxuICAgIGlmICh1bmljb2RlTmRbY2hdKSB7XG4gICAgICAgIHJldHVybiBVbmljb2RlQ2F0ZWdvcnkuRGVjaW1hbERpZ2l0TnVtYmVyO1xuICAgIH1cbiAgICBpZiAodW5pY29kZVBjW2NoXSkge1xuICAgICAgICByZXR1cm4gVW5pY29kZUNhdGVnb3J5LkNvbm5lY3RvclB1bmN0dWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gVW5pY29kZUNhdGVnb3J5LlVua25vd247XG59XG5leHBvcnRzLmdldFVuaWNvZGVDYXRlZ29yeSA9IGdldFVuaWNvZGVDYXRlZ29yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaWNvZGUuanMubWFwIl19