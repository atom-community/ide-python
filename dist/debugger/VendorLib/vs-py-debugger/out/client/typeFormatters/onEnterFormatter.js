"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const lineFormatter_1 = require("../formatters/lineFormatter");

const types_1 = require("../language/types");

const providerUtilities_1 = require("../providers/providerUtilities");

class OnEnterFormatter {
  constructor() {
    this.formatter = new lineFormatter_1.LineFormatter();
  }

  provideOnTypeFormattingEdits(document, position, ch, options, cancellationToken) {
    if (position.line === 0) {
      return [];
    } // Check case when the entire line belongs to a comment or string


    const prevLine = document.lineAt(position.line - 1);
    const tokens = providerUtilities_1.getDocumentTokens(document, position, types_1.TokenizerMode.CommentsAndStrings);
    const lineStartTokenIndex = tokens.getItemContaining(document.offsetAt(prevLine.range.start));
    const lineEndTokenIndex = tokens.getItemContaining(document.offsetAt(prevLine.range.end));

    if (lineStartTokenIndex >= 0 && lineStartTokenIndex === lineEndTokenIndex) {
      const token = tokens.getItemAt(lineStartTokenIndex);

      if (token.type === types_1.TokenType.Semicolon || token.type === types_1.TokenType.String) {
        return [];
      }
    }

    const formatted = this.formatter.formatLine(document, prevLine.lineNumber);

    if (formatted === prevLine.text) {
      return [];
    }

    return [new vscode_1.TextEdit(prevLine.range, formatted)];
  }

}

exports.OnEnterFormatter = OnEnterFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9uRW50ZXJGb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2c2NvZGVfMSIsInJlcXVpcmUiLCJsaW5lRm9ybWF0dGVyXzEiLCJ0eXBlc18xIiwicHJvdmlkZXJVdGlsaXRpZXNfMSIsIk9uRW50ZXJGb3JtYXR0ZXIiLCJjb25zdHJ1Y3RvciIsImZvcm1hdHRlciIsIkxpbmVGb3JtYXR0ZXIiLCJwcm92aWRlT25UeXBlRm9ybWF0dGluZ0VkaXRzIiwiZG9jdW1lbnQiLCJwb3NpdGlvbiIsImNoIiwib3B0aW9ucyIsImNhbmNlbGxhdGlvblRva2VuIiwibGluZSIsInByZXZMaW5lIiwibGluZUF0IiwidG9rZW5zIiwiZ2V0RG9jdW1lbnRUb2tlbnMiLCJUb2tlbml6ZXJNb2RlIiwiQ29tbWVudHNBbmRTdHJpbmdzIiwibGluZVN0YXJ0VG9rZW5JbmRleCIsImdldEl0ZW1Db250YWluaW5nIiwib2Zmc2V0QXQiLCJyYW5nZSIsInN0YXJ0IiwibGluZUVuZFRva2VuSW5kZXgiLCJlbmQiLCJ0b2tlbiIsImdldEl0ZW1BdCIsInR5cGUiLCJUb2tlblR5cGUiLCJTZW1pY29sb24iLCJTdHJpbmciLCJmb3JtYXR0ZWQiLCJmb3JtYXRMaW5lIiwibGluZU51bWJlciIsInRleHQiLCJUZXh0RWRpdCJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNQyxlQUFlLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUEvQjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxtQkFBbUIsR0FBR0gsT0FBTyxDQUFDLGdDQUFELENBQW5DOztBQUNBLE1BQU1JLGdCQUFOLENBQXVCO0FBQ25CQyxFQUFBQSxXQUFXLEdBQUc7QUFDVixTQUFLQyxTQUFMLEdBQWlCLElBQUlMLGVBQWUsQ0FBQ00sYUFBcEIsRUFBakI7QUFDSDs7QUFDREMsRUFBQUEsNEJBQTRCLENBQUNDLFFBQUQsRUFBV0MsUUFBWCxFQUFxQkMsRUFBckIsRUFBeUJDLE9BQXpCLEVBQWtDQyxpQkFBbEMsRUFBcUQ7QUFDN0UsUUFBSUgsUUFBUSxDQUFDSSxJQUFULEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLGFBQU8sRUFBUDtBQUNILEtBSDRFLENBSTdFOzs7QUFDQSxVQUFNQyxRQUFRLEdBQUdOLFFBQVEsQ0FBQ08sTUFBVCxDQUFnQk4sUUFBUSxDQUFDSSxJQUFULEdBQWdCLENBQWhDLENBQWpCO0FBQ0EsVUFBTUcsTUFBTSxHQUFHZCxtQkFBbUIsQ0FBQ2UsaUJBQXBCLENBQXNDVCxRQUF0QyxFQUFnREMsUUFBaEQsRUFBMERSLE9BQU8sQ0FBQ2lCLGFBQVIsQ0FBc0JDLGtCQUFoRixDQUFmO0FBQ0EsVUFBTUMsbUJBQW1CLEdBQUdKLE1BQU0sQ0FBQ0ssaUJBQVAsQ0FBeUJiLFFBQVEsQ0FBQ2MsUUFBVCxDQUFrQlIsUUFBUSxDQUFDUyxLQUFULENBQWVDLEtBQWpDLENBQXpCLENBQTVCO0FBQ0EsVUFBTUMsaUJBQWlCLEdBQUdULE1BQU0sQ0FBQ0ssaUJBQVAsQ0FBeUJiLFFBQVEsQ0FBQ2MsUUFBVCxDQUFrQlIsUUFBUSxDQUFDUyxLQUFULENBQWVHLEdBQWpDLENBQXpCLENBQTFCOztBQUNBLFFBQUlOLG1CQUFtQixJQUFJLENBQXZCLElBQTRCQSxtQkFBbUIsS0FBS0ssaUJBQXhELEVBQTJFO0FBQ3ZFLFlBQU1FLEtBQUssR0FBR1gsTUFBTSxDQUFDWSxTQUFQLENBQWlCUixtQkFBakIsQ0FBZDs7QUFDQSxVQUFJTyxLQUFLLENBQUNFLElBQU4sS0FBZTVCLE9BQU8sQ0FBQzZCLFNBQVIsQ0FBa0JDLFNBQWpDLElBQThDSixLQUFLLENBQUNFLElBQU4sS0FBZTVCLE9BQU8sQ0FBQzZCLFNBQVIsQ0FBa0JFLE1BQW5GLEVBQTJGO0FBQ3ZGLGVBQU8sRUFBUDtBQUNIO0FBQ0o7O0FBQ0QsVUFBTUMsU0FBUyxHQUFHLEtBQUs1QixTQUFMLENBQWU2QixVQUFmLENBQTBCMUIsUUFBMUIsRUFBb0NNLFFBQVEsQ0FBQ3FCLFVBQTdDLENBQWxCOztBQUNBLFFBQUlGLFNBQVMsS0FBS25CLFFBQVEsQ0FBQ3NCLElBQTNCLEVBQWlDO0FBQzdCLGFBQU8sRUFBUDtBQUNIOztBQUNELFdBQU8sQ0FBQyxJQUFJdEMsUUFBUSxDQUFDdUMsUUFBYixDQUFzQnZCLFFBQVEsQ0FBQ1MsS0FBL0IsRUFBc0NVLFNBQXRDLENBQUQsQ0FBUDtBQUNIOztBQXhCa0I7O0FBMEJ2QnJDLE9BQU8sQ0FBQ08sZ0JBQVIsR0FBMkJBLGdCQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jb25zdCBsaW5lRm9ybWF0dGVyXzEgPSByZXF1aXJlKFwiLi4vZm9ybWF0dGVycy9saW5lRm9ybWF0dGVyXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9sYW5ndWFnZS90eXBlc1wiKTtcbmNvbnN0IHByb3ZpZGVyVXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi4vcHJvdmlkZXJzL3Byb3ZpZGVyVXRpbGl0aWVzXCIpO1xuY2xhc3MgT25FbnRlckZvcm1hdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyID0gbmV3IGxpbmVGb3JtYXR0ZXJfMS5MaW5lRm9ybWF0dGVyKCk7XG4gICAgfVxuICAgIHByb3ZpZGVPblR5cGVGb3JtYXR0aW5nRWRpdHMoZG9jdW1lbnQsIHBvc2l0aW9uLCBjaCwgb3B0aW9ucywgY2FuY2VsbGF0aW9uVG9rZW4pIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uLmxpbmUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBjYXNlIHdoZW4gdGhlIGVudGlyZSBsaW5lIGJlbG9uZ3MgdG8gYSBjb21tZW50IG9yIHN0cmluZ1xuICAgICAgICBjb25zdCBwcmV2TGluZSA9IGRvY3VtZW50LmxpbmVBdChwb3NpdGlvbi5saW5lIC0gMSk7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHByb3ZpZGVyVXRpbGl0aWVzXzEuZ2V0RG9jdW1lbnRUb2tlbnMoZG9jdW1lbnQsIHBvc2l0aW9uLCB0eXBlc18xLlRva2VuaXplck1vZGUuQ29tbWVudHNBbmRTdHJpbmdzKTtcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0VG9rZW5JbmRleCA9IHRva2Vucy5nZXRJdGVtQ29udGFpbmluZyhkb2N1bWVudC5vZmZzZXRBdChwcmV2TGluZS5yYW5nZS5zdGFydCkpO1xuICAgICAgICBjb25zdCBsaW5lRW5kVG9rZW5JbmRleCA9IHRva2Vucy5nZXRJdGVtQ29udGFpbmluZyhkb2N1bWVudC5vZmZzZXRBdChwcmV2TGluZS5yYW5nZS5lbmQpKTtcbiAgICAgICAgaWYgKGxpbmVTdGFydFRva2VuSW5kZXggPj0gMCAmJiBsaW5lU3RhcnRUb2tlbkluZGV4ID09PSBsaW5lRW5kVG9rZW5JbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnMuZ2V0SXRlbUF0KGxpbmVTdGFydFRva2VuSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IHR5cGVzXzEuVG9rZW5UeXBlLlNlbWljb2xvbiB8fCB0b2tlbi50eXBlID09PSB0eXBlc18xLlRva2VuVHlwZS5TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9ybWF0dGVkID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0TGluZShkb2N1bWVudCwgcHJldkxpbmUubGluZU51bWJlcik7XG4gICAgICAgIGlmIChmb3JtYXR0ZWQgPT09IHByZXZMaW5lLnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25ldyB2c2NvZGVfMS5UZXh0RWRpdChwcmV2TGluZS5yYW5nZSwgZm9ybWF0dGVkKV07XG4gICAgfVxufVxuZXhwb3J0cy5PbkVudGVyRm9ybWF0dGVyID0gT25FbnRlckZvcm1hdHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uRW50ZXJGb3JtYXR0ZXIuanMubWFwIl19