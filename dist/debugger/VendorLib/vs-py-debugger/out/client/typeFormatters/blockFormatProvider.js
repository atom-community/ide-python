"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const codeBlockFormatProvider_1 = require("./codeBlockFormatProvider");

const contracts_1 = require("./contracts");

const contracts_2 = require("./contracts");

const contracts_3 = require("./contracts");

class BlockFormatProviders {
  constructor() {
    this.providers = [];
    const boundaryBlocks = [contracts_3.DEF_REGEX, contracts_3.ASYNC_DEF_REGEX, contracts_3.CLASS_REGEX];
    const elseParentBlocks = [contracts_1.IF_REGEX, contracts_1.ELIF_REGEX, contracts_1.FOR_IN_REGEX, contracts_1.ASYNC_FOR_IN_REGEX, contracts_1.WHILE_REGEX, contracts_2.TRY_REGEX, contracts_2.EXCEPT_REGEX];
    this.providers.push(new codeBlockFormatProvider_1.CodeBlockFormatProvider(contracts_1.ELSE_REGEX, elseParentBlocks, boundaryBlocks));
    const elifParentBlocks = [contracts_1.IF_REGEX, contracts_1.ELIF_REGEX];
    this.providers.push(new codeBlockFormatProvider_1.CodeBlockFormatProvider(contracts_1.ELIF_REGEX, elifParentBlocks, boundaryBlocks));
    const exceptParentBlocks = [contracts_2.TRY_REGEX, contracts_2.EXCEPT_REGEX];
    this.providers.push(new codeBlockFormatProvider_1.CodeBlockFormatProvider(contracts_2.EXCEPT_REGEX, exceptParentBlocks, boundaryBlocks));
    const finallyParentBlocks = [contracts_2.TRY_REGEX, contracts_2.EXCEPT_REGEX];
    this.providers.push(new codeBlockFormatProvider_1.CodeBlockFormatProvider(contracts_2.FINALLY_REGEX, finallyParentBlocks, boundaryBlocks));
  }

  provideOnTypeFormattingEdits(document, position, ch, options, token) {
    if (position.line === 0) {
      return [];
    }

    const currentLine = document.lineAt(position.line);
    const prevousLine = document.lineAt(position.line - 1); // We're only interested in cases where the current block is at the same indentation level as the previous line
    // E.g. if we have an if..else block, generally the else statement would be at the same level as the code in the if...

    if (currentLine.firstNonWhitespaceCharacterIndex !== prevousLine.firstNonWhitespaceCharacterIndex) {
      return [];
    }

    const currentLineText = currentLine.text;
    const provider = this.providers.find(p => p.canProvideEdits(currentLineText));

    if (provider) {
      return provider.provideEdits(document, position, ch, options, currentLine);
    }

    return [];
  }

}

exports.BlockFormatProviders = BlockFormatProviders;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrRm9ybWF0UHJvdmlkZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb2RlQmxvY2tGb3JtYXRQcm92aWRlcl8xIiwicmVxdWlyZSIsImNvbnRyYWN0c18xIiwiY29udHJhY3RzXzIiLCJjb250cmFjdHNfMyIsIkJsb2NrRm9ybWF0UHJvdmlkZXJzIiwiY29uc3RydWN0b3IiLCJwcm92aWRlcnMiLCJib3VuZGFyeUJsb2NrcyIsIkRFRl9SRUdFWCIsIkFTWU5DX0RFRl9SRUdFWCIsIkNMQVNTX1JFR0VYIiwiZWxzZVBhcmVudEJsb2NrcyIsIklGX1JFR0VYIiwiRUxJRl9SRUdFWCIsIkZPUl9JTl9SRUdFWCIsIkFTWU5DX0ZPUl9JTl9SRUdFWCIsIldISUxFX1JFR0VYIiwiVFJZX1JFR0VYIiwiRVhDRVBUX1JFR0VYIiwicHVzaCIsIkNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyIiwiRUxTRV9SRUdFWCIsImVsaWZQYXJlbnRCbG9ja3MiLCJleGNlcHRQYXJlbnRCbG9ja3MiLCJmaW5hbGx5UGFyZW50QmxvY2tzIiwiRklOQUxMWV9SRUdFWCIsInByb3ZpZGVPblR5cGVGb3JtYXR0aW5nRWRpdHMiLCJkb2N1bWVudCIsInBvc2l0aW9uIiwiY2giLCJvcHRpb25zIiwidG9rZW4iLCJsaW5lIiwiY3VycmVudExpbmUiLCJsaW5lQXQiLCJwcmV2b3VzTGluZSIsImZpcnN0Tm9uV2hpdGVzcGFjZUNoYXJhY3RlckluZGV4IiwiY3VycmVudExpbmVUZXh0IiwidGV4dCIsInByb3ZpZGVyIiwiZmluZCIsInAiLCJjYW5Qcm92aWRlRWRpdHMiLCJwcm92aWRlRWRpdHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLHlCQUF5QixHQUFH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QUFjO0FBQ1YsYUFBT0EsUUFBUSxDQUFDSSxZQUFULENBQXNCaEIsUUFBdEIsRUFBZ0NDLFFBQWhDLEVBQTBDQyxFQUExQyxFQUE4Q0MsT0FBOUMsRUFBdURHLFdBQXZELENBQVA7QUFDSDs7QUFDRCxXQUFPLEVBQVA7QUFDSDs7QUFuRHNCOztBQXFEM0JwQyxPQUFPLENBQUNPLG9CQUFSLEdBQStCQSxvQkFBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9jb2RlQmxvY2tGb3JtYXRQcm92aWRlclwiKTtcbmNvbnN0IGNvbnRyYWN0c18xID0gcmVxdWlyZShcIi4vY29udHJhY3RzXCIpO1xuY29uc3QgY29udHJhY3RzXzIgPSByZXF1aXJlKFwiLi9jb250cmFjdHNcIik7XG5jb25zdCBjb250cmFjdHNfMyA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0c1wiKTtcbmNsYXNzIEJsb2NrRm9ybWF0UHJvdmlkZXJzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBbXTtcbiAgICAgICAgY29uc3QgYm91bmRhcnlCbG9ja3MgPSBbXG4gICAgICAgICAgICBjb250cmFjdHNfMy5ERUZfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMy5BU1lOQ19ERUZfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMy5DTEFTU19SRUdFWFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBlbHNlUGFyZW50QmxvY2tzID0gW1xuICAgICAgICAgICAgY29udHJhY3RzXzEuSUZfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMS5FTElGX1JFR0VYLFxuICAgICAgICAgICAgY29udHJhY3RzXzEuRk9SX0lOX1JFR0VYLFxuICAgICAgICAgICAgY29udHJhY3RzXzEuQVNZTkNfRk9SX0lOX1JFR0VYLFxuICAgICAgICAgICAgY29udHJhY3RzXzEuV0hJTEVfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMi5UUllfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMi5FWENFUFRfUkVHRVhcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5wcm92aWRlcnMucHVzaChuZXcgY29kZUJsb2NrRm9ybWF0UHJvdmlkZXJfMS5Db2RlQmxvY2tGb3JtYXRQcm92aWRlcihjb250cmFjdHNfMS5FTFNFX1JFR0VYLCBlbHNlUGFyZW50QmxvY2tzLCBib3VuZGFyeUJsb2NrcykpO1xuICAgICAgICBjb25zdCBlbGlmUGFyZW50QmxvY2tzID0gW1xuICAgICAgICAgICAgY29udHJhY3RzXzEuSUZfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMS5FTElGX1JFR0VYXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnB1c2gobmV3IGNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyXzEuQ29kZUJsb2NrRm9ybWF0UHJvdmlkZXIoY29udHJhY3RzXzEuRUxJRl9SRUdFWCwgZWxpZlBhcmVudEJsb2NrcywgYm91bmRhcnlCbG9ja3MpKTtcbiAgICAgICAgY29uc3QgZXhjZXB0UGFyZW50QmxvY2tzID0gW1xuICAgICAgICAgICAgY29udHJhY3RzXzIuVFJZX1JFR0VYLFxuICAgICAgICAgICAgY29udHJhY3RzXzIuRVhDRVBUX1JFR0VYXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnB1c2gobmV3IGNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyXzEuQ29kZUJsb2NrRm9ybWF0UHJvdmlkZXIoY29udHJhY3RzXzIuRVhDRVBUX1JFR0VYLCBleGNlcHRQYXJlbnRCbG9ja3MsIGJvdW5kYXJ5QmxvY2tzKSk7XG4gICAgICAgIGNvbnN0IGZpbmFsbHlQYXJlbnRCbG9ja3MgPSBbXG4gICAgICAgICAgICBjb250cmFjdHNfMi5UUllfUkVHRVgsXG4gICAgICAgICAgICBjb250cmFjdHNfMi5FWENFUFRfUkVHRVhcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5wcm92aWRlcnMucHVzaChuZXcgY29kZUJsb2NrRm9ybWF0UHJvdmlkZXJfMS5Db2RlQmxvY2tGb3JtYXRQcm92aWRlcihjb250cmFjdHNfMi5GSU5BTExZX1JFR0VYLCBmaW5hbGx5UGFyZW50QmxvY2tzLCBib3VuZGFyeUJsb2NrcykpO1xuICAgIH1cbiAgICBwcm92aWRlT25UeXBlRm9ybWF0dGluZ0VkaXRzKGRvY3VtZW50LCBwb3NpdGlvbiwgY2gsIG9wdGlvbnMsIHRva2VuKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudExpbmUgPSBkb2N1bWVudC5saW5lQXQocG9zaXRpb24ubGluZSk7XG4gICAgICAgIGNvbnN0IHByZXZvdXNMaW5lID0gZG9jdW1lbnQubGluZUF0KHBvc2l0aW9uLmxpbmUgLSAxKTtcbiAgICAgICAgLy8gV2UncmUgb25seSBpbnRlcmVzdGVkIGluIGNhc2VzIHdoZXJlIHRoZSBjdXJyZW50IGJsb2NrIGlzIGF0IHRoZSBzYW1lIGluZGVudGF0aW9uIGxldmVsIGFzIHRoZSBwcmV2aW91cyBsaW5lXG4gICAgICAgIC8vIEUuZy4gaWYgd2UgaGF2ZSBhbiBpZi4uZWxzZSBibG9jaywgZ2VuZXJhbGx5IHRoZSBlbHNlIHN0YXRlbWVudCB3b3VsZCBiZSBhdCB0aGUgc2FtZSBsZXZlbCBhcyB0aGUgY29kZSBpbiB0aGUgaWYuLi5cbiAgICAgICAgaWYgKGN1cnJlbnRMaW5lLmZpcnN0Tm9uV2hpdGVzcGFjZUNoYXJhY3RlckluZGV4ICE9PSBwcmV2b3VzTGluZS5maXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaW5lVGV4dCA9IGN1cnJlbnRMaW5lLnRleHQ7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wcm92aWRlcnMuZmluZChwID0+IHAuY2FuUHJvdmlkZUVkaXRzKGN1cnJlbnRMaW5lVGV4dCkpO1xuICAgICAgICBpZiAocHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5wcm92aWRlRWRpdHMoZG9jdW1lbnQsIHBvc2l0aW9uLCBjaCwgb3B0aW9ucywgY3VycmVudExpbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLkJsb2NrRm9ybWF0UHJvdmlkZXJzID0gQmxvY2tGb3JtYXRQcm92aWRlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9ja0Zvcm1hdFByb3ZpZGVyLmpzLm1hcCJdfQ==