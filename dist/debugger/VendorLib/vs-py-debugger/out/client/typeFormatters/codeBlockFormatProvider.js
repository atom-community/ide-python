"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const vscode_2 = require("vscode");

class CodeBlockFormatProvider {
  constructor(blockRegExp, previousBlockRegExps, boundaryRegExps) {
    this.blockRegExp = blockRegExp;
    this.previousBlockRegExps = previousBlockRegExps;
    this.boundaryRegExps = boundaryRegExps;
  }

  canProvideEdits(line) {
    return this.blockRegExp.test(line);
  }

  provideEdits(document, position, ch, options, line) {
    // We can have else for the following blocks:
    // if:
    // elif x:
    // for x in y:
    // while x:
    // We need to find a block statement that is less than or equal to this statement block (but not greater)
    for (let lineNumber = position.line - 1; lineNumber >= 0; lineNumber -= 1) {
      const prevLine = document.lineAt(lineNumber);
      const prevLineText = prevLine.text; // Oops, we've reached a boundary (like the function or class definition)
      // Get out of here

      if (this.boundaryRegExps.some(value => value.test(prevLineText))) {
        return [];
      }

      const blockRegEx = this.previousBlockRegExps.find(value => value.test(prevLineText));

      if (!blockRegEx) {
        continue;
      }

      const startOfBlockInLine = prevLine.firstNonWhitespaceCharacterIndex;

      if (startOfBlockInLine > line.firstNonWhitespaceCharacterIndex) {
        continue;
      }

      const startPosition = new vscode_2.Position(position.line, 0);
      const endPosition = new vscode_2.Position(position.line, line.firstNonWhitespaceCharacterIndex - startOfBlockInLine);

      if (startPosition.isEqual(endPosition)) {
        // current block cannot be at the same level as a preivous block
        continue;
      }

      if (options.insertSpaces) {
        return [vscode_1.TextEdit.delete(new vscode_2.Range(startPosition, endPosition))];
      } else {
        // Delete everything before the block and insert the same characters we have in the previous block
        const prefixOfPreviousBlock = prevLineText.substring(0, startOfBlockInLine);
        const startDeletePosition = new vscode_2.Position(position.line, 0);
        const endDeletePosition = new vscode_2.Position(position.line, line.firstNonWhitespaceCharacterIndex);
        return [vscode_1.TextEdit.delete(new vscode_2.Range(startDeletePosition, endDeletePosition)), vscode_1.TextEdit.insert(startDeletePosition, prefixOfPreviousBlock)];
      }
    }

    return [];
  }

}

exports.CodeBlockFormatProvider = CodeBlockFormatProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidnNjb2RlXzEiLCJyZXF1aXJlIiwidnNjb2RlXzIiLCJDb2RlQmxvY2tGb3JtYXRQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYmxvY2tSZWdFeHAiLCJwcmV2aW91c0Jsb2NrUmVnRXhwcyIsImJvdW5kYXJ5UmVnRXhwcyIsImNhblByb3ZpZGVFZGl0cyIsImxpbmUiLCJ0ZXN0IiwicHJvdmlkZUVkaXRzIiwiZG9jdW1lbnQiLCJwb3NpdGlvbiIsImNoIiwib3B0aW9ucyIsImxpbmVOdW1iZXIiLCJwcmV2TGluZSIsImxpbmVBdCIsInByZXZMaW5lVGV4dCIsInRleHQiLCJzb21lIiwiYmxvY2tSZWdFeCIsImZpbmQiLCJzdGFydE9mQmxvY2tJbkxpbmUiLCJmaXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCIsInN0YXJ0UG9zaXRpb24iLCJQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwiaXNFcXVhbCIsImluc2VydFNwYWNlcyIsIlRleHRFZGl0IiwiZGVsZXRlIiwiUmFuZ2UiLCJwcmVmaXhPZlByZXZpb3VzQmxvY2siLCJzdWJzdHJpbmciLCJzdGFydERlbGV0ZVBvc2l0aW9uIiwiZW5kRGVsZXRlUG9zaXRpb24iLCJpbnNlcnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNRSx1QkFBTixDQUE4QjtBQUMxQkMsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWNDLG9CQUFkLEVBQW9D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RkcsQ0FBUDtBQUlIO0FBQ0o7O0FBQ0QsV0FBTyxFQUFQO0FBQ0g7O0FBdkR5Qjs7QUF5RDlCcEMsT0FBTyxDQUFDSyx1QkFBUixHQUFrQ0EsdUJBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jb25zdCB2c2NvZGVfMiA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jbGFzcyBDb2RlQmxvY2tGb3JtYXRQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tSZWdFeHAsIHByZXZpb3VzQmxvY2tSZWdFeHBzLCBib3VuZGFyeVJlZ0V4cHMpIHtcbiAgICAgICAgdGhpcy5ibG9ja1JlZ0V4cCA9IGJsb2NrUmVnRXhwO1xuICAgICAgICB0aGlzLnByZXZpb3VzQmxvY2tSZWdFeHBzID0gcHJldmlvdXNCbG9ja1JlZ0V4cHM7XG4gICAgICAgIHRoaXMuYm91bmRhcnlSZWdFeHBzID0gYm91bmRhcnlSZWdFeHBzO1xuICAgIH1cbiAgICBjYW5Qcm92aWRlRWRpdHMobGluZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja1JlZ0V4cC50ZXN0KGxpbmUpO1xuICAgIH1cbiAgICBwcm92aWRlRWRpdHMoZG9jdW1lbnQsIHBvc2l0aW9uLCBjaCwgb3B0aW9ucywgbGluZSkge1xuICAgICAgICAvLyBXZSBjYW4gaGF2ZSBlbHNlIGZvciB0aGUgZm9sbG93aW5nIGJsb2NrczpcbiAgICAgICAgLy8gaWY6XG4gICAgICAgIC8vIGVsaWYgeDpcbiAgICAgICAgLy8gZm9yIHggaW4geTpcbiAgICAgICAgLy8gd2hpbGUgeDpcbiAgICAgICAgLy8gV2UgbmVlZCB0byBmaW5kIGEgYmxvY2sgc3RhdGVtZW50IHRoYXQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoaXMgc3RhdGVtZW50IGJsb2NrIChidXQgbm90IGdyZWF0ZXIpXG4gICAgICAgIGZvciAobGV0IGxpbmVOdW1iZXIgPSBwb3NpdGlvbi5saW5lIC0gMTsgbGluZU51bWJlciA+PSAwOyBsaW5lTnVtYmVyIC09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZMaW5lID0gZG9jdW1lbnQubGluZUF0KGxpbmVOdW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgcHJldkxpbmVUZXh0ID0gcHJldkxpbmUudGV4dDtcbiAgICAgICAgICAgIC8vIE9vcHMsIHdlJ3ZlIHJlYWNoZWQgYSBib3VuZGFyeSAobGlrZSB0aGUgZnVuY3Rpb24gb3IgY2xhc3MgZGVmaW5pdGlvbilcbiAgICAgICAgICAgIC8vIEdldCBvdXQgb2YgaGVyZVxuICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRhcnlSZWdFeHBzLnNvbWUodmFsdWUgPT4gdmFsdWUudGVzdChwcmV2TGluZVRleHQpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJsb2NrUmVnRXggPSB0aGlzLnByZXZpb3VzQmxvY2tSZWdFeHBzLmZpbmQodmFsdWUgPT4gdmFsdWUudGVzdChwcmV2TGluZVRleHQpKTtcbiAgICAgICAgICAgIGlmICghYmxvY2tSZWdFeCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRPZkJsb2NrSW5MaW5lID0gcHJldkxpbmUuZmlyc3ROb25XaGl0ZXNwYWNlQ2hhcmFjdGVySW5kZXg7XG4gICAgICAgICAgICBpZiAoc3RhcnRPZkJsb2NrSW5MaW5lID4gbGluZS5maXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IG5ldyB2c2NvZGVfMi5Qb3NpdGlvbihwb3NpdGlvbi5saW5lLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZFBvc2l0aW9uID0gbmV3IHZzY29kZV8yLlBvc2l0aW9uKHBvc2l0aW9uLmxpbmUsIGxpbmUuZmlyc3ROb25XaGl0ZXNwYWNlQ2hhcmFjdGVySW5kZXggLSBzdGFydE9mQmxvY2tJbkxpbmUpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0UG9zaXRpb24uaXNFcXVhbChlbmRQb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGJsb2NrIGNhbm5vdCBiZSBhdCB0aGUgc2FtZSBsZXZlbCBhcyBhIHByZWl2b3VzIGJsb2NrXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbnNlcnRTcGFjZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB2c2NvZGVfMS5UZXh0RWRpdC5kZWxldGUobmV3IHZzY29kZV8yLlJhbmdlKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uKSlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBibG9jayBhbmQgaW5zZXJ0IHRoZSBzYW1lIGNoYXJhY3RlcnMgd2UgaGF2ZSBpbiB0aGUgcHJldmlvdXMgYmxvY2tcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVmaXhPZlByZXZpb3VzQmxvY2sgPSBwcmV2TGluZVRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0T2ZCbG9ja0luTGluZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnREZWxldGVQb3NpdGlvbiA9IG5ldyB2c2NvZGVfMi5Qb3NpdGlvbihwb3NpdGlvbi5saW5lLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmREZWxldGVQb3NpdGlvbiA9IG5ldyB2c2NvZGVfMi5Qb3NpdGlvbihwb3NpdGlvbi5saW5lLCBsaW5lLmZpcnN0Tm9uV2hpdGVzcGFjZUNoYXJhY3RlckluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB2c2NvZGVfMS5UZXh0RWRpdC5kZWxldGUobmV3IHZzY29kZV8yLlJhbmdlKHN0YXJ0RGVsZXRlUG9zaXRpb24sIGVuZERlbGV0ZVBvc2l0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgIHZzY29kZV8xLlRleHRFZGl0Lmluc2VydChzdGFydERlbGV0ZVBvc2l0aW9uLCBwcmVmaXhPZlByZXZpb3VzQmxvY2spXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Db2RlQmxvY2tGb3JtYXRQcm92aWRlciA9IENvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29kZUJsb2NrRm9ybWF0UHJvdmlkZXIuanMubWFwIl19