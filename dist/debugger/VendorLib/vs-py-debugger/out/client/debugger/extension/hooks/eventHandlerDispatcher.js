// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../../../common/application/types");

const types_2 = require("../../../common/types");

const types_3 = require("./types");

let DebugSessionEventDispatcher = class DebugSessionEventDispatcher {
  constructor(eventHandlers, debugService, disposables) {
    this.eventHandlers = eventHandlers;
    this.debugService = debugService;
    this.disposables = disposables;
  }

  registerEventHandlers() {
    this.disposables.push(this.debugService.onDidReceiveDebugSessionCustomEvent(e => {
      this.eventHandlers.forEach(handler => handler.handleCustomEvent ? handler.handleCustomEvent(e).ignoreErrors() : undefined);
    }));
    this.disposables.push(this.debugService.onDidTerminateDebugSession(e => {
      this.eventHandlers.forEach(handler => handler.handleTerminateEvent ? handler.handleTerminateEvent(e).ignoreErrors() : undefined);
    }));
  }

};
DebugSessionEventDispatcher = __decorate([__param(0, inversify_1.multiInject(types_3.IDebugSessionEventHandlers)), __param(1, inversify_1.inject(types_1.IDebugService)), __param(2, inversify_1.inject(types_2.IDisposableRegistry))], DebugSessionEventDispatcher);
exports.DebugSessionEventDispatcher = DebugSessionEventDispatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50SGFuZGxlckRpc3BhdGNoZXIuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwidHlwZXNfMiIsInR5cGVzXzMiLCJEZWJ1Z1Nlc3Npb25FdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsImV2ZW50SGFuZGxlcnMiLCJkZWJ1Z1NlcnZpY2UiLCJkaXNwb3NhYmxlcyIsInJlZ2lzdGVyRXZlbnRIYW5kbGVycyIsInB1c2giLCJvbkRpZFJlY2VpdmVEZWJ1Z1Nlc3Npb25DdXN0b21FdmVudCIsImUiLCJmb3JFYWNoIiwiaGFuZGxlciIsImhhbmRsZUN1c3RvbUV2ZW50IiwiaWdub3JlRXJyb3JzIiwidW5kZWZpbmVkIiwib25EaWRUZXJtaW5hdGVEZWJ1Z1Nlc3Npb24iLCJoYW5kbGVUZXJtaW5hdGVFdmVudCIsIm11bHRpSW5qZWN0IiwiSURlYnVnU2Vzc2lvbkV2ZW50SGFuZGxlcnMiLCJpbmplY3QiLCJJRGVidWdTZXJ2aWNlIiwiSURpc3Bvc2FibGVSZWdpc3RyeSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcs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LENBQUNLLG9CQUFSLEdBQStCTCxPQUFPLENBQUNLLG9CQUFSLENBQTZCUCxDQUE3QixFQUFnQ0ksWUFBaEMsRUFBL0IsR0FBZ0ZDLFNBQXRIO0FBQ0gsS0FGcUIsQ0FBdEI7QUFHSDs7QUFiK0QsQ0FBcEU7QUFlQWIsMkJBQTJCLEdBQUcxQixVQUFVLENBQUMsQ0FDckNnQixPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNxQixXQUFaLENBQXdCakIsT0FBTyxDQUFDa0IsMEJBQWhDLENBQUosQ0FEOEIsRUFFckMzQixPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUN1QixNQUFaLENBQW1CckIsT0FBTyxDQUFDc0IsYUFBM0IsQ0FBSixDQUY4QixFQUdyQzdCLE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQ3VCLE1BQVosQ0FBbUJwQixPQUFPLENBQUNzQixtQkFBM0IsQ0FBSixDQUg4QixDQUFELEVBSXJDcEIsMkJBSnFDLENBQXhDO0FBS0FQLE9BQU8sQ0FBQ08sMkJBQVIsR0FBc0NBLDJCQUF0QyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9hcHBsaWNhdGlvbi90eXBlc1wiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgdHlwZXNfMyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xubGV0IERlYnVnU2Vzc2lvbkV2ZW50RGlzcGF0Y2hlciA9IGNsYXNzIERlYnVnU2Vzc2lvbkV2ZW50RGlzcGF0Y2hlciB7XG4gICAgY29uc3RydWN0b3IoZXZlbnRIYW5kbGVycywgZGVidWdTZXJ2aWNlLCBkaXNwb3NhYmxlcykge1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBldmVudEhhbmRsZXJzO1xuICAgICAgICB0aGlzLmRlYnVnU2VydmljZSA9IGRlYnVnU2VydmljZTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IGRpc3Bvc2FibGVzO1xuICAgIH1cbiAgICByZWdpc3RlckV2ZW50SGFuZGxlcnMoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMucHVzaCh0aGlzLmRlYnVnU2VydmljZS5vbkRpZFJlY2VpdmVEZWJ1Z1Nlc3Npb25DdXN0b21FdmVudChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlci5oYW5kbGVDdXN0b21FdmVudCA/IGhhbmRsZXIuaGFuZGxlQ3VzdG9tRXZlbnQoZSkuaWdub3JlRXJyb3JzKCkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMucHVzaCh0aGlzLmRlYnVnU2VydmljZS5vbkRpZFRlcm1pbmF0ZURlYnVnU2Vzc2lvbihlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlci5oYW5kbGVUZXJtaW5hdGVFdmVudCA/IGhhbmRsZXIuaGFuZGxlVGVybWluYXRlRXZlbnQoZSkuaWdub3JlRXJyb3JzKCkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9KSk7XG4gICAgfVxufTtcbkRlYnVnU2Vzc2lvbkV2ZW50RGlzcGF0Y2hlciA9IF9fZGVjb3JhdGUoW1xuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEubXVsdGlJbmplY3QodHlwZXNfMy5JRGVidWdTZXNzaW9uRXZlbnRIYW5kbGVycykpLFxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSURlYnVnU2VydmljZSkpLFxuICAgIF9fcGFyYW0oMiwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSURpc3Bvc2FibGVSZWdpc3RyeSkpXG5dLCBEZWJ1Z1Nlc3Npb25FdmVudERpc3BhdGNoZXIpO1xuZXhwb3J0cy5EZWJ1Z1Nlc3Npb25FdmVudERpc3BhdGNoZXIgPSBEZWJ1Z1Nlc3Npb25FdmVudERpc3BhdGNoZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudEhhbmRsZXJEaXNwYXRjaGVyLmpzLm1hcCJdfQ==