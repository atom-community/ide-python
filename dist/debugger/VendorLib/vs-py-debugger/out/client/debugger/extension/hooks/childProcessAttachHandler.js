// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const decorators_1 = require("../../../common/utils/decorators");

const constants_1 = require("./constants");

const types_1 = require("./types");
/**
 * This class is responsible for automatically attaching the debugger to any
 * child processes launched. I.e. this is the classs responsible for multi-proc debugging.
 * @export
 * @class ChildProcessAttachEventHandler
 * @implements {IDebugSessionEventHandlers}
 */


let ChildProcessAttachEventHandler = class ChildProcessAttachEventHandler {
  constructor(childProcessAttachService) {
    this.childProcessAttachService = childProcessAttachService;
  }

  handleCustomEvent(event) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!event || event.event !== constants_1.PTVSDEvents.ChildProcessLaunched) {
        return;
      }

      const data = event.body;
      yield this.childProcessAttachService.attach(data);
    });
  }

};

__decorate([decorators_1.swallowExceptions('Handle child process launch')], ChildProcessAttachEventHandler.prototype, "handleCustomEvent", null);

ChildProcessAttachEventHandler = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IChildProcessAttachService))], ChildProcessAttachEventHandler);
exports.ChildProcessAttachEventHandler = ChildProcessAttachEventHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,