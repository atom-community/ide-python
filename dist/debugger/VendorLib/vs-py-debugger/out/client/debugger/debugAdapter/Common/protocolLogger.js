"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

let ProtocolLogger = class ProtocolLogger {
  constructor() {
    this.messagesToLog = [];

    this.fromDataCallbackHandler = data => {
      this.logMessages(['From Client:', data.toString('utf8')]);
    };

    this.toDataCallbackHandler = data => {
      this.logMessages(['To Client:', data.toString('utf8')]);
    };
  }

  dispose() {
    if (this.inputStream) {
      this.inputStream.removeListener('data', this.fromDataCallbackHandler);
      this.outputStream.removeListener('data', this.toDataCallbackHandler);
      this.messagesToLog = [];
      this.inputStream = undefined;
      this.outputStream = undefined;
    }
  }

  connect(inputStream, outputStream) {
    this.inputStream = inputStream;
    this.outputStream = outputStream;
    inputStream.addListener('data', this.fromDataCallbackHandler);
    outputStream.addListener('data', this.toDataCallbackHandler);
  }

  setup(logger) {
    this.logger = logger;
    this.logMessages([`Started @ ${new Date().toString()}`]);
    this.logMessages(this.messagesToLog);
    this.messagesToLog = [];
  }

  logMessages(messages) {
    if (this.logger) {
      messages.forEach(message => this.logger.verbose(`${message}`));
    } else {
      this.messagesToLog.push(...messages);
    }
  }

};
ProtocolLogger = __decorate([inversify_1.injectable()], ProtocolLogger);
exports.ProtocolLogger = ProtocolLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvY29sTG9nZ2VyLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsIlByb3RvY29sTG9nZ2VyIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlc1RvTG9nIiwiZnJvbURhdGFDYWxsYmFja0hhbmRsZXIiLCJkYXRhIiwibG9nTWVzc2FnZXMiLCJ0b1N0cmluZyIsInRvRGF0YUNhbGxiYWNrSGFuZGxlciIsImRpc3Bvc2UiLCJpbnB1dFN0cmVhbSIsInJlbW92ZUxpc3RlbmVyIiwib3V0cHV0U3RyZWFtIiwidW5kZWZpbmVkIiwiY29ubmVjdCIsImFkZExpc3RlbmVyIiwic2V0dXAiLCJsb2dnZXIiLCJEYXRlIiwibWVzc2FnZXMiLCJmb3JFYWNoIiwibWVzc2FnZSIsInZlcmJvc2UiLCJwdXNoIiwiaW5qZWN0YWJsZSJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7QUFBQSxNQUEySE8sQ0FBM0g7QUFDQSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0EsT0FBTyxDQUFDQyxRQUFmLEtBQTRCLFVBQS9ELEVBQTJFTCxDQUFDLEdBQUdJLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQlosVUFBakIsRUFBNkJDLE1BQTdCLEVBQXFDQyxHQUFyQyxFQUEwQ0MsSUFBMUMsQ0FBSixDQUEzRSxLQUNLLEtBQUssSUFBSVUsQ0FBQyxHQUFHYixVQUFVLENBQUNNLE1BQVgsR0FBb0IsQ0FBakMsRUFBb0NPLENBQUMsSUFBSSxDQUF6QyxFQUE0Q0EsQ0FBQyxFQUE3QyxFQUFpRCxJQUFJSCxDQUFDLEdBQUdWLFVBQVUsQ0FBQ2EsQ0FBRCxDQUFsQixFQUF1Qk4sQ0FBQyxHQUFHLENBQUNILENBQUMsR0FBRyxDQUFKLEdBQVFNLENBQUMsQ0FBQ0gsQ0FBRCxDQUFULEdBQWVILENBQUMsR0FBRyxDQUFKLEdBQVFNLENBQUMsQ0FBQ1QsTUFBRCxFQUFTQyxHQUFULEVBQWNLLENBQWQsQ0FBVCxHQUE0QkcsQ0FBQyxDQUFDVCxNQUFELEVBQVNDLEdBQVQsQ0FBN0MsS0FBK0RLLENBQW5FO0FBQzdFLFNBQU9ILENBQUMsR0FBRyxDQUFKLElBQVNHLENBQVQsSUFBY0MsTUFBTSxDQUFDTSxjQUFQLENBQXNCYixNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNLLENBQW5DLENBQWQsRUFBcURBLENBQTVEO0FBQ0gsQ0FMRDs7QUFNQUMsTUFBTSxDQUFDTSxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQTNCOztBQUNBLElBQUlDLGNBQWMsR0FBRyxNQUFNQSxjQUFOLENBQXFCO0FBQ3RDQyxFQUFBQSxXQUFXLEdBQUc7QUFDVixTQUFLQyxhQUFMLEdBQXFCLEVBQXJCOztBQUNBLFNBQUtDLHVCQUFMLEdBQWdDQyxJQUFELElBQVU7QUFDckMsV0FBS0MsV0FBTCxDQUFpQixDQUFDLGNBQUQsRUFBaUJELElBQUksQ0FBQ0UsUUFBTCxDQUFjLE1BQWQsQ0FBakIsQ0FBakI7QUFDSCxLQUZEOztBQUdBLFNBQUtDLHFCQUFMLEdBQThCSCxJQUFELElBQVU7QUFDbkMsV0FBS0MsV0FBTCxDQUFpQixDQUFDLFlBQUQsRUFBZUQsSUFBSSxDQUFDRSxRQUFMLENBQWMsTUFBZCxDQUFmLENBQWpCO0FBQ0gsS0FGRDtBQUdIOztBQUNERSxFQUFBQSxPQUFPLEdBQUc7QUFDTixRQUFJLEtBQUtDLFdBQVQsRUFBc0I7QUFDbEIsV0FBS0EsV0FBTCxDQUFpQkMsY0FBakIsQ0FBZ0MsTUFBaEMsRUFBd0MsS0FBS1AsdUJBQTdDO0FBQ0EsV0FBS1EsWUFBTCxDQUFrQkQsY0FBbEIsQ0FBaUMsTUFBakMsRUFBeUMsS0FBS0gscUJBQTlDO0FBQ0EsV0FBS0wsYUFBTCxHQUFxQixFQUFyQjtBQUNBLFdBQUtPLFdBQUwsR0FBbUJHLFNBQW5CO0FBQ0EsV0FBS0QsWUFBTCxHQUFvQkMsU0FBcEI7QUFDSDtBQUNKOztBQUNEQyxFQUFBQSxPQUFPLENBQUNKLFdBQUQsRUFBY0UsWUFBZCxFQUE0QjtBQUMvQixTQUFLRixXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtFLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0FGLElBQUFBLFdBQVcsQ0FBQ0ssV0FBWixDQUF3QixNQUF4QixFQUFnQyxLQUFLWCx1QkFBckM7QUFDQVEsSUFBQUEsWUFBWSxDQUFDRyxXQUFiLENBQXlCLE1BQXpCLEVBQWlDLEtBQUtQLHFCQUF0QztBQUNIOztBQUNEUSxFQUFBQSxLQUFLLENBQUNDLE1BQUQsRUFBUztBQUNWLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtYLFdBQUwsQ0FBaUIsQ0FBRSxhQUFZLElBQUlZLElBQUosR0FBV1gsUUFBWCxFQUFzQixFQUFwQyxDQUFqQjtBQUNBLFNBQUtELFdBQUwsQ0FBaUIsS0FBS0gsYUFBdEI7QUFDQSxTQUFLQSxhQUFMLEdBQXFCLEVBQXJCO0FBQ0g7O0FBQ0RHLEVBQUFBLFdBQVcsQ0FBQ2EsUUFBRCxFQUFXO0FBQ2xCLFFBQUksS0FBS0YsTUFBVCxFQUFpQjtBQUNiRSxNQUFBQSxRQUFRLENBQUNDLE9BQVQsQ0FBaUJDLE9BQU8sSUFBSSxLQUFLSixNQUFMLENBQVlLLE9BQVosQ0FBcUIsR0FBRUQsT0FBUSxFQUEvQixDQUE1QjtBQUNILEtBRkQsTUFHSztBQUNELFdBQUtsQixhQUFMLENBQW1Cb0IsSUFBbkIsQ0FBd0IsR0FBR0osUUFBM0I7QUFDSDtBQUNKOztBQXRDcUMsQ0FBMUM7QUF3Q0FsQixjQUFjLEdBQUdwQixVQUFVLENBQUMsQ0FDeEJrQixXQUFXLENBQUN5QixVQUFaLEVBRHdCLENBQUQsRUFFeEJ2QixjQUZ3QixDQUEzQjtBQUdBSixPQUFPLENBQUNJLGNBQVIsR0FBeUJBLGNBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmxldCBQcm90b2NvbExvZ2dlciA9IGNsYXNzIFByb3RvY29sTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlc1RvTG9nID0gW107XG4gICAgICAgIHRoaXMuZnJvbURhdGFDYWxsYmFja0hhbmRsZXIgPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dNZXNzYWdlcyhbJ0Zyb20gQ2xpZW50OicsIGRhdGEudG9TdHJpbmcoJ3V0ZjgnKV0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRvRGF0YUNhbGxiYWNrSGFuZGxlciA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ01lc3NhZ2VzKFsnVG8gQ2xpZW50OicsIGRhdGEudG9TdHJpbmcoJ3V0ZjgnKV0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5pbnB1dFN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIHRoaXMuZnJvbURhdGFDYWxsYmFja0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCB0aGlzLnRvRGF0YUNhbGxiYWNrSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzVG9Mb2cgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRTdHJlYW0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLm91dHB1dFN0cmVhbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0KGlucHV0U3RyZWFtLCBvdXRwdXRTdHJlYW0pIHtcbiAgICAgICAgdGhpcy5pbnB1dFN0cmVhbSA9IGlucHV0U3RyZWFtO1xuICAgICAgICB0aGlzLm91dHB1dFN0cmVhbSA9IG91dHB1dFN0cmVhbTtcbiAgICAgICAgaW5wdXRTdHJlYW0uYWRkTGlzdGVuZXIoJ2RhdGEnLCB0aGlzLmZyb21EYXRhQ2FsbGJhY2tIYW5kbGVyKTtcbiAgICAgICAgb3V0cHV0U3RyZWFtLmFkZExpc3RlbmVyKCdkYXRhJywgdGhpcy50b0RhdGFDYWxsYmFja0hhbmRsZXIpO1xuICAgIH1cbiAgICBzZXR1cChsb2dnZXIpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIHRoaXMubG9nTWVzc2FnZXMoW2BTdGFydGVkIEAgJHtuZXcgRGF0ZSgpLnRvU3RyaW5nKCl9YF0pO1xuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VzKHRoaXMubWVzc2FnZXNUb0xvZyk7XG4gICAgICAgIHRoaXMubWVzc2FnZXNUb0xvZyA9IFtdO1xuICAgIH1cbiAgICBsb2dNZXNzYWdlcyhtZXNzYWdlcykge1xuICAgICAgICBpZiAodGhpcy5sb2dnZXIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobWVzc2FnZSA9PiB0aGlzLmxvZ2dlci52ZXJib3NlKGAke21lc3NhZ2V9YCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc1RvTG9nLnB1c2goLi4ubWVzc2FnZXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblByb3RvY29sTG9nZ2VyID0gX19kZWNvcmF0ZShbXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpXG5dLCBQcm90b2NvbExvZ2dlcik7XG5leHBvcnRzLlByb3RvY29sTG9nZ2VyID0gUHJvdG9jb2xMb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm90b2NvbExvZ2dlci5qcy5tYXAiXX0=