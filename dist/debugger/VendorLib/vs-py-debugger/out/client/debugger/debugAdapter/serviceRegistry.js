// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const socketServer_1 = require("../../common/net/socket/socketServer");

const fileSystem_1 = require("../../common/platform/fileSystem");

const platformService_1 = require("../../common/platform/platformService");

const types_1 = require("../../common/platform/types");

const currentProcess_1 = require("../../common/process/currentProcess");

const decoder_1 = require("../../common/process/decoder");

const types_2 = require("../../common/process/types");

const types_3 = require("../../common/types");

const container_1 = require("../../ioc/container");

const serviceManager_1 = require("../../ioc/serviceManager");

const types_4 = require("../../ioc/types");

const debugStreamProvider_1 = require("./Common/debugStreamProvider");

const processServiceFactory_1 = require("./Common/processServiceFactory");

const protocolLogger_1 = require("./Common/protocolLogger");

const protocolParser_1 = require("./Common/protocolParser");

const protocolWriter_1 = require("./Common/protocolWriter");

const types_5 = require("./types");

function initializeIoc() {
  const cont = new inversify_1.Container();
  const serviceManager = new serviceManager_1.ServiceManager(cont);
  const serviceContainer = new container_1.ServiceContainer(cont);
  serviceManager.addSingletonInstance(types_4.IServiceContainer, serviceContainer);
  registerTypes(serviceManager);
  return serviceContainer;
}

exports.initializeIoc = initializeIoc;

function registerTypes(serviceManager) {
  serviceManager.addSingleton(types_3.ICurrentProcess, currentProcess_1.CurrentProcess);
  serviceManager.addSingleton(types_5.IDebugStreamProvider, debugStreamProvider_1.DebugStreamProvider);
  serviceManager.addSingleton(types_5.IProtocolLogger, protocolLogger_1.ProtocolLogger);
  serviceManager.add(types_5.IProtocolParser, protocolParser_1.ProtocolParser);
  serviceManager.addSingleton(types_1.IFileSystem, fileSystem_1.FileSystem);
  serviceManager.addSingleton(types_1.IPlatformService, platformService_1.PlatformService);
  serviceManager.addSingleton(types_3.ISocketServer, socketServer_1.SocketServer);
  serviceManager.addSingleton(types_5.IProtocolMessageWriter, protocolWriter_1.ProtocolMessageWriter);
  serviceManager.addSingleton(types_2.IBufferDecoder, decoder_1.BufferDecoder);
  serviceManager.addSingleton(types_2.IProcessServiceFactory, processServiceFactory_1.DebuggerProcessServiceFactory);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VSZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInNvY2tldFNlcnZlcl8xIiwiZmlsZVN5c3RlbV8xIiwicGxhdGZvcm1TZXJ2aWNlXzEiLCJ0eXBlc18xIiwiY3VycmVudFByb2Nlc3NfMSIsImRlY29kZXJfMSIsInR5cGVzXzIiLCJ0eXBlc18zIiwiY29udGFpbmVyXzEiLCJzZXJ2aWNlTWFuYWdlcl8xIiwidHlwZXNfNCIsImRlYnVnU3RyZWFtUHJvdmlkZXJfMSIsInByb2Nlc3NTZXJ2aWNlRmFjdG9yeV8xIiwicHJvdG9jb2xMb2dnZXJfMSIsInByb3RvY29sUGFyc2VyXzEiLCJwcm90b2NvbFdyaXRlcl8xIiwidHlwZXNfNSIsImluaXRpYWxpemVJb2MiLCJjb250IiwiQ29udGFpbmVyIiwic2VydmljZU1hbmFnZXIiLCJTZXJ2aWNlTWFuYWdlciIsInNlcnZpY2VDb250YWluZXIiLCJTZXJ2aWNlQ29udGFpbmVyIiwiYWRkU2luZ2xldG9uSW5zdGFuY2UiLCJJU2VydmljZUNvbnRhaW5lciIsInJlZ2lzdGVyVHlwZXMiLCJhZGRTaW5nbGV0b24iLCJJQ3VycmVudFByb2Nlc3MiLCJDdXJyZW50UHJvY2VzcyIsIklEZWJ1Z1N0cmVhbVByb3ZpZGVyIiwiRGVidWdTdHJlYW1Qcm92aWRlciIsIklQcm90b2NvbExvZ2dlciIsIlByb3RvY29sTG9nZ2VyIiwiYWRkIiwiSVByb3RvY29sUGFyc2VyIiwiUHJvdG9jb2xQYXJzZXIiLCJJRmlsZVN5c3RlbSIsIkZpbGVTeXN0ZW0iLCJJUGxhdGZvcm1TZXJ2aWNlIiwiUGxhdGZvcm1TZXJ2aWNlIiwiSVNvY2tldFNlcnZlciIsIlNvY2tldFNlcnZlciIsIklQcm90b2NvbE1lc3NhZ2VXcml0ZXIiLCJQcm90b2NvbE1lc3NhZ2VXcml0ZXIiLCJJQnVmZmVyRGVjb2RlciIsIkJ1ZmZlckRlY29kZXIiLCJJUHJvY2Vzc1NlcnZpY2VGYWN0b3J5IiwiRGVidWdnZXJQcm9jZXNzU2VydmljZUZhY3RvcnkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQTNCOztBQUNBLE1BQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLHNDQUFELENBQTlCOztBQUNBLE1BQU1FLFlBQVksR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTVCOztBQUNBLE1BQU1HLGlCQUFpQixHQUFHSCxPQUFPLENBQUMsdUNBQUQsQ0FBakM7O0FBQ0EsTUFBTUksT0FBTyxHQUFHSixPQUFPLENBQUMsNkJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUssZ0JBQWdCLEdBQUdMLE9BQU8sQ0FBQyxxQ0FBRCxDQUFoQzs7QUFDQSxNQUFNTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyw4QkFBRCxDQUF6Qjs7QUFDQSxNQUFNTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyw0QkFBRCxDQUF2Qjs7QUFDQSxNQUFNUSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxvQkFBRCxDQUF2Qjs7QUFDQSxNQUFNUyxXQUFXLEdBQUdULE9BQU8sQ0FBQyxxQkFBRCxDQUEzQjs7QUFDQSxNQUFNVSxnQkFBZ0IsR0FBR1YsT0FBTyxDQUFDLDBCQUFELENBQWhDOztBQUNBLE1BQU1XLE9BQU8sR0FBR1gsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU1ZLHFCQUFxQixHQUFHWixPQUFPLENBQUMsOEJBQUQsQ0FBckM7O0FBQ0EsTUFBTWEsdUJBQXVCLEdBQUdiLE9BQU8sQ0FBQyxnQ0FBRCxDQUF2Qzs7QUFDQSxNQUFNYyxnQkFBZ0IsR0FBR2QsT0FBTyxDQUFDLHlCQUFELENBQWhDOztBQUNBLE1BQU1lLGdCQUFnQixHQUFHZixPQUFPLENBQUMseUJBQUQsQ0FBaEM7O0FBQ0EsTUFBTWdCLGdCQUFnQixHQUFHaEIsT0FBTyxDQUFDLHlCQUFELENBQWhDOztBQUNBLE1BQU1pQixPQUFPLEdBQUdqQixPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxTQUFTa0IsYUFBVCxHQUF5QjtBQUNyQixRQUFNQyxJQUFJLEdBQUcsSUFBSXBCLFdBQVcsQ0FBQ3FCLFNBQWhCLEVBQWI7QUFDQSxRQUFNQyxjQUFjLEdBQUcsSUFBSVgsZ0JBQWdCLENBQUNZLGNBQXJCLENBQW9DSCxJQUFwQyxDQUF2QjtBQUNBLFFBQU1JLGdCQUFnQixHQUFHLElBQUlkLFdBQVcsQ0FBQ2UsZ0JBQWhCLENBQWlDTCxJQUFqQyxDQUF6QjtBQUNBRSxFQUFBQSxjQUFjLENBQUNJLG9CQUFmLENBQW9DZCxPQUFPLENBQUNlLGlCQUE1QyxFQUErREgsZ0JBQS9EO0FBQ0FJLEVBQUFBLGFBQWEsQ0FBQ04sY0FBRCxDQUFiO0FBQ0EsU0FBT0UsZ0JBQVA7QUFDSDs7QUFDRDFCLE9BQU8sQ0FBQ3FCLGFBQVIsR0FBd0JBLGFBQXhCOztBQUNBLFNBQVNTLGFBQVQsQ0FBdUJOLGNBQXZCLEVBQXVDO0FBQ25DQSxFQUFBQSxjQUFjLENBQUNPLFlBQWYsQ0FBNEJwQixPQUFPLENBQUNxQixlQUFwQyxFQUFxRHhCLGdCQUFnQixDQUFDeUIsY0FBdEU7QUFDQVQsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCWCxPQUFPLENBQUNjLG9CQUFwQyxFQUEwRG5CLHFCQUFxQixDQUFDb0IsbUJBQWhGO0FBQ0FYLEVBQUFBLGNBQWMsQ0FBQ08sWUFBZixDQUE0QlgsT0FBTyxDQUFDZ0IsZUFBcEMsRUFBcURuQixnQkFBZ0IsQ0FBQ29CLGNBQXRFO0FBQ0FiLEVBQUFBLGNBQWMsQ0FBQ2MsR0FBZixDQUFtQmxCLE9BQU8sQ0FBQ21CLGVBQTNCLEVBQTRDckIsZ0JBQWdCLENBQUNzQixjQUE3RDtBQUNBaEIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCeEIsT0FBTyxDQUFDa0MsV0FBcEMsRUFBaURwQyxZQUFZLENBQUNxQyxVQUE5RDtBQUNBbEIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCeEIsT0FBTyxDQUFDb0MsZ0JBQXBDLEVBQXNEckMsaUJBQWlCLENBQUNzQyxlQUF4RTtBQUNBcEIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCcEIsT0FBTyxDQUFDa0MsYUFBcEMsRUFBbUR6QyxjQUFjLENBQUMwQyxZQUFsRTtBQUNBdEIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCWCxPQUFPLENBQUMyQixzQkFBcEMsRUFBNEQ1QixnQkFBZ0IsQ0FBQzZCLHFCQUE3RTtBQUNBeEIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCckIsT0FBTyxDQUFDdUMsY0FBcEMsRUFBb0R4QyxTQUFTLENBQUN5QyxhQUE5RDtBQUNBMUIsRUFBQUEsY0FBYyxDQUFDTyxZQUFmLENBQTRCckIsT0FBTyxDQUFDeUMsc0JBQXBDLEVBQTREbkMsdUJBQXVCLENBQUNvQyw2QkFBcEY7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xuY29uc3Qgc29ja2V0U2VydmVyXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL25ldC9zb2NrZXQvc29ja2V0U2VydmVyXCIpO1xuY29uc3QgZmlsZVN5c3RlbV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9wbGF0Zm9ybS9maWxlU3lzdGVtXCIpO1xuY29uc3QgcGxhdGZvcm1TZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3BsYXRmb3JtL3BsYXRmb3JtU2VydmljZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3BsYXRmb3JtL3R5cGVzXCIpO1xuY29uc3QgY3VycmVudFByb2Nlc3NfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vcHJvY2Vzcy9jdXJyZW50UHJvY2Vzc1wiKTtcbmNvbnN0IGRlY29kZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vcHJvY2Vzcy9kZWNvZGVyXCIpO1xuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vcHJvY2Vzcy90eXBlc1wiKTtcbmNvbnN0IHR5cGVzXzMgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgY29udGFpbmVyXzEgPSByZXF1aXJlKFwiLi4vLi4vaW9jL2NvbnRhaW5lclwiKTtcbmNvbnN0IHNlcnZpY2VNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vaW9jL3NlcnZpY2VNYW5hZ2VyXCIpO1xuY29uc3QgdHlwZXNfNCA9IHJlcXVpcmUoXCIuLi8uLi9pb2MvdHlwZXNcIik7XG5jb25zdCBkZWJ1Z1N0cmVhbVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9Db21tb24vZGVidWdTdHJlYW1Qcm92aWRlclwiKTtcbmNvbnN0IHByb2Nlc3NTZXJ2aWNlRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vQ29tbW9uL3Byb2Nlc3NTZXJ2aWNlRmFjdG9yeVwiKTtcbmNvbnN0IHByb3RvY29sTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9Db21tb24vcHJvdG9jb2xMb2dnZXJcIik7XG5jb25zdCBwcm90b2NvbFBhcnNlcl8xID0gcmVxdWlyZShcIi4vQ29tbW9uL3Byb3RvY29sUGFyc2VyXCIpO1xuY29uc3QgcHJvdG9jb2xXcml0ZXJfMSA9IHJlcXVpcmUoXCIuL0NvbW1vbi9wcm90b2NvbFdyaXRlclwiKTtcbmNvbnN0IHR5cGVzXzUgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGluaXRpYWxpemVJb2MoKSB7XG4gICAgY29uc3QgY29udCA9IG5ldyBpbnZlcnNpZnlfMS5Db250YWluZXIoKTtcbiAgICBjb25zdCBzZXJ2aWNlTWFuYWdlciA9IG5ldyBzZXJ2aWNlTWFuYWdlcl8xLlNlcnZpY2VNYW5hZ2VyKGNvbnQpO1xuICAgIGNvbnN0IHNlcnZpY2VDb250YWluZXIgPSBuZXcgY29udGFpbmVyXzEuU2VydmljZUNvbnRhaW5lcihjb250KTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b25JbnN0YW5jZSh0eXBlc180LklTZXJ2aWNlQ29udGFpbmVyLCBzZXJ2aWNlQ29udGFpbmVyKTtcbiAgICByZWdpc3RlclR5cGVzKHNlcnZpY2VNYW5hZ2VyKTtcbiAgICByZXR1cm4gc2VydmljZUNvbnRhaW5lcjtcbn1cbmV4cG9ydHMuaW5pdGlhbGl6ZUlvYyA9IGluaXRpYWxpemVJb2M7XG5mdW5jdGlvbiByZWdpc3RlclR5cGVzKHNlcnZpY2VNYW5hZ2VyKSB7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkU2luZ2xldG9uKHR5cGVzXzMuSUN1cnJlbnRQcm9jZXNzLCBjdXJyZW50UHJvY2Vzc18xLkN1cnJlbnRQcm9jZXNzKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfNS5JRGVidWdTdHJlYW1Qcm92aWRlciwgZGVidWdTdHJlYW1Qcm92aWRlcl8xLkRlYnVnU3RyZWFtUHJvdmlkZXIpO1xuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc181LklQcm90b2NvbExvZ2dlciwgcHJvdG9jb2xMb2dnZXJfMS5Qcm90b2NvbExvZ2dlcik7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzUuSVByb3RvY29sUGFyc2VyLCBwcm90b2NvbFBhcnNlcl8xLlByb3RvY29sUGFyc2VyKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JRmlsZVN5c3RlbSwgZmlsZVN5c3RlbV8xLkZpbGVTeXN0ZW0pO1xuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc18xLklQbGF0Zm9ybVNlcnZpY2UsIHBsYXRmb3JtU2VydmljZV8xLlBsYXRmb3JtU2VydmljZSk7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkU2luZ2xldG9uKHR5cGVzXzMuSVNvY2tldFNlcnZlciwgc29ja2V0U2VydmVyXzEuU29ja2V0U2VydmVyKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfNS5JUHJvdG9jb2xNZXNzYWdlV3JpdGVyLCBwcm90b2NvbFdyaXRlcl8xLlByb3RvY29sTWVzc2FnZVdyaXRlcik7XG4gICAgc2VydmljZU1hbmFnZXIuYWRkU2luZ2xldG9uKHR5cGVzXzIuSUJ1ZmZlckRlY29kZXIsIGRlY29kZXJfMS5CdWZmZXJEZWNvZGVyKTtcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMi5JUHJvY2Vzc1NlcnZpY2VGYWN0b3J5LCBwcm9jZXNzU2VydmljZUZhY3RvcnlfMS5EZWJ1Z2dlclByb2Nlc3NTZXJ2aWNlRmFjdG9yeSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlUmVnaXN0cnkuanMubWFwIl19