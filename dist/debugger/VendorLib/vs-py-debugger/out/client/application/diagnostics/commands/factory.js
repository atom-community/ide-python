// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../../../ioc/types");

const execVSCCommand_1 = require("./execVSCCommand");

const ignore_1 = require("./ignore");

const launchBrowser_1 = require("./launchBrowser");

let DiagnosticsCommandFactory = class DiagnosticsCommandFactory {
  constructor(serviceContainer) {
    this.serviceContainer = serviceContainer;
  }

  createCommand(diagnostic, options) {
    const commandType = options.type;

    switch (options.type) {
      case 'ignore':
        {
          return new ignore_1.IgnoreDiagnosticCommand(diagnostic, this.serviceContainer, options.options);
        }

      case 'launch':
        {
          return new launchBrowser_1.LaunchBrowserCommand(diagnostic, this.serviceContainer, options.options);
        }

      case 'executeVSCCommand':
        {
          return new execVSCCommand_1.ExecuteVSCCommand(diagnostic, this.serviceContainer, options.options);
        }

      default:
        {
          throw new Error(`Unknown Diagnostic command commandType '${commandType}'`);
        }
    }
  }

};
DiagnosticsCommandFactory = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IServiceContainer))], DiagnosticsCommandFactory);
exports.DiagnosticsCommandFactory = DiagnosticsCommandFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY3RvcnkuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwiZXhlY1ZTQ0NvbW1hbmRfMSIsImlnbm9yZV8xIiwibGF1bmNoQnJvd3Nlcl8xIiwiRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSIsImNvbnN0cnVjdG9yIiwic2VydmljZUNvbnRhaW5lciIsImNyZWF0ZUNvbW1hbmQiLCJkaWFnbm9zdGljIiwib3B0aW9ucyIsImNvbW1hbmRUeXBlIiwidHlwZSIsIklnbm9yZURpYWdub3N0aWNDb21tYW5kIiwiTGF1bmNoQnJvd3NlckNvbW1hbmQiLCJFeGVjdXRlVlNDQ29tbWFuZCIsIkVycm9yIiwiaW5qZWN0YWJsZSIsImluamVjdCIsIklTZXJ2aWNlQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7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R0FBakUsQ0FBTjtBQUNIO0FBWkw7QUFjSDs7QUFwQjJELENBQWhFO0FBc0JBTix5QkFBeUIsR0FBRzNCLFVBQVUsQ0FBQyxDQUNuQ3FCLFdBQVcsQ0FBQ2tCLFVBQVosRUFEbUMsRUFFbkN2QixPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNtQixNQUFaLENBQW1CakIsT0FBTyxDQUFDa0IsaUJBQTNCLENBQUosQ0FGNEIsQ0FBRCxFQUduQ2QseUJBSG1DLENBQXRDO0FBSUFSLE9BQU8sQ0FBQ1EseUJBQVIsR0FBb0NBLHlCQUFwQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2lvYy90eXBlc1wiKTtcbmNvbnN0IGV4ZWNWU0NDb21tYW5kXzEgPSByZXF1aXJlKFwiLi9leGVjVlNDQ29tbWFuZFwiKTtcbmNvbnN0IGlnbm9yZV8xID0gcmVxdWlyZShcIi4vaWdub3JlXCIpO1xuY29uc3QgbGF1bmNoQnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vbGF1bmNoQnJvd3NlclwiKTtcbmxldCBEaWFnbm9zdGljc0NvbW1hbmRGYWN0b3J5ID0gY2xhc3MgRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZUNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnNlcnZpY2VDb250YWluZXIgPSBzZXJ2aWNlQ29udGFpbmVyO1xuICAgIH1cbiAgICBjcmVhdGVDb21tYW5kKGRpYWdub3N0aWMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZFR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdpZ25vcmUnOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBpZ25vcmVfMS5JZ25vcmVEaWFnbm9zdGljQ29tbWFuZChkaWFnbm9zdGljLCB0aGlzLnNlcnZpY2VDb250YWluZXIsIG9wdGlvbnMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdsYXVuY2gnOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBsYXVuY2hCcm93c2VyXzEuTGF1bmNoQnJvd3NlckNvbW1hbmQoZGlhZ25vc3RpYywgdGhpcy5zZXJ2aWNlQ29udGFpbmVyLCBvcHRpb25zLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZXhlY3V0ZVZTQ0NvbW1hbmQnOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBleGVjVlNDQ29tbWFuZF8xLkV4ZWN1dGVWU0NDb21tYW5kKGRpYWdub3N0aWMsIHRoaXMuc2VydmljZUNvbnRhaW5lciwgb3B0aW9ucy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gRGlhZ25vc3RpYyBjb21tYW5kIGNvbW1hbmRUeXBlICcke2NvbW1hbmRUeXBlfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5EaWFnbm9zdGljc0NvbW1hbmRGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSVNlcnZpY2VDb250YWluZXIpKVxuXSwgRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSk7XG5leHBvcnRzLkRpYWdub3N0aWNzQ29tbWFuZEZhY3RvcnkgPSBEaWFnbm9zdGljc0NvbW1hbmRGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFjdG9yeS5qcy5tYXAiXX0=