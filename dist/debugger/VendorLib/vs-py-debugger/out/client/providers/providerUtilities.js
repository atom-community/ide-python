"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const tokenizer_1 = require("../language/tokenizer");

const types_1 = require("../language/types");

function getDocumentTokens(document, tokenizeTo, mode) {
  const text = document.getText(new vscode_1.Range(new vscode_1.Position(0, 0), tokenizeTo));
  return new tokenizer_1.Tokenizer().tokenize(text, 0, text.length, mode);
}

exports.getDocumentTokens = getDocumentTokens;

function isPositionInsideStringOrComment(document, position) {
  const tokenizeTo = position.translate(1, 0);
  const tokens = getDocumentTokens(document, tokenizeTo, types_1.TokenizerMode.CommentsAndStrings);
  const offset = document.offsetAt(position);
  const index = tokens.getItemContaining(offset - 1);

  if (index >= 0) {
    const token = tokens.getItemAt(index);
    return token.type === types_1.TokenType.String || token.type === types_1.TokenType.Comment;
  }

  if (offset > 0 && index >= 0) {
    // In case position is at the every end of the comment or unterminated string
    const token = tokens.getItemAt(index);
    return token.end === offset && token.type === types_1.TokenType.Comment;
  }

  return false;
}

exports.isPositionInsideStringOrComment = isPositionInsideStringOrComment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3ZpZGVyVXRpbGl0aWVzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidnNjb2RlXzEiLCJyZXF1aXJlIiwidG9rZW5pemVyXzEiLCJ0eXBlc18xIiwiZ2V0RG9jdW1lbnRUb2tlbnMiLCJkb2N1bWVudCIsInRva2VuaXplVG8iLCJtb2RlIiwidGV4dCIsImdldFRleHQiLCJSYW5nZSIsIlBvc2l0aW9uIiwiVG9rZW5pemVyIiwidG9rZW5pemUiLCJsZW5ndGgiLCJpc1Bvc2l0aW9uSW5zaWRlU3RyaW5nT3JDb21tZW50IiwicG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJ0b2tlbnMiLCJUb2tlbml6ZXJNb2RlIiwiQ29tbWVudHNBbmRTdHJpbmdzIiwib2Zmc2V0Iiwib2Zmc2V0QXQiLCJpbmRleCIsImdldEl0ZW1Db250YWluaW5nIiwidG9rZW4iLCJnZXRJdGVtQXQiLCJ0eXBlIiwiVG9rZW5UeXBlIiwiU3RyaW5nIiwiQ29tbWVudCIsImVuZCJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUEzQjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUF2Qjs7QUFDQSxTQUFTRyxpQkFBVCxDQUEyQkMsUUFBM0IsRUFBcUNDLFVBQXJDLEVBQWlEQyxJQUFqRCxFQUF1RDtBQUNuRCxRQUFNQyxJQUFJLEdBQUdILFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQixJQUFJVCxRQUFRLENBQUNVLEtBQWIsQ0FBbUIsSUFBSVYsUUFBUSxDQUFDVyxRQUFiLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLENBQW5CLEVBQWdETCxVQUFoRCxDQUFqQixDQUFiO0FBQ0EsU0FBTyxJQUFJSixXQUFXLENBQUNVLFNBQWhCLEdBQTRCQyxRQUE1QixDQUFxQ0wsSUFBckMsRUFBMkMsQ0FBM0MsRUFBOENBLElBQUksQ0FBQ00sTUFBbkQsRUFBMkRQLElBQTNELENBQVA7QUFDSDs7QUFDRFQsT0FBTyxDQUFDTSxpQkFBUixHQUE0QkEsaUJBQTVCOztBQUNBLFNBQVNXLCtCQUFULENBQXlDVixRQUF6QyxFQUFtRFcsUUFBbkQsRUFBNkQ7QUFDekQsUUFBTVYsVUFBVSxHQUFHVSxRQUFRLENBQUNDLFNBQVQsQ0FBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FBbkI7QUFDQSxRQUFNQyxNQUFNLEdBQUdkLGlCQUFpQixDQUFDQyxRQUFELEVBQVdDLFVBQVgsRUFBdUJILE9BQU8sQ0FBQ2dCLGFBQVIsQ0FBc0JDLGtCQUE3QyxDQUFoQztBQUNBLFFBQU1DLE1BQU0sR0FBR2hCLFFBQVEsQ0FBQ2lCLFFBQVQsQ0FBa0JOLFFBQWxCLENBQWY7QUFDQSxRQUFNTyxLQUFLLEdBQUdMLE1BQU0sQ0FBQ00saUJBQVAsQ0FBeUJILE1BQU0sR0FBRyxDQUFsQyxDQUFkOztBQUNBLE1BQUlFLEtBQUssSUFBSSxDQUFiLEVBQWdCO0FBQ1osVUFBTUUsS0FBSyxHQUFHUCxNQUFNLENBQUNRLFNBQVAsQ0FBaUJILEtBQWpCLENBQWQ7QUFDQSxXQUFPRSxLQUFLLENBQUNFLElBQU4sS0FBZXhCLE9BQU8sQ0FBQ3lCLFNBQVIsQ0FBa0JDLE1BQWpDLElBQTJDSixLQUFLLENBQUNFLElBQU4sS0FBZXhCLE9BQU8sQ0FBQ3lCLFNBQVIsQ0FBa0JFLE9BQW5GO0FBQ0g7O0FBQ0QsTUFBSVQsTUFBTSxHQUFHLENBQVQsSUFBY0UsS0FBSyxJQUFJLENBQTNCLEVBQThCO0FBQzFCO0FBQ0EsVUFBTUUsS0FBSyxHQUFHUCxNQUFNLENBQUNRLFNBQVAsQ0FBaUJILEtBQWpCLENBQWQ7QUFDQSxXQUFPRSxLQUFLLENBQUNNLEdBQU4sS0FBY1YsTUFBZCxJQUF3QkksS0FBSyxDQUFDRSxJQUFOLEtBQWV4QixPQUFPLENBQUN5QixTQUFSLENBQWtCRSxPQUFoRTtBQUNIOztBQUNELFNBQU8sS0FBUDtBQUNIOztBQUNEaEMsT0FBTyxDQUFDaUIsK0JBQVIsR0FBMENBLCtCQUExQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XG5jb25zdCB0b2tlbml6ZXJfMSA9IHJlcXVpcmUoXCIuLi9sYW5ndWFnZS90b2tlbml6ZXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2xhbmd1YWdlL3R5cGVzXCIpO1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnRUb2tlbnMoZG9jdW1lbnQsIHRva2VuaXplVG8sIG1vZGUpIHtcbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dChuZXcgdnNjb2RlXzEuUmFuZ2UobmV3IHZzY29kZV8xLlBvc2l0aW9uKDAsIDApLCB0b2tlbml6ZVRvKSk7XG4gICAgcmV0dXJuIG5ldyB0b2tlbml6ZXJfMS5Ub2tlbml6ZXIoKS50b2tlbml6ZSh0ZXh0LCAwLCB0ZXh0Lmxlbmd0aCwgbW9kZSk7XG59XG5leHBvcnRzLmdldERvY3VtZW50VG9rZW5zID0gZ2V0RG9jdW1lbnRUb2tlbnM7XG5mdW5jdGlvbiBpc1Bvc2l0aW9uSW5zaWRlU3RyaW5nT3JDb21tZW50KGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHRva2VuaXplVG8gPSBwb3NpdGlvbi50cmFuc2xhdGUoMSwgMCk7XG4gICAgY29uc3QgdG9rZW5zID0gZ2V0RG9jdW1lbnRUb2tlbnMoZG9jdW1lbnQsIHRva2VuaXplVG8sIHR5cGVzXzEuVG9rZW5pemVyTW9kZS5Db21tZW50c0FuZFN0cmluZ3MpO1xuICAgIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgICBjb25zdCBpbmRleCA9IHRva2Vucy5nZXRJdGVtQ29udGFpbmluZyhvZmZzZXQgLSAxKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vucy5nZXRJdGVtQXQoaW5kZXgpO1xuICAgICAgICByZXR1cm4gdG9rZW4udHlwZSA9PT0gdHlwZXNfMS5Ub2tlblR5cGUuU3RyaW5nIHx8IHRva2VuLnR5cGUgPT09IHR5cGVzXzEuVG9rZW5UeXBlLkNvbW1lbnQ7XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPiAwICYmIGluZGV4ID49IDApIHtcbiAgICAgICAgLy8gSW4gY2FzZSBwb3NpdGlvbiBpcyBhdCB0aGUgZXZlcnkgZW5kIG9mIHRoZSBjb21tZW50IG9yIHVudGVybWluYXRlZCBzdHJpbmdcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnMuZ2V0SXRlbUF0KGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRva2VuLmVuZCA9PT0gb2Zmc2V0ICYmIHRva2VuLnR5cGUgPT09IHR5cGVzXzEuVG9rZW5UeXBlLkNvbW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNQb3NpdGlvbkluc2lkZVN0cmluZ09yQ29tbWVudCA9IGlzUG9zaXRpb25JbnNpZGVTdHJpbmdPckNvbW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlclV0aWxpdGllcy5qcy5tYXAiXX0=