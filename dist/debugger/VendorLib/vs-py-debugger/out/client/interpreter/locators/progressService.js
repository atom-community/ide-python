// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const logger_1 = require("../../common/logger");

const types_1 = require("../../common/types");

const async_1 = require("../../common/utils/async");

const misc_1 = require("../../common/utils/misc");

const types_2 = require("../../ioc/types");

const contracts_1 = require("../contracts");

let InterpreterLocatorProgressService = class InterpreterLocatorProgressService {
  constructor(serviceContainer, disposables) {
    this.disposables = disposables;
    this.deferreds = [];
    this.refreshing = new vscode_1.EventEmitter();
    this.refreshed = new vscode_1.EventEmitter();
    this.locators = [];
    this.locators = serviceContainer.getAll(contracts_1.IInterpreterLocatorService);
  }

  get onRefreshing() {
    return this.refreshing.event;
  }

  get onRefreshed() {
    return this.refreshed.event;
  }

  register() {
    this.locators.forEach(locator => {
      locator.onLocating(this.handleProgress, this, this.disposables);
    });
  }

  handleProgress(promise) {
    this.deferreds.push(async_1.createDeferredFrom(promise));
    this.notifyRefreshing();
    this.checkProgress();
  }

  notifyCompleted() {
    this.refreshed.fire();
  }

  notifyRefreshing() {
    this.refreshing.fire();
  }

  checkProgress() {
    if (this.areAllItemsCcomplete()) {
      return this.notifyCompleted();
    }

    Promise.all(this.deferreds.map(item => item.promise)).catch(misc_1.noop).then(() => this.checkProgress()).ignoreErrors();
  }

  areAllItemsCcomplete() {
    this.deferreds = this.deferreds.filter(item => !item.completed);
    return this.deferreds.length === 0;
  }

};

__decorate([logger_1.traceVerbose('Detected refreshing of Interpreters')], InterpreterLocatorProgressService.prototype, "handleProgress", null);

__decorate([logger_1.traceVerbose('All locators have completed locating')], InterpreterLocatorProgressService.prototype, "notifyCompleted", null);

__decorate([logger_1.traceVerbose('Notify locators are locating')], InterpreterLocatorProgressService.prototype, "notifyRefreshing", null);

__decorate([logger_1.traceVerbose('Checking whether locactors have completed locating')], InterpreterLocatorProgressService.prototype, "checkProgress", null);

InterpreterLocatorProgressService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_2.IServiceContainer)), __param(1, inversify_1.inject(types_1.IDisposableRegistry))], InterpreterLocatorProgressService);
exports.InterpreterLocatorProgressService = InterpreterLocatorProgressService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyZXNzU2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInZzY29kZV8xIiwibG9nZ2VyXzEiLCJ0eXBlc18xIiwiYXN5bmNfMSIsIm1pc2NfMSIsInR5cGVzXzIiLCJjb250cmFjdHNfMSIsIkludGVycHJldGVyTG9jYXRvclByb2dyZXNzU2VydmljZSIsImNvbnN0cnVjdG9yIiwic2VydmljZUNvbnRhaW5lciIsImRpc3Bvc2FibGVzIiwiZGVmZXJyZWRzIiwicmVmcmVzaGluZyIsIkV2ZW50RW1pdHRlciIsInJlZnJlc2hlZCIsImxvY2F0b3JzIiwiZ2V0QWxsIiwiSUludGVycHJldGVyTG9jYXRvclNlcnZpY2UiLCJvblJlZnJlc2hpbmciLCJldmVudCIsIm9uUmVmcmVzaGVkIiwicmVnaXN0ZXIiLCJmb3JFYWNoIiwibG9jYXRvciIsIm9uTG9jYXRpbmciLCJoYW5kbGVQcm9ncmVzcyIsInByb21pc2UiLCJwdXNoIiwiY3JlYXRlRGVmZXJyZWRGcm9tIiwibm90aWZ5UmVmcmVzaGluZyIsImNoZWNrUHJvZ3Jlc3MiLCJub3RpZnlDb21wbGV0ZWQiLCJmaXJlIiwiYXJlQWxsSXRlbXNDY29tcGxldGUiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiaXRlbSIsImNhdGNoIiwibm9vcCIsInRoZW4iLCJpZ25vcmVFcnJvcnMiLCJmaWx0ZXIiLCJjb21wbGV0ZWQiLCJ0cmFjZVZlcmJvc2UiLCJwcm90b3R5cGUiLCJpbmplY3RhYmxlIiwiaW5q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WixDQUFtQjFDLE9BQU8sQ0FBQzJDLGlCQUEzQixDQUFKLENBRm9DLEVBRzNDdkQsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDaUQsTUFBWixDQUFtQjdDLE9BQU8sQ0FBQytDLG1CQUEzQixDQUFKLENBSG9DLENBQUQsRUFJM0MxQyxpQ0FKMkMsQ0FBOUM7QUFLQVgsT0FBTyxDQUFDVyxpQ0FBUixHQUE0Q0EsaUNBQTVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9sb2dnZXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi90eXBlc1wiKTtcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3V0aWxzL2FzeW5jXCIpO1xuY29uc3QgbWlzY18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi91dGlscy9taXNjXCIpO1xuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuLi8uLi9pb2MvdHlwZXNcIik7XG5jb25zdCBjb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHNcIik7XG5sZXQgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlID0gY2xhc3MgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlQ29udGFpbmVyLCBkaXNwb3NhYmxlcykge1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzID0gZGlzcG9zYWJsZXM7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRzID0gW107XG4gICAgICAgIHRoaXMucmVmcmVzaGluZyA9IG5ldyB2c2NvZGVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoZWQgPSBuZXcgdnNjb2RlXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMubG9jYXRvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5sb2NhdG9ycyA9IHNlcnZpY2VDb250YWluZXIuZ2V0QWxsKGNvbnRyYWN0c18xLklJbnRlcnByZXRlckxvY2F0b3JTZXJ2aWNlKTtcbiAgICB9XG4gICAgZ2V0IG9uUmVmcmVzaGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaGluZy5ldmVudDtcbiAgICB9XG4gICAgZ2V0IG9uUmVmcmVzaGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoZWQuZXZlbnQ7XG4gICAgfVxuICAgIHJlZ2lzdGVyKCkge1xuICAgICAgICB0aGlzLmxvY2F0b3JzLmZvckVhY2gobG9jYXRvciA9PiB7XG4gICAgICAgICAgICBsb2NhdG9yLm9uTG9jYXRpbmcodGhpcy5oYW5kbGVQcm9ncmVzcywgdGhpcywgdGhpcy5kaXNwb3NhYmxlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVQcm9ncmVzcyhwcm9taXNlKSB7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRzLnB1c2goYXN5bmNfMS5jcmVhdGVEZWZlcnJlZEZyb20ocHJvbWlzZSkpO1xuICAgICAgICB0aGlzLm5vdGlmeVJlZnJlc2hpbmcoKTtcbiAgICAgICAgdGhpcy5jaGVja1Byb2dyZXNzKCk7XG4gICAgfVxuICAgIG5vdGlmeUNvbXBsZXRlZCgpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoZWQuZmlyZSgpO1xuICAgIH1cbiAgICBub3RpZnlSZWZyZXNoaW5nKCkge1xuICAgICAgICB0aGlzLnJlZnJlc2hpbmcuZmlyZSgpO1xuICAgIH1cbiAgICBjaGVja1Byb2dyZXNzKCkge1xuICAgICAgICBpZiAodGhpcy5hcmVBbGxJdGVtc0Njb21wbGV0ZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RpZnlDb21wbGV0ZWQoKTtcbiAgICAgICAgfVxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLmRlZmVycmVkcy5tYXAoaXRlbSA9PiBpdGVtLnByb21pc2UpKVxuICAgICAgICAgICAgLmNhdGNoKG1pc2NfMS5ub29wKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jaGVja1Byb2dyZXNzKCkpXG4gICAgICAgICAgICAuaWdub3JlRXJyb3JzKCk7XG4gICAgfVxuICAgIGFyZUFsbEl0ZW1zQ2NvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLmRlZmVycmVkcyA9IHRoaXMuZGVmZXJyZWRzLmZpbHRlcihpdGVtID0+ICFpdGVtLmNvbXBsZXRlZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkcy5sZW5ndGggPT09IDA7XG4gICAgfVxufTtcbl9fZGVjb3JhdGUoW1xuICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZSgnRGV0ZWN0ZWQgcmVmcmVzaGluZyBvZiBJbnRlcnByZXRlcnMnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZSwgXCJoYW5kbGVQcm9ncmVzc1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZSgnQWxsIGxvY2F0b3JzIGhhdmUgY29tcGxldGVkIGxvY2F0aW5nJylcbl0sIEludGVycHJldGVyTG9jYXRvclByb2dyZXNzU2VydmljZS5wcm90b3R5cGUsIFwibm90aWZ5Q29tcGxldGVkXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbG9nZ2VyXzEudHJhY2VWZXJib3NlKCdOb3RpZnkgbG9jYXRvcnMgYXJlIGxvY2F0aW5nJylcbl0sIEludGVycHJldGVyTG9jYXRvclByb2dyZXNzU2VydmljZS5wcm90b3R5cGUsIFwibm90aWZ5UmVmcmVzaGluZ1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZSgnQ2hlY2tpbmcgd2hldGhlciBsb2NhY3RvcnMgaGF2ZSBjb21wbGV0ZWQgbG9jYXRpbmcnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZSwgXCJjaGVja1Byb2dyZXNzXCIsIG51bGwpO1xuSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSVNlcnZpY2VDb250YWluZXIpKSxcbiAgICBfX3BhcmFtKDEsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklEaXNwb3NhYmxlUmVnaXN0cnkpKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlKTtcbmV4cG9ydHMuSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlID0gSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZ3Jlc3NTZXJ2aWNlLmpzLm1hcCJdfQ==