// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const types_1 = require("../../common/application/types");

const logger_1 = require("../../common/logger");

const types_2 = require("../../common/types");

const async_1 = require("../../common/utils/async");

const localize_1 = require("../../common/utils/localize");

const contracts_1 = require("../contracts");

let InterpreterLocatorProgressStatubarHandler = class InterpreterLocatorProgressStatubarHandler {
  constructor(shell, progressService, disposables) {
    this.shell = shell;
    this.progressService = progressService;
    this.disposables = disposables;
    this.isFirstTimeLoadingInterpreters = true;
  }

  register() {
    this.progressService.onRefreshing(() => this.showProgress(), this, this.disposables);
    this.progressService.onRefreshed(() => this.hideProgress(), this, this.disposables);
  }

  showProgress() {
    if (!this.deferred) {
      this.createProgress();
    }
  }

  hideProgress() {
    if (this.deferred) {
      this.deferred.resolve();
      this.deferred = undefined;
    }
  }

  createProgress() {
    const progressOptions = {
      location: vscode_1.ProgressLocation.Window,
      title: this.isFirstTimeLoadingInterpreters ? localize_1.Interpreters.loading() : localize_1.Interpreters.refreshing()
    };
    this.isFirstTimeLoadingInterpreters = false;
    this.shell.withProgress(progressOptions, () => {
      this.deferred = async_1.createDeferred();
      return this.deferred.promise;
    });
  }

};

__decorate([logger_1.traceVerbose('Display locator refreshing progress')], InterpreterLocatorProgressStatubarHandler.prototype, "showProgress", null);

__decorate([logger_1.traceVerbose('Hide locator refreshing progress')], InterpreterLocatorProgressStatubarHandler.prototype, "hideProgress", null);

InterpreterLocatorProgressStatubarHandler = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IApplicationShell)), __param(1, inversify_1.inject(contracts_1.IInterpreterLocatorProgressService)), __param(2, inversify_1.inject(types_2.IDisposableRegistry))], InterpreterLocatorProgressStatubarHandler);
exports.InterpreterLocatorProgressStatubarHandler = InterpreterLocatorProgressStatubarHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyZXNzRGlzcGxheS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInZzY29kZV8xIiwidHlwZXNfMSIsImxvZ2dlcl8xIiwidHlwZXNfMiIsImFzeW5jXzEiLCJsb2NhbGl6ZV8xIiwiY29udHJhY3RzXzEiLCJJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1N0YXR1YmFySGFuZGxlciIsImNvbnN0cnVjdG9yIiwic2hlbGwiLCJwcm9ncmVzc1NlcnZpY2UiLCJkaXNwb3NhYmxlcyIsImlzRmlyc3RUaW1lTG9hZGluZ0ludGVycHJldGVycyIsInJlZ2lzdGVyIiwib25SZWZyZXNoaW5nIiwic2hvd1Byb2dyZXNzIiwib25SZWZyZXNoZWQiLCJoaWRlUHJvZ3Jlc3MiLCJkZWZlcnJlZCIsImNyZWF0ZVByb2dyZXNzIiwicmVzb2x2ZSIsInVuZGVmaW5lZCIsInByb2dyZXNzT3B0aW9ucyIsImxvY2F0aW9uIiwiUHJvZ3Jlc3NMb2NhdGlvbiIsIldpbmRvdyIsInRpdGxlIiwiSW50ZXJwcmV0ZXJzIiwibG9hZGluZyIsInJlZnJlc2hpbmciLCJ3aXRoUHJvZ3Jlc3MiLCJjcmVhdGVEZWZlcnJlZCIsInByb21pc2UiLCJ0cmFjZVZlcmJvc2UiLCJwcm90b3R5cGUiLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSUFwcGxpY2F0aW9uU2hlbGwiLCJJSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlIiwiSURpc3Bvc2FibGVSZWdpc3RyeSJdLCJtYXBw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LEVBRVAxQix5Q0FBeUMsQ0FBQzJCLFNBRm5DLEVBRThDLGNBRjlDLEVBRThELElBRjlELENBQVY7O0FBR0F6RCxVQUFVLENBQUMsQ0FDUHlCLFFBQVEsQ0FBQytCLFlBQVQsQ0FBc0Isa0NBQXRCLENBRE8sQ0FBRCxFQUVQMUIseUNBQXlDLENBQUMyQixTQUZuQyxFQUU4QyxjQUY5QyxFQUU4RCxJQUY5RCxDQUFWOztBQUdBM0IseUNBQXlDLEdBQUc5QixVQUFVLENBQUMsQ0FDbkRxQixXQUFXLENBQUNxQyxVQUFaLEVBRG1ELEVBRW5EMUMsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDc0MsTUFBWixDQUFtQm5DLE9BQU8sQ0FBQ29DLGlCQUEzQixDQUFKLENBRjRDLEVBR25ENUMsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDc0MsTUFBWixDQUFtQjlCLFdBQVcsQ0FBQ2dDLGtDQUEvQixDQUFKLENBSDRDLEVBSW5EN0MsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDc0MsTUFBWixDQUFtQmpDLE9BQU8sQ0FBQ29DLG1CQUEzQixDQUFKLENBSjRDLENBQUQsRUFLbkRoQyx5Q0FMbUQsQ0FBdEQ7QUFNQVgsT0FBTyxDQUFDVyx5Q0FBUixHQUFvREEseUNBQXBEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2xvZ2dlclwiKTtcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdXRpbHMvYXN5bmNcIik7XG5jb25zdCBsb2NhbGl6ZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi91dGlscy9sb2NhbGl6ZVwiKTtcbmNvbnN0IGNvbnRyYWN0c18xID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0c1wiKTtcbmxldCBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1N0YXR1YmFySGFuZGxlciA9IGNsYXNzIEludGVycHJldGVyTG9jYXRvclByb2dyZXNzU3RhdHViYXJIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzaGVsbCwgcHJvZ3Jlc3NTZXJ2aWNlLCBkaXNwb3NhYmxlcykge1xuICAgICAgICB0aGlzLnNoZWxsID0gc2hlbGw7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3NTZXJ2aWNlID0gcHJvZ3Jlc3NTZXJ2aWNlO1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzID0gZGlzcG9zYWJsZXM7XG4gICAgICAgIHRoaXMuaXNGaXJzdFRpbWVMb2FkaW5nSW50ZXJwcmV0ZXJzID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVnaXN0ZXIoKSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3NTZXJ2aWNlLm9uUmVmcmVzaGluZygoKSA9PiB0aGlzLnNob3dQcm9ncmVzcygpLCB0aGlzLCB0aGlzLmRpc3Bvc2FibGVzKTtcbiAgICAgICAgdGhpcy5wcm9ncmVzc1NlcnZpY2Uub25SZWZyZXNoZWQoKCkgPT4gdGhpcy5oaWRlUHJvZ3Jlc3MoKSwgdGhpcywgdGhpcy5kaXNwb3NhYmxlcyk7XG4gICAgfVxuICAgIHNob3dQcm9ncmVzcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlZmVycmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByb2dyZXNzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZVByb2dyZXNzKCkge1xuICAgICAgICBpZiAodGhpcy5kZWZlcnJlZCkge1xuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVByb2dyZXNzKCkge1xuICAgICAgICBjb25zdCBwcm9ncmVzc09wdGlvbnMgPSB7XG4gICAgICAgICAgICBsb2NhdGlvbjogdnNjb2RlXzEuUHJvZ3Jlc3NMb2NhdGlvbi5XaW5kb3csXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5pc0ZpcnN0VGltZUxvYWRpbmdJbnRlcnByZXRlcnMgPyBsb2NhbGl6ZV8xLkludGVycHJldGVycy5sb2FkaW5nKCkgOiBsb2NhbGl6ZV8xLkludGVycHJldGVycy5yZWZyZXNoaW5nKClcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0ZpcnN0VGltZUxvYWRpbmdJbnRlcnByZXRlcnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaGVsbC53aXRoUHJvZ3Jlc3MocHJvZ3Jlc3NPcHRpb25zLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkID0gYXN5bmNfMS5jcmVhdGVEZWZlcnJlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbl9fZGVjb3JhdGUoW1xuICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZSgnRGlzcGxheSBsb2NhdG9yIHJlZnJlc2hpbmcgcHJvZ3Jlc3MnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTdGF0dWJhckhhbmRsZXIucHJvdG90eXBlLCBcInNob3dQcm9ncmVzc1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZSgnSGlkZSBsb2NhdG9yIHJlZnJlc2hpbmcgcHJvZ3Jlc3MnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTdGF0dWJhckhhbmRsZXIucHJvdG90eXBlLCBcImhpZGVQcm9ncmVzc1wiLCBudWxsKTtcbkludGVycHJldGVyTG9jYXRvclByb2dyZXNzU3RhdHViYXJIYW5kbGVyID0gX19kZWNvcmF0ZShbXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSUFwcGxpY2F0aW9uU2hlbGwpKSxcbiAgICBfX3BhcmFtKDEsIGludmVyc2lmeV8xLmluamVjdChjb250cmFjdHNfMS5JSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlKSksXG4gICAgX19wYXJhbSgyLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMi5JRGlzcG9zYWJsZVJlZ2lzdHJ5KSlcbl0sIEludGVycHJldGVyTG9jYXRvclByb2dyZXNzU3RhdHViYXJIYW5kbGVyKTtcbmV4cG9ydHMuSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTdGF0dWJhckhhbmRsZXIgPSBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1N0YXR1YmFySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2dyZXNzRGlzcGxheS5qcy5tYXAiXX0=