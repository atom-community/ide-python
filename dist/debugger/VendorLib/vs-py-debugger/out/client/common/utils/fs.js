// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const fs = require("fs");

const path = require("path");

const tmp = require("tmp");

function fsExistsAsync(filePath) {
  return new Promise(resolve => {
    fs.exists(filePath, exists => {
      return resolve(exists);
    });
  });
}

exports.fsExistsAsync = fsExistsAsync;

function fsReaddirAsync(root) {
  return new Promise(resolve => {
    // Now look for Interpreters in this directory
    fs.readdir(root, (err, subDirs) => {
      if (err) {
        return resolve([]);
      }

      resolve(subDirs.map(subDir => path.join(root, subDir)));
    });
  });
}

exports.fsReaddirAsync = fsReaddirAsync;

function getSubDirectories(rootDir) {
  return new Promise(resolve => {
    fs.readdir(rootDir, (error, files) => {
      if (error) {
        return resolve([]);
      }

      const subDirs = [];
      files.forEach(name => {
        const fullPath = path.join(rootDir, name);

        try {
          if (fs.statSync(fullPath).isDirectory()) {
            subDirs.push(fullPath);
          }
        } // tslint:disable-next-line:no-empty one-line
        catch (ex) {}
      });
      resolve(subDirs);
    });
  });
}

exports.getSubDirectories = getSubDirectories;

function createTemporaryFile(extension, temporaryDirectory) {
  // tslint:disable-next-line:no-any
  const options = {
    postfix: extension
  };

  if (temporaryDirectory) {
    options.dir = temporaryDirectory;
  }

  return new Promise((resolve, reject) => {
    tmp.file(options, (err, tmpFile, fd, cleanupCallback) => {
      if (err) {
        return reject(err);
      }

      resolve({
        filePath: tmpFile,
        cleanupCallback: cleanupCallback
      });
    });
  });
}

exports.createTemporaryFile = createTemporaryFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnMiLCJyZXF1aXJlIiwicGF0aCIsInRtcCIsImZzRXhpc3RzQXN5bmMiLCJmaWxlUGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXhpc3RzIiwiZnNSZWFkZGlyQXN5bmMiLCJyb290IiwicmVhZGRpciIsImVyciIsInN1YkRpcnMiLCJtYXAiLCJzdWJEaXIiLCJqb2luIiwiZ2V0U3ViRGlyZWN0b3JpZXMiLCJyb290RGlyIiwiZXJyb3IiLCJmaWxlcyIsImZvckVhY2giLCJuYW1lIiwiZnVsbFBhdGgiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwicHVzaCIsImV4IiwiY3JlYXRlVGVtcG9yYXJ5RmlsZSIsImV4dGVuc2lvbiIsInRlbXBvcmFyeURpcmVjdG9yeSIsIm9wdGlvbnMiLCJwb3N0Zml4IiwiZGlyIiwicmVqZWN0IiwiZmlsZSIsInRtcEZpbGUiLCJmZCIsImNsZWFudXBDYWxsYmFjayJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLFNBQVNHLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDO0FBQzdCLFNBQU8sSUFBSUMsT0FBSixDQUFZQyxPQUFPLElBQUk7QUFDMUJQLElBQUFBLEVBQUUsQ0FBQ1EsTUFBSCxDQUFVSCxRQUFWLEVBQW9CRyxNQUFNLElBQUk7QUFDMUIsYUFBT0QsT0FBTyxDQUFDQyxNQUFELENBQWQ7QUFDSCxLQUZEO0FBR0gsR0FKTSxDQUFQO0FBS0g7O0FBQ0RWLE9BQU8sQ0FBQ00sYUFBUixHQUF3QkEsYUFBeEI7O0FBQ0EsU0FBU0ssY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDMUIsU0FBTyxJQUFJSixPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUMxQjtBQUNBUCxJQUFBQSxFQUFFLENBQUNXLE9BQUgsQ0FBV0QsSUFBWCxFQUFpQixDQUFDRSxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDL0IsVUFBSUQsR0FBSixFQUFTO0FBQ0wsZUFBT0wsT0FBTyxDQUFDLEVBQUQsQ0FBZDtBQUNIOztBQUNEQSxNQUFBQSxPQUFPLENBQUNNLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQUFNLElBQUliLElBQUksQ0FBQ2MsSUFBTCxDQUFVTixJQUFWLEVBQWdCSyxNQUFoQixDQUF0QixDQUFELENBQVA7QUFDSCxLQUxEO0FBTUgsR0FSTSxDQUFQO0FBU0g7O0FBQ0RqQixPQUFPLENBQUNXLGNBQVIsR0FBeUJBLGNBQXpCOztBQUNBLFNBQVNRLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQztBQUNoQyxTQUFPLElBQUlaLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQzFCUCxJQUFBQSxFQUFFLENBQUNXLE9BQUgsQ0FBV08sT0FBWCxFQUFvQixDQUFDQyxLQUFELEVBQVFDLEtBQVIsS0FBa0I7QUFDbEMsVUFBSUQsS0FBSixFQUFXO0FBQ1AsZUFBT1osT0FBTyxDQUFDLEVBQUQsQ0FBZDtBQUNIOztBQUNELFlBQU1NLE9BQU8sR0FBRyxFQUFoQjtBQUNBTyxNQUFBQSxLQUFLLENBQUNDLE9BQU4sQ0FBY0MsSUFBSSxJQUFJO0FBQ2xCLGNBQU1DLFFBQVEsR0FBR3JCLElBQUksQ0FBQ2MsSUFBTCxDQUFVRSxPQUFWLEVBQW1CSSxJQUFuQixDQUFqQjs7QUFDQSxZQUFJO0FBQ0EsY0FBSXRCLEVBQUUsQ0FBQ3dCLFFBQUgsQ0FBWUQsUUFBWixFQUFzQkUsV0FBdEIsRUFBSixFQUF5QztBQUNyQ1osWUFBQUEsT0FBTyxDQUFDYSxJQUFSLENBQWFILFFBQWI7QUFDSDtBQUNKLFNBSkQsQ0FLQTtBQUNBLGVBQU9JLEVBQVAsRUFBVyxDQUFHO0FBQ2pCLE9BVEQ7QUFVQXBCLE1BQUFBLE9BQU8sQ0FBQ00sT0FBRCxDQUFQO0FBQ0gsS0FoQkQ7QUFpQkgsR0FsQk0sQ0FBUDtBQW1CSDs7QUFDRGYsT0FBTyxDQUFDbUIsaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFDQSxTQUFTVyxtQkFBVCxDQUE2QkMsU0FBN0IsRUFBd0NDLGtCQUF4QyxFQUE0RDtBQUN4RDtBQUNBLFFBQU1DLE9BQU8sR0FBRztBQUFFQyxJQUFBQSxPQUFPLEVBQUVIO0FBQVgsR0FBaEI7O0FBQ0EsTUFBSUMsa0JBQUosRUFBd0I7QUFDcEJDLElBQUFBLE9BQU8sQ0FBQ0UsR0FBUixHQUFjSCxrQkFBZDtBQUNIOztBQUNELFNBQU8sSUFBSXhCLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVUyQixNQUFWLEtBQXFCO0FBQ3BDL0IsSUFBQUEsR0FBRyxDQUFDZ0MsSUFBSixDQUFTSixPQUFULEVBQWtCLENBQUNuQixHQUFELEVBQU13QixPQUFOLEVBQWVDLEVBQWYsRUFBbUJDLGVBQW5CLEtBQXVDO0FBQ3JELFVBQUkxQixHQUFKLEVBQVM7QUFDTCxlQUFPc0IsTUFBTSxDQUFDdEIsR0FBRCxDQUFiO0FBQ0g7O0FBQ0RMLE1BQUFBLE9BQU8sQ0FBQztBQUFFRixRQUFBQSxRQUFRLEVBQUUrQixPQUFaO0FBQXFCRSxRQUFBQSxlQUFlLEVBQUVBO0FBQXRDLE9BQUQsQ0FBUDtBQUNILEtBTEQ7QUFNSCxHQVBNLENBQVA7QUFRSDs7QUFDRHhDLE9BQU8sQ0FBQzhCLG1CQUFSLEdBQThCQSxtQkFBOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgdG1wID0gcmVxdWlyZShcInRtcFwiKTtcbmZ1bmN0aW9uIGZzRXhpc3RzQXN5bmMoZmlsZVBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGZzLmV4aXN0cyhmaWxlUGF0aCwgZXhpc3RzID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGV4aXN0cyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mc0V4aXN0c0FzeW5jID0gZnNFeGlzdHNBc3luYztcbmZ1bmN0aW9uIGZzUmVhZGRpckFzeW5jKHJvb3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIC8vIE5vdyBsb29rIGZvciBJbnRlcnByZXRlcnMgaW4gdGhpcyBkaXJlY3RvcnlcbiAgICAgICAgZnMucmVhZGRpcihyb290LCAoZXJyLCBzdWJEaXJzKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZShzdWJEaXJzLm1hcChzdWJEaXIgPT4gcGF0aC5qb2luKHJvb3QsIHN1YkRpcikpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZzUmVhZGRpckFzeW5jID0gZnNSZWFkZGlyQXN5bmM7XG5mdW5jdGlvbiBnZXRTdWJEaXJlY3Rvcmllcyhyb290RGlyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBmcy5yZWFkZGlyKHJvb3REaXIsIChlcnJvciwgZmlsZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN1YkRpcnMgPSBbXTtcbiAgICAgICAgICAgIGZpbGVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4ocm9vdERpciwgbmFtZSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZzLnN0YXRTeW5jKGZ1bGxQYXRoKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJEaXJzLnB1c2goZnVsbFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eSBvbmUtbGluZVxuICAgICAgICAgICAgICAgIGNhdGNoIChleCkgeyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc29sdmUoc3ViRGlycyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRTdWJEaXJlY3RvcmllcyA9IGdldFN1YkRpcmVjdG9yaWVzO1xuZnVuY3Rpb24gY3JlYXRlVGVtcG9yYXJ5RmlsZShleHRlbnNpb24sIHRlbXBvcmFyeURpcmVjdG9yeSkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBjb25zdCBvcHRpb25zID0geyBwb3N0Zml4OiBleHRlbnNpb24gfTtcbiAgICBpZiAodGVtcG9yYXJ5RGlyZWN0b3J5KSB7XG4gICAgICAgIG9wdGlvbnMuZGlyID0gdGVtcG9yYXJ5RGlyZWN0b3J5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0bXAuZmlsZShvcHRpb25zLCAoZXJyLCB0bXBGaWxlLCBmZCwgY2xlYW51cENhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSh7IGZpbGVQYXRoOiB0bXBGaWxlLCBjbGVhbnVwQ2FsbGJhY2s6IGNsZWFudXBDYWxsYmFjayB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNyZWF0ZVRlbXBvcmFyeUZpbGUgPSBjcmVhdGVUZW1wb3JhcnlGaWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnMuanMubWFwIl19