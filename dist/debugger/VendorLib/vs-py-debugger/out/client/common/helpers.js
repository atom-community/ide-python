// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const constants_1 = require("./constants");

const moduleNotInstalledError_1 = require("./errors/moduleNotInstalledError");

function isNotInstalledError(error) {
  const isError = typeof error === 'object' && error !== null; // tslint:disable-next-line:no-any

  const errorObj = error;

  if (!isError) {
    return false;
  }

  if (error instanceof moduleNotInstalledError_1.ModuleNotInstalledError) {
    return true;
  }

  const isModuleNoInstalledError = error.message.indexOf('No module named') >= 0;
  return errorObj.code === 'ENOENT' || errorObj.code === 127 || isModuleNoInstalledError;
}

exports.isNotInstalledError = isNotInstalledError;

function skipIfTest(isAsyncFunction) {
  // tslint:disable-next-line:no-function-expression no-any
  return function (_, __, descriptor) {
    const originalMethod = descriptor.value; // tslint:disable-next-line:no-function-expression no-any

    descriptor.value = function (...args) {
      if (constants_1.isTestExecution()) {
        return isAsyncFunction ? Promise.resolve() : undefined;
      } // tslint:disable-next-line:no-invalid-this no-use-before-declare no-unsafe-any


      return originalMethod.apply(this, args);
    };

    return descriptor;
  };
}

exports.skipIfTest = skipIfTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJtb2R1bGVOb3RJbnN0YWxsZWRFcnJvcl8xIiwiaXNOb3RJbnN0YWxsZWRFcnJvciIsImVycm9yIiwiaXNFcnJvciIsImVycm9yT2JqIiwiTW9kdWxlTm90SW5zdGFsbGVkRXJyb3IiLCJpc01vZHVsZU5vSW5zdGFsbGVkRXJyb3IiLCJtZXNzYWdlIiwiaW5kZXhPZiIsImNvZGUiLCJza2lwSWZUZXN0IiwiaXNBc3luY0Z1bmN0aW9uIiwiXyIsIl9fIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiYXJncyIsImlzVGVzdEV4ZWN1dGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidW5kZWZpbmVkIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLE1BQU1DLHlCQUF5QixHQUFHRCxPQUFPLENBQUMsa0NBQUQsQ0FBekM7O0FBQ0EsU0FBU0UsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DO0FBQ2hDLFFBQU1DLE9BQU8sR0FBRyxPQUFRRCxLQUFSLEtBQW1CLFFBQW5CLElBQStCQSxLQUFLLEtBQUssSUFBekQsQ0FEZ0MsQ0FFaEM7O0FBQ0EsUUFBTUUsUUFBUSxHQUFHRixLQUFqQjs7QUFDQSxNQUFJLENBQUNDLE9BQUwsRUFBYztBQUNWLFdBQU8sS0FBUDtBQUNIOztBQUNELE1BQUlELEtBQUssWUFBWUYseUJBQXlCLENBQUNLLHVCQUEvQyxFQUF3RTtBQUNwRSxXQUFPLElBQVA7QUFDSDs7QUFDRCxRQUFNQyx3QkFBd0IsR0FBR0osS0FBSyxDQUFDSyxPQUFOLENBQWNDLE9BQWQsQ0FBc0IsaUJBQXRCLEtBQTRDLENBQTdFO0FBQ0EsU0FBT0osUUFBUSxDQUFDSyxJQUFULEtBQWtCLFFBQWxCLElBQThCTCxRQUFRLENBQUNLLElBQVQsS0FBa0IsR0FBaEQsSUFBdURILHdCQUE5RDtBQUNIOztBQUNEVixPQUFPLENBQUNLLG1CQUFSLEdBQThCQSxtQkFBOUI7O0FBQ0EsU0FBU1MsVUFBVCxDQUFvQkMsZUFBcEIsRUFBcUM7QUFDakM7QUFDQSxTQUFPLFVBQVVDLENBQVYsRUFBYUMsRUFBYixFQUFpQkMsVUFBakIsRUFBNkI7QUFDaEMsVUFBTUMsY0FBYyxHQUFHRCxVQUFVLENBQUNqQixLQUFsQyxDQURnQyxDQUVoQzs7QUFDQWlCLElBQUFBLFVBQVUsQ0FBQ2pCLEtBQVgsR0FBbUIsVUFBVSxHQUFHbUIsSUFBYixFQUFtQjtBQUNsQyxVQUFJbEIsV0FBVyxDQUFDbUIsZUFBWixFQUFKLEVBQW1DO0FBQy9CLGVBQU9OLGVBQWUsR0FBR08sT0FBTyxDQUFDQyxPQUFSLEVBQUgsR0FBdUJDLFNBQTdDO0FBQ0gsT0FIaUMsQ0FJbEM7OztBQUNBLGFBQU9MLGNBQWMsQ0FBQ00sS0FBZixDQUFxQixJQUFyQixFQUEyQkwsSUFBM0IsQ0FBUDtBQUNILEtBTkQ7O0FBT0EsV0FBT0YsVUFBUDtBQUNILEdBWEQ7QUFZSDs7QUFDRGxCLE9BQU8sQ0FBQ2MsVUFBUixHQUFxQkEsVUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgbW9kdWxlTm90SW5zdGFsbGVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy9tb2R1bGVOb3RJbnN0YWxsZWRFcnJvclwiKTtcbmZ1bmN0aW9uIGlzTm90SW5zdGFsbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBjb25zdCBpc0Vycm9yID0gdHlwZW9mIChlcnJvcikgPT09ICdvYmplY3QnICYmIGVycm9yICE9PSBudWxsO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBjb25zdCBlcnJvck9iaiA9IGVycm9yO1xuICAgIGlmICghaXNFcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIG1vZHVsZU5vdEluc3RhbGxlZEVycm9yXzEuTW9kdWxlTm90SW5zdGFsbGVkRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGlzTW9kdWxlTm9JbnN0YWxsZWRFcnJvciA9IGVycm9yLm1lc3NhZ2UuaW5kZXhPZignTm8gbW9kdWxlIG5hbWVkJykgPj0gMDtcbiAgICByZXR1cm4gZXJyb3JPYmouY29kZSA9PT0gJ0VOT0VOVCcgfHwgZXJyb3JPYmouY29kZSA9PT0gMTI3IHx8IGlzTW9kdWxlTm9JbnN0YWxsZWRFcnJvcjtcbn1cbmV4cG9ydHMuaXNOb3RJbnN0YWxsZWRFcnJvciA9IGlzTm90SW5zdGFsbGVkRXJyb3I7XG5mdW5jdGlvbiBza2lwSWZUZXN0KGlzQXN5bmNGdW5jdGlvbikge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mdW5jdGlvbi1leHByZXNzaW9uIG5vLWFueVxuICAgIHJldHVybiBmdW5jdGlvbiAoXywgX18sIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZnVuY3Rpb24tZXhwcmVzc2lvbiBuby1hbnlcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZiAoY29uc3RhbnRzXzEuaXNUZXN0RXhlY3V0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNBc3luY0Z1bmN0aW9uID8gUHJvbWlzZS5yZXNvbHZlKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW52YWxpZC10aGlzIG5vLXVzZS1iZWZvcmUtZGVjbGFyZSBuby11bnNhZmUtYW55XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH07XG59XG5leHBvcnRzLnNraXBJZlRlc3QgPSBza2lwSWZUZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXX0=