"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const events_1 = require("events");

const vscode_1 = require("vscode");

const configSettings_1 = require("../common/configSettings");

class ConfigSettingMonitor extends events_1.EventEmitter {
  constructor(settingToMonitor) {
    super();
    this.settingToMonitor = settingToMonitor;
    this.oldSettings = new Map();
    this.initializeSettings(); // tslint:disable-next-line:no-void-expression

    configSettings_1.PythonSettings.getInstance().on('change', () => this.onConfigChange());
  }

  dispose() {
    if (this.timeout) {
      // tslint:disable-next-line:no-unsafe-any
      clearTimeout(this.timeout);
    }
  }

  onConfigChange() {
    if (this.timeout) {
      // tslint:disable-next-line:no-unsafe-any
      clearTimeout(this.timeout);
    }

    this.timeout = setTimeout(() => {
      this.timeout = undefined;
      this.checkChangesToSettingsInWorkspace();
      this.checkChangesToSettingsInWorkspaceFolders();
    }, 1000);
  }

  initializeSettings() {
    if (!Array.isArray(vscode_1.workspace.workspaceFolders)) {
      return;
    }

    if (vscode_1.workspace.workspaceFolders.length === 1) {
      const key = this.getWorkspaceKey();
      const currentValue = JSON.stringify(configSettings_1.PythonSettings.getInstance()[this.settingToMonitor]);
      this.oldSettings.set(key, currentValue);
    } else {
      vscode_1.workspace.workspaceFolders.forEach(wkspaceFolder => {
        const key = this.getWorkspaceFolderKey(wkspaceFolder.uri);
        const currentValue = JSON.stringify(configSettings_1.PythonSettings.getInstance(wkspaceFolder.uri)[this.settingToMonitor]);
        this.oldSettings.set(key, currentValue);
      });
    }
  }

  checkChangesToSettingsInWorkspace() {
    if (!Array.isArray(vscode_1.workspace.workspaceFolders) || vscode_1.workspace.workspaceFolders.length === 0) {
      return;
    }

    const newValue = JSON.stringify(configSettings_1.PythonSettings.getInstance()[this.settingToMonitor]);
    this.checkChangesAndNotifiy(vscode_1.ConfigurationTarget.Workspace, vscode_1.workspace.workspaceFolders[0].uri, newValue);
  }

  checkChangesToSettingsInWorkspaceFolders() {
    if (!Array.isArray(vscode_1.workspace.workspaceFolders) || vscode_1.workspace.workspaceFolders.length <= 1) {
      return;
    } // tslint:disable-next-line:no-void-expression


    vscode_1.workspace.workspaceFolders.forEach(folder => this.checkChangesToSettingsInWorkspaceFolder(folder));
  }

  checkChangesToSettingsInWorkspaceFolder(workspaceFolder) {
    const newValue = JSON.stringify(configSettings_1.PythonSettings.getInstance(workspaceFolder.uri)[this.settingToMonitor]);
    this.checkChangesAndNotifiy(vscode_1.ConfigurationTarget.WorkspaceFolder, workspaceFolder.uri, newValue);
  }

  checkChangesAndNotifiy(configTarget, uri, newValue) {
    const key = configTarget === vscode_1.ConfigurationTarget.Workspace ? this.getWorkspaceKey() : this.getWorkspaceFolderKey(uri);

    if (this.oldSettings.has(key)) {
      const oldValue = this.oldSettings.get(key);

      if (oldValue !== newValue) {
        this.oldSettings.set(key, newValue);
        this.emit('change', configTarget, uri);
      }
    } else {
      this.oldSettings.set(key, newValue);
    }
  }

  getWorkspaceKey() {
    // tslint:disable-next-line:no-non-null-assertion
    return vscode_1.workspace.workspaceFolders[0].uri.fsPath;
  }

  getWorkspaceFolderKey(wkspaceFolder) {
    return `${vscode_1.ConfigurationTarget.WorkspaceFolder}:${wkspaceFolder.fsPath}`;
  }

}

exports.ConfigSettingMonitor = ConfigSettingMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ1NldHRpbmdNb25pdG9yLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwidnNjb2RlXzEiLCJjb25maWdTZXR0aW5nc18xIiwiQ29uZmlnU2V0dGluZ01vbml0b3IiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsInNldHRpbmdUb01vbml0b3IiLCJvbGRTZXR0aW5ncyIsIk1hcCIsImluaXRpYWxpemVTZXR0aW5ncyIsIlB5dGhvblNldHRpbmdzIiwiZ2V0SW5zdGFuY2UiLCJvbiIsIm9uQ29uZmlnQ2hhbmdlIiwiZGlzcG9zZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidW5kZWZpbmVkIiwiY2hlY2tDaGFuZ2VzVG9TZXR0aW5nc0luV29ya3NwYWNlIiwiY2hlY2tDaGFuZ2VzVG9TZXR0aW5nc0luV29ya3NwYWNlRm9sZGVycyIsIkFycmF5IiwiaXNBcnJheSIsIndvcmtzcGFjZSIsIndvcmtzcGFjZUZvbGRlcnMiLCJsZW5ndGgiLCJrZXkiLCJnZXRXb3Jrc3BhY2VLZXkiLCJjdXJyZW50VmFsdWUiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0IiwiZm9yRWFjaCIsIndrc3BhY2VGb2xkZXIiLCJnZXRXb3Jrc3BhY2VGb2xkZXJLZXkiLCJ1cmkiLCJuZXdWYWx1ZSIsImNoZWNrQ2hhbmdlc0FuZE5vdGlmaXkiLCJDb25maWd1cmF0aW9uVGFyZ2V0IiwiV29ya3NwYWNlIiwiZm9sZGVyIiwiY2hlY2tDaGFuZ2VzVG9TZXR0aW5nc0luV29ya3NwYWNlRm9sZGVyIiwid29ya3NwYWNlRm9sZGVyIiwiV29ya3NwYWNlRm9sZGVyIiwiY29uZmlnVGFyZ2V0IiwiaGFzIiwib2xkVmFsdWUiLCJnZXQiLCJlbWl0IiwiZnNQYXRoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0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QTlDLEdBQTBELEtBQUtaLGVBQUwsRUFBMUQsR0FBbUYsS0FBS08scUJBQUwsQ0FBMkJDLEdBQTNCLENBQS9GOztBQUNBLFFBQUksS0FBSzVCLFdBQUwsQ0FBaUJzQyxHQUFqQixDQUFxQm5CLEdBQXJCLENBQUosRUFBK0I7QUFDM0IsWUFBTW9CLFFBQVEsR0FBRyxLQUFLdkMsV0FBTCxDQUFpQndDLEdBQWpCLENBQXFCckIsR0FBckIsQ0FBakI7O0FBQ0EsVUFBSW9CLFFBQVEsS0FBS1YsUUFBakIsRUFBMkI7QUFDdkIsYUFBSzdCLFdBQUwsQ0FBaUJ3QixHQUFqQixDQUFxQkwsR0FBckIsRUFBMEJVLFFBQTFCO0FBQ0EsYUFBS1ksSUFBTCxDQUFVLFFBQVYsRUFBb0JKLFlBQXBCLEVBQWtDVCxHQUFsQztBQUNIO0FBQ0osS0FORCxNQU9LO0FBQ0QsV0FBSzVCLFdBQUwsQ0FBaUJ3QixHQUFqQixDQUFxQkwsR0FBckIsRUFBMEJVLFFBQTFCO0FBQ0g7QUFDSjs7QUFDRFQsRUFBQUEsZUFBZSxHQUFHO0FBQ2Q7QUFDQSxXQUFPMUIsUUFBUSxDQUFDc0IsU0FBVCxDQUFtQkMsZ0JBQW5CLENBQW9DLENBQXBDLEVBQXVDVyxHQUF2QyxDQUEyQ2MsTUFBbEQ7QUFDSDs7QUFDRGYsRUFBQUEscUJBQXFCLENBQUNELGFBQUQsRUFBZ0I7QUFDakMsV0FBUSxHQUFFaEMsUUFBUSxDQUFDcUMsbUJBQVQsQ0FBNkJLLGVBQWdCLElBQUdWLGFBQWEsQ0FBQ2dCLE1BQU8sRUFBL0U7QUFDSDs7QUFoRm9EOztBQWtGekRwRCxPQUFPLENBQUNNLG9CQUFSLEdBQStCQSxvQkFBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcbmNvbnN0IGNvbmZpZ1NldHRpbmdzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbmZpZ1NldHRpbmdzXCIpO1xuY2xhc3MgQ29uZmlnU2V0dGluZ01vbml0b3IgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdUb01vbml0b3IpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nVG9Nb25pdG9yID0gc2V0dGluZ1RvTW9uaXRvcjtcbiAgICAgICAgdGhpcy5vbGRTZXR0aW5ncyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplU2V0dGluZ3MoKTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXZvaWQtZXhwcmVzc2lvblxuICAgICAgICBjb25maWdTZXR0aW5nc18xLlB5dGhvblNldHRpbmdzLmdldEluc3RhbmNlKCkub24oJ2NoYW5nZScsICgpID0+IHRoaXMub25Db25maWdDaGFuZ2UoKSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkNvbmZpZ0NoYW5nZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5jaGVja0NoYW5nZXNUb1NldHRpbmdzSW5Xb3Jrc3BhY2UoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tDaGFuZ2VzVG9TZXR0aW5nc0luV29ya3NwYWNlRm9sZGVycygpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVNldHRpbmdzKCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodnNjb2RlXzEud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRXb3Jrc3BhY2VLZXkoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZ1NldHRpbmdzXzEuUHl0aG9uU2V0dGluZ3MuZ2V0SW5zdGFuY2UoKVt0aGlzLnNldHRpbmdUb01vbml0b3JdKTtcbiAgICAgICAgICAgIHRoaXMub2xkU2V0dGluZ3Muc2V0KGtleSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzLmZvckVhY2god2tzcGFjZUZvbGRlciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRXb3Jrc3BhY2VGb2xkZXJLZXkod2tzcGFjZUZvbGRlci51cmkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZ1NldHRpbmdzXzEuUHl0aG9uU2V0dGluZ3MuZ2V0SW5zdGFuY2Uod2tzcGFjZUZvbGRlci51cmkpW3RoaXMuc2V0dGluZ1RvTW9uaXRvcl0pO1xuICAgICAgICAgICAgICAgIHRoaXMub2xkU2V0dGluZ3Muc2V0KGtleSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQ2hhbmdlc1RvU2V0dGluZ3NJbldvcmtzcGFjZSgpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzKSB8fCB2c2NvZGVfMS53b3Jrc3BhY2Uud29ya3NwYWNlRm9sZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZ1NldHRpbmdzXzEuUHl0aG9uU2V0dGluZ3MuZ2V0SW5zdGFuY2UoKVt0aGlzLnNldHRpbmdUb01vbml0b3JdKTtcbiAgICAgICAgdGhpcy5jaGVja0NoYW5nZXNBbmROb3RpZml5KHZzY29kZV8xLkNvbmZpZ3VyYXRpb25UYXJnZXQuV29ya3NwYWNlLCB2c2NvZGVfMS53b3Jrc3BhY2Uud29ya3NwYWNlRm9sZGVyc1swXS51cmksIG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgY2hlY2tDaGFuZ2VzVG9TZXR0aW5nc0luV29ya3NwYWNlRm9sZGVycygpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzKSB8fCB2c2NvZGVfMS53b3Jrc3BhY2Uud29ya3NwYWNlRm9sZGVycy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12b2lkLWV4cHJlc3Npb25cbiAgICAgICAgdnNjb2RlXzEud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4gdGhpcy5jaGVja0NoYW5nZXNUb1NldHRpbmdzSW5Xb3Jrc3BhY2VGb2xkZXIoZm9sZGVyKSk7XG4gICAgfVxuICAgIGNoZWNrQ2hhbmdlc1RvU2V0dGluZ3NJbldvcmtzcGFjZUZvbGRlcih3b3Jrc3BhY2VGb2xkZXIpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBKU09OLnN0cmluZ2lmeShjb25maWdTZXR0aW5nc18xLlB5dGhvblNldHRpbmdzLmdldEluc3RhbmNlKHdvcmtzcGFjZUZvbGRlci51cmkpW3RoaXMuc2V0dGluZ1RvTW9uaXRvcl0pO1xuICAgICAgICB0aGlzLmNoZWNrQ2hhbmdlc0FuZE5vdGlmaXkodnNjb2RlXzEuQ29uZmlndXJhdGlvblRhcmdldC5Xb3Jrc3BhY2VGb2xkZXIsIHdvcmtzcGFjZUZvbGRlci51cmksIG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgY2hlY2tDaGFuZ2VzQW5kTm90aWZpeShjb25maWdUYXJnZXQsIHVyaSwgbmV3VmFsdWUpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gY29uZmlnVGFyZ2V0ID09PSB2c2NvZGVfMS5Db25maWd1cmF0aW9uVGFyZ2V0LldvcmtzcGFjZSA/IHRoaXMuZ2V0V29ya3NwYWNlS2V5KCkgOiB0aGlzLmdldFdvcmtzcGFjZUZvbGRlcktleSh1cmkpO1xuICAgICAgICBpZiAodGhpcy5vbGRTZXR0aW5ncy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLm9sZFNldHRpbmdzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub2xkU2V0dGluZ3Muc2V0KGtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgY29uZmlnVGFyZ2V0LCB1cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbGRTZXR0aW5ncy5zZXQoa2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0V29ya3NwYWNlS2V5KCkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIHJldHVybiB2c2NvZGVfMS53b3Jrc3BhY2Uud29ya3NwYWNlRm9sZGVyc1swXS51cmkuZnNQYXRoO1xuICAgIH1cbiAgICBnZXRXb3Jrc3BhY2VGb2xkZXJLZXkod2tzcGFjZUZvbGRlcikge1xuICAgICAgICByZXR1cm4gYCR7dnNjb2RlXzEuQ29uZmlndXJhdGlvblRhcmdldC5Xb3Jrc3BhY2VGb2xkZXJ9OiR7d2tzcGFjZUZvbGRlci5mc1BhdGh9YDtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ1NldHRpbmdNb25pdG9yID0gQ29uZmlnU2V0dGluZ01vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWdTZXR0aW5nTW9uaXRvci5qcy5tYXAiXX0=