// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const request = require("request");

const types_1 = require("../../ioc/types");

const types_2 = require("../application/types");

let HttpClient = class HttpClient {
  constructor(serviceContainer) {
    const workspaceService = serviceContainer.get(types_2.IWorkspaceService);
    this.requestOptions = {
      proxy: workspaceService.getConfiguration('http').get('proxy', '')
    };
  }

  downloadFile(uri) {
    return request(uri, this.requestOptions);
  }

  getJSON(uri) {
    return new Promise((resolve, reject) => {
      request(uri, this.requestOptions, (ex, response, body) => {
        if (ex) {
          return reject(ex);
        }

        if (response.statusCode !== 200) {
          return reject(new Error(`Failed with status ${response.statusCode}, ${response.statusMessage}, Uri ${uri}`));
        }

        resolve(JSON.parse(body));
      });
    });
  }

};
HttpClient = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IServiceContainer))], HttpClient);
exports.HttpClient = HttpClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBDbGllbnQuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJyZXF1ZXN0IiwidHlwZXNfMSIsInR5cGVzXzIiLCJIdHRwQ2xpZW50IiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwid29ya3NwYWNlU2VydmljZSIsImdldCIsIklXb3Jrc3BhY2VTZXJ2aWNlIiwicmVxdWVzdE9wdGlvbnMiLCJwcm94eSIsImdldENvbmZpZ3VyYXRpb24iLCJkb3dubG9hZEZpbGUiLCJ1cmkiLCJnZXRKU09OIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleCIsInJlc3BvbnNlIiwiYm9keSIsInN0YXR1c0NvZGUiLCJFcnJvciIsInN0YXR1c01lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSVNlcnZpY2VDb250YWluZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFkLElBQTZCLFVBQVVDLFVBQVYsRUFBc0JDLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7QUFDbkYsTUFBSUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWxCO0FBQUEsTUFBMEJDLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUosR0FBUUgsTUFBUixHQUFpQkUsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQUksR0FBR0ssTUFBTSxDQUFDQyx3QkFB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QztBQUM3QixpQkFBT0osTUFBTSxDQUFDLElBQUlLLEtBQUosQ0FBVyxzQkFBcUJILFFBQVEsQ0FBQ0UsVUFBVyxLQUFJRixRQUFRLENBQUNJLGFBQWMsU0FBUVYsR0FBSSxFQUEzRixDQUFELENBQWI7QUFDSDs7QUFDREcsUUFBQUEsT0FBTyxDQUFDUSxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsSUFBWCxDQUFELENBQVA7QUFDSCxPQVJNLENBQVA7QUFTSCxLQVZNLENBQVA7QUFXSDs7QUFwQjZCLENBQWxDO0FBc0JBakIsVUFBVSxHQUFHMUIsVUFBVSxDQUFDLENBQ3BCcUIsV0FBVyxDQUFDNEIsVUFBWixFQURvQixFQUVwQmpDLE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQzZCLE1BQVosQ0FBbUIxQixPQUFPLENBQUMyQixpQkFBM0IsQ0FBSixDQUZhLENBQUQsRUFHcEJ6QixVQUhvQixDQUF2QjtBQUlBUCxPQUFPLENBQUNPLFVBQVIsR0FBcUJBLFVBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKFwicmVxdWVzdFwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW9jL3R5cGVzXCIpO1xuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuLi9hcHBsaWNhdGlvbi90eXBlc1wiKTtcbmxldCBIdHRwQ2xpZW50ID0gY2xhc3MgSHR0cENsaWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZUNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCB3b3Jrc3BhY2VTZXJ2aWNlID0gc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMi5JV29ya3NwYWNlU2VydmljZSk7XG4gICAgICAgIHRoaXMucmVxdWVzdE9wdGlvbnMgPSB7IHByb3h5OiB3b3Jrc3BhY2VTZXJ2aWNlLmdldENvbmZpZ3VyYXRpb24oJ2h0dHAnKS5nZXQoJ3Byb3h5JywgJycpIH07XG4gICAgfVxuICAgIGRvd25sb2FkRmlsZSh1cmkpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QodXJpLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0SlNPTih1cmkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QodXJpLCB0aGlzLnJlcXVlc3RPcHRpb25zLCAoZXgsIHJlc3BvbnNlLCBib2R5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgd2l0aCBzdGF0dXMgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSwgJHtyZXNwb25zZS5zdGF0dXNNZXNzYWdlfSwgVXJpICR7dXJpfWApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKGJvZHkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuSHR0cENsaWVudCA9IF9fZGVjb3JhdGUoW1xuICAgIGludmVyc2lmeV8xLmluamVjdGFibGUoKSxcbiAgICBfX3BhcmFtKDAsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklTZXJ2aWNlQ29udGFpbmVyKSlcbl0sIEh0dHBDbGllbnQpO1xuZXhwb3J0cy5IdHRwQ2xpZW50ID0gSHR0cENsaWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBDbGllbnQuanMubWFwIl19