// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const platform = require("../utils/platform");

const osinfo = require("./osinfo");

let PlatformService = class PlatformService {
  get info() {
    if (!this.cached) {
      this.cached = platform.getInfo();
    }

    return this.cached;
  }

  get pathVariableName() {
    return osinfo.getPathVariableName(this.info);
  }

  get virtualEnvBinName() {
    return osinfo.getVirtualEnvBinName(this.info);
  } // convenience methods


  get isWindows() {
    return platform.isWindows(this.info);
  }

  get isMac() {
    return platform.isMac(this.info);
  }

  get isLinux() {
    return platform.isLinux(this.info);
  }

  get is64bit() {
    return platform.is64bit(this.info);
  }

};
PlatformService = __decorate([inversify_1.injectable()], PlatformService);
exports.PlatformService = PlatformService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXRmb3JtU2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJwbGF0Zm9ybSIsIm9zaW5mbyIsIlBsYXRmb3JtU2VydmljZSIsImluZm8iLCJjYWNoZWQiLCJnZXRJbmZvIiwicGF0aFZhcmlhYmxlTmFtZSIsImdldFBhdGhWYXJpYWJsZU5hbWUiLCJ2aXJ0dWFsRW52QmluTmFtZSIsImdldFZpcnR1YWxFbnZCaW5OYW1lIiwiaXNXaW5kb3dzIiwiaXNNYWMiLCJpc0xpbnV4IiwiaXM2NGJpdCIsImluamVjdGFibGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFkLElBQTZCLFVBQVVDLFVBQVYsRUFBc0JDLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7QUFDbkYsTUFBSUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWxCO0FBQUEsTUFBMEJDLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUosR0FBUUgsTUFBUixHQUFpQkUsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQUksR0FBR0ssTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ1IsTUFBaEMsRUFBd0NDLEdBQXhDLENBQXZCLEdBQXNFQyxJQUFySDtBQUFBLE1BQTJITyxDQUEzSDtBQUNBLE1BQUksT0FBT0MsT0FBUCxLQUFtQixRQUFuQixJQUErQixPQUFPQSxPQUFPLENBQUNDLFFBQWYsS0FBNEIsVUFBL0QsRUFBMkVMLENBQUMsR0FBR0ksT0FBTyxDQUFDQyxRQUFSLENBQWlCWixVQUFqQixFQUE2QkMsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDQyxJQUExQyxDQUFKLENBQTNFLEtBQ0ssS0FBSyxJQUFJVSxDQUFDLEdBQUdiLFVBQVUsQ0FBQ00sTUFBWCxHQUFvQixDQUFqQyxFQUFvQ08sQ0FBQyxJQUFJLENBQXpDLEVBQTRDQSxDQUFDLEVBQTdDLEVBQWlELElBQUlILENBQUMsR0FBR1YsVUFBVSxDQUFDYSxDQUFELENBQWxCLEVBQXVCTixDQUFDLEdBQUcsQ0FBQ0gsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDSCxDQUFELENBQVQsR0FBZUgsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDVCxNQUFELEVBQVNDLEdBQVQsRUFBY0ssQ0FBZCxDQUFULEdBQTRCRyxDQUFDLENBQUNULE1BQUQsRUFBU0MsR0FBVCxDQUE3QyxLQUErREssQ0FBbkU7QUFDN0UsU0FBT0gsQ0FBQyxHQUFHLENBQUosSUFBU0csQ0FBVCxJQUFjQyxNQUFNLENBQUNNLGNBQVAsQ0FBc0JiLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0ssQ0FBbkMsQ0FBZCxFQUFxREEsQ0FBNUQ7QUFDSCxDQUxEOztBQU1BQyxNQUFNLENBQUNNLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFdBQVcsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxJQUFJRyxlQUFlLEdBQUcsTUFBTUEsZUFBTixDQUFzQjtBQUNoQyxNQUFKQyxJQUFJLEdBQUc7QUFDUCxRQUFJLENBQUMsS0FBS0MsTUFBVixFQUFrQjtBQUNkLFdBQUtBLE1BQUwsR0FBY0osUUFBUSxDQUFDSyxPQUFULEVBQWQ7QUFDSDs7QUFDRCxXQUFPLEtBQUtELE1BQVo7QUFDSDs7QUFDbUIsTUFBaEJFLGdCQUFnQixHQUFHO0FBQ25CLFdBQU9MLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsS0FBS0osSUFBaEMsQ0FBUDtBQUNIOztBQUNvQixNQUFqQkssaUJBQWlCLEdBQUc7QUFDcEIsV0FBT1AsTUFBTSxDQUFDUSxvQkFBUCxDQUE0QixLQUFLTixJQUFqQyxDQUFQO0FBQ0gsR0FadUMsQ0FheEM7OztBQUNhLE1BQVRPLFNBQVMsR0FBRztBQUNaLFdBQU9WLFFBQVEsQ0FBQ1UsU0FBVCxDQUFtQixLQUFLUCxJQUF4QixDQUFQO0FBQ0g7O0FBQ1EsTUFBTFEsS0FBSyxHQUFHO0FBQ1IsV0FBT1gsUUFBUSxDQUFDVyxLQUFULENBQWUsS0FBS1IsSUFBcEIsQ0FBUDtBQUNIOztBQUNVLE1BQVBTLE9BQU8sR0FBRztBQUNWLFdBQU9aLFFBQVEsQ0FBQ1ksT0FBVCxDQUFpQixLQUFLVCxJQUF0QixDQUFQO0FBQ0g7O0FBQ1UsTUFBUFUsT0FBTyxHQUFHO0FBQ1YsV0FBT2IsUUFBUSxDQUFDYSxPQUFULENBQWlCLEtBQUtWLElBQXRCLENBQVA7QUFDSDs7QUF6QnVDLENBQTVDO0FBMkJBRCxlQUFlLEdBQUd0QixVQUFVLENBQUMsQ0FDekJrQixXQUFXLENBQUNnQixVQUFaLEVBRHlCLENBQUQsRUFFekJaLGVBRnlCLENBQTVCO0FBR0FOLE9BQU8sQ0FBQ00sZUFBUixHQUEwQkEsZUFBMUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0JztcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcbmNvbnN0IHBsYXRmb3JtID0gcmVxdWlyZShcIi4uL3V0aWxzL3BsYXRmb3JtXCIpO1xuY29uc3Qgb3NpbmZvID0gcmVxdWlyZShcIi4vb3NpbmZvXCIpO1xubGV0IFBsYXRmb3JtU2VydmljZSA9IGNsYXNzIFBsYXRmb3JtU2VydmljZSB7XG4gICAgZ2V0IGluZm8oKSB7XG4gICAgICAgIGlmICghdGhpcy5jYWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkID0gcGxhdGZvcm0uZ2V0SW5mbygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZDtcbiAgICB9XG4gICAgZ2V0IHBhdGhWYXJpYWJsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBvc2luZm8uZ2V0UGF0aFZhcmlhYmxlTmFtZSh0aGlzLmluZm8pO1xuICAgIH1cbiAgICBnZXQgdmlydHVhbEVudkJpbk5hbWUoKSB7XG4gICAgICAgIHJldHVybiBvc2luZm8uZ2V0VmlydHVhbEVudkJpbk5hbWUodGhpcy5pbmZvKTtcbiAgICB9XG4gICAgLy8gY29udmVuaWVuY2UgbWV0aG9kc1xuICAgIGdldCBpc1dpbmRvd3MoKSB7XG4gICAgICAgIHJldHVybiBwbGF0Zm9ybS5pc1dpbmRvd3ModGhpcy5pbmZvKTtcbiAgICB9XG4gICAgZ2V0IGlzTWFjKCkge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm0uaXNNYWModGhpcy5pbmZvKTtcbiAgICB9XG4gICAgZ2V0IGlzTGludXgoKSB7XG4gICAgICAgIHJldHVybiBwbGF0Zm9ybS5pc0xpbnV4KHRoaXMuaW5mbyk7XG4gICAgfVxuICAgIGdldCBpczY0Yml0KCkge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm0uaXM2NGJpdCh0aGlzLmluZm8pO1xuICAgIH1cbn07XG5QbGF0Zm9ybVNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKClcbl0sIFBsYXRmb3JtU2VydmljZSk7XG5leHBvcnRzLlBsYXRmb3JtU2VydmljZSA9IFBsYXRmb3JtU2VydmljZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsYXRmb3JtU2VydmljZS5qcy5tYXAiXX0=