// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const path = require("path");

const vscode_1 = require("vscode");

function getCommandPromptLocation(currentProcess) {
  // https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/terminal/electron-browser/terminalService.ts#L218
  // Determine the correct System32 path. We want to point to Sysnative
  // when the 32-bit version of VS Code is running on a 64-bit machine.
  // The reason for this is because PowerShell's important PSReadline
  // module doesn't work if this is not the case. See #27915.
  const is32ProcessOn64Windows = currentProcess.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');
  const system32Path = path.join(currentProcess.env.windir, is32ProcessOn64Windows ? 'Sysnative' : 'System32');
  return path.join(system32Path, 'cmd.exe');
}

exports.getCommandPromptLocation = getCommandPromptLocation;

function useCommandPromptAsDefaultShell(currentProcess, configService) {
  return __awaiter(this, void 0, void 0, function* () {
    const cmdPromptLocation = getCommandPromptLocation(currentProcess);
    yield configService.updateSectionSetting('terminal', 'integrated.shell.windows', cmdPromptLocation, undefined, vscode_1.ConfigurationTarget.Global);
  });
}

exports.useCommandPromptAsDefaultShell = useCommandPromptAsDefaultShell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1hbmRQcm9tcHQuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInBhdGgiLCJyZXF1aXJlIiwidnNjb2RlXzEiLCJnZXRDb21tYW5kUHJvbXB0TG9jYXRpb24iLCJjdXJyZW50UHJvY2VzcyIsImlzMzJQcm9jZXNzT242NFdpbmRvd3MiLCJlbnYiLCJoYXNPd25Qcm9wZXJ0eSIsInN5c3RlbTMyUGF0aCIsImpvaW4iLCJ3aW5kaXIiLCJ1c2VDb21tYW5kUHJvbXB0QXNEZWZhdWx0U2hlbGwiLCJjb25maWdTZXJ2aWNlIiwiY21kUHJvbXB0TG9jYXRpb24iLCJ1cGRhdGVTZWN0aW9uU2V0dGluZyIsInVuZGVmaW5lZCIsIkNvbmZpZ3VyYXRpb25UYXJnZXQiLCJHbG9iYWwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1ZLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxTQUFTRSx3QkFBVCxDQUFrQ0MsY0FBbEMsRUFBa0Q7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1DLHNCQUFzQixHQUFHRCxjQUFjLENBQUNFLEdBQWYsQ0FBbUJDLGNBQW5CLENBQWtDLHdCQUFsQyxDQUEvQjtBQUNBLFFBQU1DLFlBQVksR0FBR1IsSUFBSSxDQUFDUyxJQUFMLENBQVVMLGNBQWMsQ0FBQ0UsR0FBZixDQUFtQkksTUFBN0IsRUFBcUNMLHNCQUFzQixHQUFHLFdBQUgsR0FBaUIsVUFBNUUsQ0FBckI7QUFDQSxTQUFPTCxJQUFJLENBQUNTLElBQUwsQ0FBVUQsWUFBVixFQUF3QixTQUF4QixDQUFQO0FBQ0g7O0FBQ0RULE9BQU8sQ0FBQ0ksd0JBQVIsR0FBbUNBLHdCQUFuQzs7QUFDQSxTQUFTUSw4QkFBVCxDQUF3Q1AsY0FBeEMsRUFBd0RRLGFBQXhELEVBQXVFO0FBQ25FLFNBQU9qQyxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRCxVQUFNa0MsaUJBQWlCLEdBQUdWLHdCQUF3QixDQUFDQyxjQUFELENBQWxEO0FBQ0EsVUFBTVEsYUFBYSxDQUFDRSxvQkFBZCxDQUFtQyxVQUFuQyxFQUErQywwQkFBL0MsRUFBMkVELGlCQUEzRSxFQUE4RkUsU0FBOUYsRUFBeUdiLFFBQVEsQ0FBQ2MsbUJBQVQsQ0FBNkJDLE1BQXRJLENBQU47QUFDSCxHQUhlLENBQWhCO0FBSUg7O0FBQ0RsQixPQUFPLENBQUNZLDhCQUFSLEdBQXlDQSw4QkFBekMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0JztcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xuZnVuY3Rpb24gZ2V0Q29tbWFuZFByb21wdExvY2F0aW9uKGN1cnJlbnRQcm9jZXNzKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC92c2NvZGUvYmxvYi9tYXN0ZXIvc3JjL3ZzL3dvcmtiZW5jaC9wYXJ0cy90ZXJtaW5hbC9lbGVjdHJvbi1icm93c2VyL3Rlcm1pbmFsU2VydmljZS50cyNMMjE4XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBjb3JyZWN0IFN5c3RlbTMyIHBhdGguIFdlIHdhbnQgdG8gcG9pbnQgdG8gU3lzbmF0aXZlXG4gICAgLy8gd2hlbiB0aGUgMzItYml0IHZlcnNpb24gb2YgVlMgQ29kZSBpcyBydW5uaW5nIG9uIGEgNjQtYml0IG1hY2hpbmUuXG4gICAgLy8gVGhlIHJlYXNvbiBmb3IgdGhpcyBpcyBiZWNhdXNlIFBvd2VyU2hlbGwncyBpbXBvcnRhbnQgUFNSZWFkbGluZVxuICAgIC8vIG1vZHVsZSBkb2Vzbid0IHdvcmsgaWYgdGhpcyBpcyBub3QgdGhlIGNhc2UuIFNlZSAjMjc5MTUuXG4gICAgY29uc3QgaXMzMlByb2Nlc3NPbjY0V2luZG93cyA9IGN1cnJlbnRQcm9jZXNzLmVudi5oYXNPd25Qcm9wZXJ0eSgnUFJPQ0VTU09SX0FSQ0hJVEVXNjQzMicpO1xuICAgIGNvbnN0IHN5c3RlbTMyUGF0aCA9IHBhdGguam9pbihjdXJyZW50UHJvY2Vzcy5lbnYud2luZGlyLCBpczMyUHJvY2Vzc09uNjRXaW5kb3dzID8gJ1N5c25hdGl2ZScgOiAnU3lzdGVtMzInKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKHN5c3RlbTMyUGF0aCwgJ2NtZC5leGUnKTtcbn1cbmV4cG9ydHMuZ2V0Q29tbWFuZFByb21wdExvY2F0aW9uID0gZ2V0Q29tbWFuZFByb21wdExvY2F0aW9uO1xuZnVuY3Rpb24gdXNlQ29tbWFuZFByb21wdEFzRGVmYXVsdFNoZWxsKGN1cnJlbnRQcm9jZXNzLCBjb25maWdTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgY21kUHJvbXB0TG9jYXRpb24gPSBnZXRDb21tYW5kUHJvbXB0TG9jYXRpb24oY3VycmVudFByb2Nlc3MpO1xuICAgICAgICB5aWVsZCBjb25maWdTZXJ2aWNlLnVwZGF0ZVNlY3Rpb25TZXR0aW5nKCd0ZXJtaW5hbCcsICdpbnRlZ3JhdGVkLnNoZWxsLndpbmRvd3MnLCBjbWRQcm9tcHRMb2NhdGlvbiwgdW5kZWZpbmVkLCB2c2NvZGVfMS5Db25maWd1cmF0aW9uVGFyZ2V0Lkdsb2JhbCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnVzZUNvbW1hbmRQcm9tcHRBc0RlZmF1bHRTaGVsbCA9IHVzZUNvbW1hbmRQcm9tcHRBc0RlZmF1bHRTaGVsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1hbmRQcm9tcHQuanMubWFwIl19