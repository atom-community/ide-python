/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const Path = require("path");

const Types = require("../utils/sysTypes");
/* tslint:disable:rule1 no-any no-unnecessary-callback-wrapper jsdoc-format no-for-in prefer-const no-increment-decrement */


class AbstractSystemVariables {
  // tslint:disable-next-line:no-any
  resolve(value) {
    if (Types.isString(value)) {
      return this.__resolveString(value);
    } else if (Types.isArray(value)) {
      return this.__resolveArray(value);
    } else if (Types.isObject(value)) {
      return this.__resolveLiteral(value);
    }

    return value;
  } // tslint:disable-next-line:no-any


  resolveAny(value) {
    if (Types.isString(value)) {
      return this.__resolveString(value);
    } else if (Types.isArray(value)) {
      return this.__resolveAnyArray(value);
    } else if (Types.isObject(value)) {
      return this.__resolveAnyLiteral(value);
    }

    return value;
  }

  __resolveString(value) {
    const regexp = /\$\{(.*?)\}/g;
    return value.replace(regexp, (match, name) => {
      // tslint:disable-next-line:no-any
      const newValue = this[name];

      if (Types.isString(newValue)) {
        return newValue;
      } else {
        return match && (match.indexOf('env.') > 0 || match.indexOf('env:') > 0) ? '' : match;
      }
    });
  }

  __resolveLiteral(values) {
    const result = Object.create(null);
    Object.keys(values).forEach(key => {
      const value = values[key]; // tslint:disable-next-line:no-any

      result[key] = this.resolve(value);
    });
    return result;
  } // tslint:disable-next-line:no-any


  __resolveAnyLiteral(values) {
    const result = Object.create(null);
    Object.keys(values).forEach(key => {
      const value = values[key]; // tslint:disable-next-line:no-any

      result[key] = this.resolveAny(value);
    });
    return result;
  }

  __resolveArray(value) {
    return value.map(s => this.__resolveString(s));
  } // tslint:disable-next-line:no-any


  __resolveAnyArray(value) {
    return value.map(s => this.resolveAny(s));
  }

}

exports.AbstractSystemVariables = AbstractSystemVariables;

class SystemVariables extends AbstractSystemVariables {
  constructor(workspaceFolder) {
    super();
    this._workspaceFolder = typeof workspaceFolder === 'string' ? workspaceFolder : __dirname;
    this._workspaceFolderName = Path.basename(this._workspaceFolder);
    Object.keys(process.env).forEach(key => {
      this[`env:${key}`] = this[`env.${key}`] = process.env[key];
    });
  }

  get cwd() {
    return this.workspaceFolder;
  }

  get workspaceRoot() {
    return this._workspaceFolder;
  }

  get workspaceFolder() {
    return this._workspaceFolder;
  }

  get workspaceRootFolderName() {
    return this._workspaceFolderName;
  }

  get workspaceFolderBasename() {
    return this._workspaceFolderName;
  }

}

exports.SystemVariables = SystemVariables;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5c3RlbVZhcmlhYmxlcy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBhdGgiLCJyZXF1aXJlIiwiVHlwZXMiLCJBYnN0cmFjdFN5c3RlbVZhcmlhYmxlcyIsInJlc29sdmUiLCJpc1N0cmluZyIsIl9fcmVzb2x2ZVN0cmluZyIsImlzQXJyYXkiLCJfX3Jlc29sdmVBcnJheSIsImlzT2JqZWN0IiwiX19yZXNvbHZlTGl0ZXJhbCIsInJlc29sdmVBbnkiLCJfX3Jlc29sdmVBbnlBcnJheSIsIl9fcmVzb2x2ZUFueUxpdGVyYWwiLCJyZWdleHAiLCJyZXBsYWNlIiwibWF0Y2giLCJuYW1lIiwibmV3VmFsdWUiLCJpbmRleE9mIiwidmFsdWVzIiwicmVzdWx0IiwiY3JlYXRlIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJtYXAiLCJzIiwiU3lzdGVtVmFyaWFibGVzIiwiY29uc3RydWN0b3IiLCJ3b3Jrc3BhY2VGb2xkZXIiLCJfd29ya3NwYWNlRm9sZGVyIiwiX19kaXJuYW1lIiwiX3dvcmtzcGFjZUZvbGRlck5hbWUiLCJiYXNlbmFtZSIsInByb2Nlc3MiLCJlbnYiLCJjd2QiLCJ3b3Jrc3BhY2VSb290Iiwid29ya3NwYWNlUm9vdEZvbGRlck5hbWUiLCJ3b3Jrc3BhY2VGb2xkZXJCYXNlbmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQXJCO0FBQ0E7OztBQUNBLE1BQU1FLHVCQUFOLENBQThCO0FBQzFCO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0wsS0FBRCxF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QXVCLEdBQUc7QUFDMUIsV0FBTyxLQUFLUCxvQkFBWjtBQUNIOztBQXZCaUQ7O0FBeUJ0RG5DLE9BQU8sQ0FBQzhCLGVBQVIsR0FBMEJBLGVBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBQYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoXCIuLi91dGlscy9zeXNUeXBlc1wiKTtcbi8qIHRzbGludDpkaXNhYmxlOnJ1bGUxIG5vLWFueSBuby11bm5lY2Vzc2FyeS1jYWxsYmFjay13cmFwcGVyIGpzZG9jLWZvcm1hdCBuby1mb3ItaW4gcHJlZmVyLWNvbnN0IG5vLWluY3JlbWVudC1kZWNyZW1lbnQgKi9cbmNsYXNzIEFic3RyYWN0U3lzdGVtVmFyaWFibGVzIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoVHlwZXMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3Jlc29sdmVTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFR5cGVzLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3Jlc29sdmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVHlwZXMuaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3Jlc29sdmVMaXRlcmFsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICByZXNvbHZlQW55KHZhbHVlKSB7XG4gICAgICAgIGlmIChUeXBlcy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcmVzb2x2ZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVHlwZXMuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcmVzb2x2ZUFueUFycmF5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChUeXBlcy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcmVzb2x2ZUFueUxpdGVyYWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgX19yZXNvbHZlU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4cCA9IC9cXCRcXHsoLio/KVxcfS9nO1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShyZWdleHAsIChtYXRjaCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzW25hbWVdO1xuICAgICAgICAgICAgaWYgKFR5cGVzLmlzU3RyaW5nKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaCAmJiAobWF0Y2guaW5kZXhPZignZW52LicpID4gMCB8fCBtYXRjaC5pbmRleE9mKCdlbnY6JykgPiAwKSA/ICcnIDogbWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfX3Jlc29sdmVMaXRlcmFsKHZhbHVlcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHRoaXMucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgX19yZXNvbHZlQW55TGl0ZXJhbCh2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1trZXldO1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLnJlc29sdmVBbnkodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX19yZXNvbHZlQXJyYXkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChzID0+IHRoaXMuX19yZXNvbHZlU3RyaW5nKHMpKTtcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIF9fcmVzb2x2ZUFueUFycmF5KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXAocyA9PiB0aGlzLnJlc29sdmVBbnkocykpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RTeXN0ZW1WYXJpYWJsZXMgPSBBYnN0cmFjdFN5c3RlbVZhcmlhYmxlcztcbmNsYXNzIFN5c3RlbVZhcmlhYmxlcyBleHRlbmRzIEFic3RyYWN0U3lzdGVtVmFyaWFibGVzIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3Jrc3BhY2VGb2xkZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fd29ya3NwYWNlRm9sZGVyID0gdHlwZW9mIHdvcmtzcGFjZUZvbGRlciA9PT0gJ3N0cmluZycgPyB3b3Jrc3BhY2VGb2xkZXIgOiBfX2Rpcm5hbWU7XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUZvbGRlck5hbWUgPSBQYXRoLmJhc2VuYW1lKHRoaXMuX3dvcmtzcGFjZUZvbGRlcik7XG4gICAgICAgIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICB0aGlzW2BlbnY6JHtrZXl9YF0gPSB0aGlzW2BlbnYuJHtrZXl9YF0gPSBwcm9jZXNzLmVudltrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGN3ZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud29ya3NwYWNlRm9sZGVyO1xuICAgIH1cbiAgICBnZXQgd29ya3NwYWNlUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzcGFjZUZvbGRlcjtcbiAgICB9XG4gICAgZ2V0IHdvcmtzcGFjZUZvbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzcGFjZUZvbGRlcjtcbiAgICB9XG4gICAgZ2V0IHdvcmtzcGFjZVJvb3RGb2xkZXJOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NwYWNlRm9sZGVyTmFtZTtcbiAgICB9XG4gICAgZ2V0IHdvcmtzcGFjZUZvbGRlckJhc2VuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NwYWNlRm9sZGVyTmFtZTtcbiAgICB9XG59XG5leHBvcnRzLlN5c3RlbVZhcmlhYmxlcyA9IFN5c3RlbVZhcmlhYmxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5c3RlbVZhcmlhYmxlcy5qcy5tYXAiXX0=