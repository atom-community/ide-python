"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const languageServerHashes_1 = require("./languageServer/languageServerHashes");

var PlatformName;

(function (PlatformName) {
  PlatformName["Windows32Bit"] = "win-x86";
  PlatformName["Windows64Bit"] = "win-x64";
  PlatformName["Mac64Bit"] = "osx-x64";
  PlatformName["Linux64Bit"] = "linux-x64";
})(PlatformName = exports.PlatformName || (exports.PlatformName = {}));

var PlatformLSExecutables;

(function (PlatformLSExecutables) {
  PlatformLSExecutables["Windows"] = "Microsoft.Python.LanguageServer.exe";
  PlatformLSExecutables["MacOS"] = "Microsoft.Python.LanguageServer";
  PlatformLSExecutables["Linux"] = "Microsoft.Python.LanguageServer";
})(PlatformLSExecutables = exports.PlatformLSExecutables || (exports.PlatformLSExecutables = {}));

class PlatformData {
  constructor(platform, fs) {
    this.platform = platform;
  }

  getPlatformName() {
    if (this.platform.isWindows) {
      return this.platform.is64bit ? PlatformName.Windows64Bit : PlatformName.Windows32Bit;
    }

    if (this.platform.isMac) {
      return PlatformName.Mac64Bit;
    }

    if (this.platform.isLinux) {
      if (!this.platform.is64bit) {
        throw new Error('Microsoft Python Language Server does not support 32-bit Linux.');
      }

      return PlatformName.Linux64Bit;
    }

    throw new Error('Unknown OS platform.');
  }

  getEngineDllName() {
    return 'Microsoft.Python.LanguageServer.dll';
  }

  getEngineExecutableName() {
    if (this.platform.isWindows) {
      return PlatformLSExecutables.Windows;
    } else if (this.platform.isLinux) {
      return PlatformLSExecutables.Linux;
    } else if (this.platform.isMac) {
      return PlatformLSExecutables.MacOS;
    } else {
      return 'unknown-platform';
    }
  }

  getExpectedHash() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.platform.isWindows) {
        return this.platform.is64bit ? languageServerHashes_1.language_server_win_x64_sha512 : languageServerHashes_1.language_server_win_x86_sha512;
      }

      if (this.platform.isMac) {
        return languageServerHashes_1.language_server_osx_x64_sha512;
      }

      if (this.platform.isLinux && this.platform.is64bit) {
        return languageServerHashes_1.language_server_linux_x64_sha512;
      }

      throw new Error('Unknown platform.');
    });
  }

}

exports.PlatformData = PlatformData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXRmb3JtRGF0YS5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwibGFuZ3VhZ2VTZXJ2ZXJIYXNoZXNfMSIsInJlcXVpcmUiLCJQbGF0Zm9ybU5hbWUiLCJQbGF0Zm9ybUxTRXhlY3V0YWJsZXMiLCJQbGF0Zm9ybURhdGEiLCJjb25zdHJ1Y3RvciIsInBsYXRmb3JtIiwiZnMiLCJnZXRQbGF0Zm9ybU5hbWUiLCJpc1dpbmRvd3MiLCJpczY0Yml0IiwiV2luZG93czY0Qml0IiwiV2luZG93czMyQml0IiwiaXNNYWMiLCJNYWM2NEJpdCIsImlzTGludXgiLCJFcnJvciIsIkxpbnV4NjRCaXQiLCJnZXRFbmdpbmVEbGxOYW1lIiwiZ2V0RW5naW5lRXhlY3V0YWJsZU5hbWUiLCJXaW5kb3dzIiwiTGludXgiLCJNYWNPUyIsImdldEV4cGVjdGVkSGFzaCIsImxhbmd1YWdlX3NlcnZlcl93aW5feDY0X3NoYTUxMiIsImxhbmd1YWdlX3NlcnZlcl93aW5feDg2X3NoYTUxMiIsImxhbmd1YWdlX3NlcnZlcl9vc3hfeDY0X3NoYTUxMiIsImxhbmd1YWdlX3NlcnZlcl9saW51eF94NjRfc2hhNTEyIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVD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LFVBQUksS0FBS3BCLFFBQUwsQ0FBY1MsT0FBZCxJQUF5QixLQUFLVCxRQUFMLENBQWNJLE9BQTNDLEVBQW9EO0FBQ2hELGVBQU9WLHNCQUFzQixDQUFDMkIsZ0NBQTlCO0FBQ0g7O0FBQ0QsWUFBTSxJQUFJWCxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNILEtBWGUsQ0FBaEI7QUFZSDs7QUFqRGM7O0FBbURuQmpCLE9BQU8sQ0FBQ0ssWUFBUixHQUF1QkEsWUFBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBsYW5ndWFnZVNlcnZlckhhc2hlc18xID0gcmVxdWlyZShcIi4vbGFuZ3VhZ2VTZXJ2ZXIvbGFuZ3VhZ2VTZXJ2ZXJIYXNoZXNcIik7XG52YXIgUGxhdGZvcm1OYW1lO1xuKGZ1bmN0aW9uIChQbGF0Zm9ybU5hbWUpIHtcbiAgICBQbGF0Zm9ybU5hbWVbXCJXaW5kb3dzMzJCaXRcIl0gPSBcIndpbi14ODZcIjtcbiAgICBQbGF0Zm9ybU5hbWVbXCJXaW5kb3dzNjRCaXRcIl0gPSBcIndpbi14NjRcIjtcbiAgICBQbGF0Zm9ybU5hbWVbXCJNYWM2NEJpdFwiXSA9IFwib3N4LXg2NFwiO1xuICAgIFBsYXRmb3JtTmFtZVtcIkxpbnV4NjRCaXRcIl0gPSBcImxpbnV4LXg2NFwiO1xufSkoUGxhdGZvcm1OYW1lID0gZXhwb3J0cy5QbGF0Zm9ybU5hbWUgfHwgKGV4cG9ydHMuUGxhdGZvcm1OYW1lID0ge30pKTtcbnZhciBQbGF0Zm9ybUxTRXhlY3V0YWJsZXM7XG4oZnVuY3Rpb24gKFBsYXRmb3JtTFNFeGVjdXRhYmxlcykge1xuICAgIFBsYXRmb3JtTFNFeGVjdXRhYmxlc1tcIldpbmRvd3NcIl0gPSBcIk1pY3Jvc29mdC5QeXRob24uTGFuZ3VhZ2VTZXJ2ZXIuZXhlXCI7XG4gICAgUGxhdGZvcm1MU0V4ZWN1dGFibGVzW1wiTWFjT1NcIl0gPSBcIk1pY3Jvc29mdC5QeXRob24uTGFuZ3VhZ2VTZXJ2ZXJcIjtcbiAgICBQbGF0Zm9ybUxTRXhlY3V0YWJsZXNbXCJMaW51eFwiXSA9IFwiTWljcm9zb2Z0LlB5dGhvbi5MYW5ndWFnZVNlcnZlclwiO1xufSkoUGxhdGZvcm1MU0V4ZWN1dGFibGVzID0gZXhwb3J0cy5QbGF0Zm9ybUxTRXhlY3V0YWJsZXMgfHwgKGV4cG9ydHMuUGxhdGZvcm1MU0V4ZWN1dGFibGVzID0ge30pKTtcbmNsYXNzIFBsYXRmb3JtRGF0YSB7XG4gICAgY29uc3RydWN0b3IocGxhdGZvcm0sIGZzKSB7XG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSBwbGF0Zm9ybTtcbiAgICB9XG4gICAgZ2V0UGxhdGZvcm1OYW1lKCkge1xuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXRmb3JtLmlzNjRiaXQgPyBQbGF0Zm9ybU5hbWUuV2luZG93czY0Qml0IDogUGxhdGZvcm1OYW1lLldpbmRvd3MzMkJpdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc01hYykge1xuICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtTmFtZS5NYWM2NEJpdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc0xpbnV4KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGxhdGZvcm0uaXM2NGJpdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWljcm9zb2Z0IFB5dGhvbiBMYW5ndWFnZSBTZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCAzMi1iaXQgTGludXguJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUGxhdGZvcm1OYW1lLkxpbnV4NjRCaXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIE9TIHBsYXRmb3JtLicpO1xuICAgIH1cbiAgICBnZXRFbmdpbmVEbGxOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01pY3Jvc29mdC5QeXRob24uTGFuZ3VhZ2VTZXJ2ZXIuZGxsJztcbiAgICB9XG4gICAgZ2V0RW5naW5lRXhlY3V0YWJsZU5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtLmlzV2luZG93cykge1xuICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtTFNFeGVjdXRhYmxlcy5XaW5kb3dzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGxhdGZvcm0uaXNMaW51eCkge1xuICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtTFNFeGVjdXRhYmxlcy5MaW51eDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBsYXRmb3JtLmlzTWFjKSB7XG4gICAgICAgICAgICByZXR1cm4gUGxhdGZvcm1MU0V4ZWN1dGFibGVzLk1hY09TO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICd1bmtub3duLXBsYXRmb3JtJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRFeHBlY3RlZEhhc2goKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybS5pczY0Yml0ID8gbGFuZ3VhZ2VTZXJ2ZXJIYXNoZXNfMS5sYW5ndWFnZV9zZXJ2ZXJfd2luX3g2NF9zaGE1MTIgOiBsYW5ndWFnZVNlcnZlckhhc2hlc18xLmxhbmd1YWdlX3NlcnZlcl93aW5feDg2X3NoYTUxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXRmb3JtLmlzTWFjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlU2VydmVySGFzaGVzXzEubGFuZ3VhZ2Vfc2VydmVyX29zeF94NjRfc2hhNTEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGxhdGZvcm0uaXNMaW51eCAmJiB0aGlzLnBsYXRmb3JtLmlzNjRiaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VTZXJ2ZXJIYXNoZXNfMS5sYW5ndWFnZV9zZXJ2ZXJfbGludXhfeDY0X3NoYTUxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwbGF0Zm9ybS4nKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGF0Zm9ybURhdGEgPSBQbGF0Zm9ybURhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF0Zm9ybURhdGEuanMubWFwIl19