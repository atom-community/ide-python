// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../common/application/types");

const constants_1 = require("../common/constants");

require("../common/extensions");

const types_2 = require("../common/platform/types");

const types_3 = require("../common/types");

const platform_1 = require("../common/utils/platform");

const types_4 = require("../ioc/types");

const telemetry_1 = require("../telemetry");

const constants_2 = require("../telemetry/constants");

const types_5 = require("./types");

const jediEnabledSetting = 'jediEnabled';
const LS_MIN_OS_VERSIONS = [// See: https://code.visualstudio.com/docs/supporting/requirements
[platform_1.OSType.OSX, platform_1.OSDistro.Unknown, '10.12'], [platform_1.OSType.Windows, platform_1.OSDistro.Unknown, '6.1'], // tslint:disable-next-line: no-suspicious-comment
// TODO: Are these right?
[platform_1.OSType.Linux, platform_1.OSDistro.Ubuntu, '14.04'], [platform_1.OSType.Linux, platform_1.OSDistro.Debian, '7'], [platform_1.OSType.Linux, platform_1.OSDistro.RHEL, '7'], [platform_1.OSType.Linux, platform_1.OSDistro.CentOS, '7'], [platform_1.OSType.Linux, platform_1.OSDistro.Fedora, '23']];
let ExtensionActivationService = class ExtensionActivationService {
  constructor(serviceContainer) {
    this.serviceContainer = serviceContainer;
    this.workspaceService = this.serviceContainer.get(types_1.IWorkspaceService);
    this.output = this.serviceContainer.get(types_3.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
    this.appShell = this.serviceContainer.get(types_1.IApplicationShell);
    const disposables = serviceContainer.get(types_3.IDisposableRegistry);
    disposables.push(this);
    disposables.push(this.workspaceService.onDidChangeConfiguration(this.onDidChangeConfiguration.bind(this)));
  }

  activate() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.currentActivator) {
        return;
      }

      let jedi = this.useJedi();

      if (!jedi && !isLSSupported(this.serviceContainer)) {
        this.appShell.showWarningMessage('The Python Language Server is not supported on your platform.'); // tslint:disable-next-line:no-suspicious-comment
        // TODO: Only send once (ever)?

        telemetry_1.sendTelemetryEvent(constants_2.PYTHON_LANGUAGE_SERVER_PLATFORM_NOT_SUPPORTED);
        jedi = true;
      }

      yield this.logStartup(jedi);
      const activatorName = jedi ? types_5.ExtensionActivators.Jedi : types_5.ExtensionActivators.DotNet;
      const activator = this.serviceContainer.get(types_5.IExtensionActivator, activatorName);
      this.currentActivator = {
        jedi,
        activator
      };
      yield activator.activate();
    });
  }

  dispose() {
    if (this.currentActivator) {
      this.currentActivator.activator.deactivate().ignoreErrors();
    }
  }

  logStartup(isJedi) {
    return __awaiter(this, void 0, void 0, function* () {
      const outputLine = isJedi ? 'Starting Jedi Python language engine.' : 'Starting Microsoft Python language server.';
      this.output.appendLine(outputLine);
    });
  }

  onDidChangeConfiguration(event) {
    return __awaiter(this, void 0, void 0, function* () {
      const workspacesUris = this.workspaceService.hasWorkspaceFolders ? this.workspaceService.workspaceFolders.map(workspace => workspace.uri) : [undefined];

      if (workspacesUris.findIndex(uri => event.affectsConfiguration(`python.${jediEnabledSetting}`, uri)) === -1) {
        return;
      }

      const jedi = this.useJedi();

      if (this.currentActivator && this.currentActivator.jedi === jedi) {
        return;
      }

      const item = yield this.appShell.showInformationMessage('Please reload the window switching between language engines.', 'Reload');

      if (item === 'Reload') {
        this.serviceContainer.get(types_1.ICommandManager).executeCommand('workbench.action.reloadWindow');
      }
    });
  }

  useJedi() {
    if (constants_1.isLanguageServerTest()) {
      return false;
    }

    const workspacesUris = this.workspaceService.hasWorkspaceFolders ? this.workspaceService.workspaceFolders.map(item => item.uri) : [undefined];
    const configuraionService = this.serviceContainer.get(types_3.IConfigurationService);
    return workspacesUris.filter(uri => configuraionService.getSettings(uri).jediEnabled).length > 0;
  }

};
ExtensionActivationService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_4.IServiceContainer))], ExtensionActivationService);
exports.ExtensionActivationService = ExtensionActivationService;

function isLSSupported(services) {
  const platform = services.get(types_2.IPlatformService);
  let minVer = '';

  for (const [osType, distro, ver] of LS_MIN_OS_VERSIONS) {
    if (platform.info.type === osType && platform.info.distro === distro) {
      minVer = ver;
      break;
    }
  }

  if (minVer === '') {
    return true;
  }

  minVer = normalizeVersion(minVer);
  return platform.info.version.compare(minVer) >= 0;
}

function normalizeVersion(ver) {
  ver = ver.replace(/\.00*/, '.');

  if (/^\d\d*$/.test(ver)) {
    return `${ver}.0.0`;
  } else if (/^\d\d*\.\d\d*$/.test(ver)) {
    return `${ver}.0`;
  } else {
    return ver;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2YXRpb25TZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImV4cG9ydHMiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwiY29uc3RhbnRzXzEiLCJ0eXBlc18yIiwidHlwZXNfMyIsInBsYXRmb3JtXzEiLCJ0eXBlc180IiwidGVsZW1ldHJ5XzEiLCJjb25zdGFudHNfMiIsInR5cGVzXzUiLCJqZWRpRW5hYmxlZFNldHRpbmciLCJMU19NSU5fT1NfVkVSU0lPTlMiLCJPU1R5cGUiLCJPU1giLCJPU0Rpc3RybyIsIlVua25vd24iLCJXaW5kb3dzIiwiTGludXgiLCJVYnVudHUiLCJEZWJpYW4iLCJSSEVMIiwiQ2VudE9TIiwiRmVkb3JhIiwiRXh0ZW5zaW9uQWN0aXZhdGlvblNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VDb250YWluZXIiLCJ3b3Jrc3BhY2VTZXJ2aWNlIiwiZ2V0IiwiSVdvcmtzcGFjZVNlcnZpY2UiLCJvdXRwdXQiLCJJT3V0cHV0Q2hhbm5lbCIsIlNUQU5EQVJEX09VVFBVVF9DSEFOTkVMIiwiYXBwU2hlbGwiLCJJQXBwbGljYXRpb25TaGVsbCIsImRpc3Bvc2FibGVzIiwiSURpc3Bvc2FibGVSZWdpc3RyeSIsInB1c2giLCJvbkRpZENoYW5nZUNvbmZpZ3VyYXRpb24iLCJiaW5kIiwiYWN0aXZhdGUiLCJjdXJyZW50QWN0aXZhdG9yIiwiamVkaSIsInVzZUplZGkiLCJpc0xTU3VwcG9ydGVkIiwic2hvd1dhcm5pbmdNZXNzYWdlIiwic2VuZFRlbGVtZXRyeUV2ZW50IiwiUFlUSE9OX0xBTkdVQUdFX1NFUlZFUl9QTEFURk9STV9OT1RfU1VQUE9SVEVEIiwibG9nU3RhcnR1cCIsImFjdGl2YXRvck5hbWUiLCJFeHRlbnNpb25BY3RpdmF0b3JzIiwiSmVkaSIsIkRvdE5ldCIsImFjdGl2YXRvciIsIklFeHRlbnNpb25BY3RpdmF0b3IiLCJkaXNwb3NlIiwiZGVhY3RpdmF0ZSIsImlnbm9yZUVycm9ycyIsImlzSmVkaSIsIm91dHB1dExpbmUiLCJhcHBlbmRMaW5lIiwiZXZlbnQiLCJ3b3Jrc3BhY2VzVXJpcyIsImhhc1dvcmtzcGFjZUZvbGRlcnMiLCJ3b3Jrc3BhY2VGb2xkZXJzIiwibWFwIiwid29ya3NwYWNlIiwidXJpIiwidW5kZWZpbmVkIiwiZmluZEluZGV4IiwiYWZmZWN0c0NvbmZpZ3VyYXRpb24iLCJpdGVtIiwic2hvd0luZm9ybWF0aW9uTWVzc2FnZSIsIklDb21tYW5kTWFuYWdlciIsImV4ZWN1dGVDb21tYW5kIiwiaXNMYW5ndWFnZVNlcnZlclRlc3QiLCJjb25maWd1cmFpb25TZXJ2aWNlIiwiSUNvbmZpZ3VyYXRpb25TZXJ2aWNlIiwiZmlsdGVyIiwiZ2V0U2V0dGluZ3MiLCJqZWRpRW5hYmxlZCIsImluamVjdGFibGUiLCJpbmplY3QiLCJJU2VydmljZUNvbnRhaW5lciIsInNlcnZpY2VzIiwicGxhdGZvcm0iLCJJUGxhdGZvcm1TZXJ2aWNlIiwibWluVmVyIiwib3NUeXBlIiwiZGlzdHJvIiwidmVyIiwiaW5mbyIsInR5cGUiLCJub3JtYWxpemVWZXJzaW9uIiwidmVyc2lvbiIsImNvbXBhcmUiLCJyZXBsYWNlIiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFD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QUFmLENBQUosRUFBeUI7QUFDckIsV0FBUSxHQUFFQSxHQUFJLE1BQWQ7QUFDSCxHQUZELE1BR0ssSUFBSSxpQkFBaUJPLElBQWpCLENBQXNCUCxHQUF0QixDQUFKLEVBQWdDO0FBQ2pDLFdBQVEsR0FBRUEsR0FBSSxJQUFkO0FBQ0gsR0FGSSxNQUdBO0FBQ0QsV0FBT0EsR0FBUDtBQUNIO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0JztcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9hcHBsaWNhdGlvbi90eXBlc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb25zdGFudHNcIik7XG5yZXF1aXJlKFwiLi4vY29tbW9uL2V4dGVuc2lvbnNcIik7XG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uL2NvbW1vbi9wbGF0Zm9ybS90eXBlc1wiKTtcbmNvbnN0IHR5cGVzXzMgPSByZXF1aXJlKFwiLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgcGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdXRpbHMvcGxhdGZvcm1cIik7XG5jb25zdCB0eXBlc180ID0gcmVxdWlyZShcIi4uL2lvYy90eXBlc1wiKTtcbmNvbnN0IHRlbGVtZXRyeV8xID0gcmVxdWlyZShcIi4uL3RlbGVtZXRyeVwiKTtcbmNvbnN0IGNvbnN0YW50c18yID0gcmVxdWlyZShcIi4uL3RlbGVtZXRyeS9jb25zdGFudHNcIik7XG5jb25zdCB0eXBlc181ID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBqZWRpRW5hYmxlZFNldHRpbmcgPSAnamVkaUVuYWJsZWQnO1xuY29uc3QgTFNfTUlOX09TX1ZFUlNJT05TID0gW1xuICAgIC8vIFNlZTogaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9zdXBwb3J0aW5nL3JlcXVpcmVtZW50c1xuICAgIFtwbGF0Zm9ybV8xLk9TVHlwZS5PU1gsIHBsYXRmb3JtXzEuT1NEaXN0cm8uVW5rbm93biwgJzEwLjEyJ10sXG4gICAgW3BsYXRmb3JtXzEuT1NUeXBlLldpbmRvd3MsIHBsYXRmb3JtXzEuT1NEaXN0cm8uVW5rbm93biwgJzYuMSddLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3VzcGljaW91cy1jb21tZW50XG4gICAgLy8gVE9ETzogQXJlIHRoZXNlIHJpZ2h0P1xuICAgIFtwbGF0Zm9ybV8xLk9TVHlwZS5MaW51eCwgcGxhdGZvcm1fMS5PU0Rpc3Ryby5VYnVudHUsICcxNC4wNCddLFxuICAgIFtwbGF0Zm9ybV8xLk9TVHlwZS5MaW51eCwgcGxhdGZvcm1fMS5PU0Rpc3Ryby5EZWJpYW4sICc3J10sXG4gICAgW3BsYXRmb3JtXzEuT1NUeXBlLkxpbnV4LCBwbGF0Zm9ybV8xLk9TRGlzdHJvLlJIRUwsICc3J10sXG4gICAgW3BsYXRmb3JtXzEuT1NUeXBlLkxpbnV4LCBwbGF0Zm9ybV8xLk9TRGlzdHJvLkNlbnRPUywgJzcnXSxcbiAgICBbcGxhdGZvcm1fMS5PU1R5cGUuTGludXgsIHBsYXRmb3JtXzEuT1NEaXN0cm8uRmVkb3JhLCAnMjMnXVxuXTtcbmxldCBFeHRlbnNpb25BY3RpdmF0aW9uU2VydmljZSA9IGNsYXNzIEV4dGVuc2lvbkFjdGl2YXRpb25TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuc2VydmljZUNvbnRhaW5lciA9IHNlcnZpY2VDb250YWluZXI7XG4gICAgICAgIHRoaXMud29ya3NwYWNlU2VydmljZSA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMS5JV29ya3NwYWNlU2VydmljZSk7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18zLklPdXRwdXRDaGFubmVsLCBjb25zdGFudHNfMS5TVEFOREFSRF9PVVRQVVRfQ0hBTk5FTCk7XG4gICAgICAgIHRoaXMuYXBwU2hlbGwgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzEuSUFwcGxpY2F0aW9uU2hlbGwpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlcyA9IHNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzMuSURpc3Bvc2FibGVSZWdpc3RyeSk7XG4gICAgICAgIGRpc3Bvc2FibGVzLnB1c2godGhpcyk7XG4gICAgICAgIGRpc3Bvc2FibGVzLnB1c2godGhpcy53b3Jrc3BhY2VTZXJ2aWNlLm9uRGlkQ2hhbmdlQ29uZmlndXJhdGlvbih0aGlzLm9uRGlkQ2hhbmdlQ29uZmlndXJhdGlvbi5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEFjdGl2YXRvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBqZWRpID0gdGhpcy51c2VKZWRpKCk7XG4gICAgICAgICAgICBpZiAoIWplZGkgJiYgIWlzTFNTdXBwb3J0ZWQodGhpcy5zZXJ2aWNlQ29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwU2hlbGwuc2hvd1dhcm5pbmdNZXNzYWdlKCdUaGUgUHl0aG9uIExhbmd1YWdlIFNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIG9uIHlvdXIgcGxhdGZvcm0uJyk7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN1c3BpY2lvdXMtY29tbWVudFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IE9ubHkgc2VuZCBvbmNlIChldmVyKT9cbiAgICAgICAgICAgICAgICB0ZWxlbWV0cnlfMS5zZW5kVGVsZW1ldHJ5RXZlbnQoY29uc3RhbnRzXzIuUFlUSE9OX0xBTkdVQUdFX1NFUlZFUl9QTEFURk9STV9OT1RfU1VQUE9SVEVEKTtcbiAgICAgICAgICAgICAgICBqZWRpID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHRoaXMubG9nU3RhcnR1cChqZWRpKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2YXRvck5hbWUgPSBqZWRpID8gdHlwZXNfNS5FeHRlbnNpb25BY3RpdmF0b3JzLkplZGkgOiB0eXBlc181LkV4dGVuc2lvbkFjdGl2YXRvcnMuRG90TmV0O1xuICAgICAgICAgICAgY29uc3QgYWN0aXZhdG9yID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc181LklFeHRlbnNpb25BY3RpdmF0b3IsIGFjdGl2YXRvck5hbWUpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QWN0aXZhdG9yID0geyBqZWRpLCBhY3RpdmF0b3IgfTtcbiAgICAgICAgICAgIHlpZWxkIGFjdGl2YXRvci5hY3RpdmF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFjdGl2YXRvcikge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QWN0aXZhdG9yLmFjdGl2YXRvci5kZWFjdGl2YXRlKCkuaWdub3JlRXJyb3JzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9nU3RhcnR1cChpc0plZGkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dExpbmUgPSBpc0plZGkgPyAnU3RhcnRpbmcgSmVkaSBQeXRob24gbGFuZ3VhZ2UgZW5naW5lLicgOiAnU3RhcnRpbmcgTWljcm9zb2Z0IFB5dGhvbiBsYW5ndWFnZSBzZXJ2ZXIuJztcbiAgICAgICAgICAgIHRoaXMub3V0cHV0LmFwcGVuZExpbmUob3V0cHV0TGluZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbkRpZENoYW5nZUNvbmZpZ3VyYXRpb24oZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmtzcGFjZXNVcmlzID0gdGhpcy53b3Jrc3BhY2VTZXJ2aWNlLmhhc1dvcmtzcGFjZUZvbGRlcnMgPyB0aGlzLndvcmtzcGFjZVNlcnZpY2Uud29ya3NwYWNlRm9sZGVycy5tYXAod29ya3NwYWNlID0+IHdvcmtzcGFjZS51cmkpIDogW3VuZGVmaW5lZF07XG4gICAgICAgICAgICBpZiAod29ya3NwYWNlc1VyaXMuZmluZEluZGV4KHVyaSA9PiBldmVudC5hZmZlY3RzQ29uZmlndXJhdGlvbihgcHl0aG9uLiR7amVkaUVuYWJsZWRTZXR0aW5nfWAsIHVyaSkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGplZGkgPSB0aGlzLnVzZUplZGkoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRBY3RpdmF0b3IgJiYgdGhpcy5jdXJyZW50QWN0aXZhdG9yLmplZGkgPT09IGplZGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtID0geWllbGQgdGhpcy5hcHBTaGVsbC5zaG93SW5mb3JtYXRpb25NZXNzYWdlKCdQbGVhc2UgcmVsb2FkIHRoZSB3aW5kb3cgc3dpdGNoaW5nIGJldHdlZW4gbGFuZ3VhZ2UgZW5naW5lcy4nLCAnUmVsb2FkJyk7XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gJ1JlbG9hZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzEuSUNvbW1hbmRNYW5hZ2VyKS5leGVjdXRlQ29tbWFuZCgnd29ya2JlbmNoLmFjdGlvbi5yZWxvYWRXaW5kb3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVzZUplZGkoKSB7XG4gICAgICAgIGlmIChjb25zdGFudHNfMS5pc0xhbmd1YWdlU2VydmVyVGVzdCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd29ya3NwYWNlc1VyaXMgPSB0aGlzLndvcmtzcGFjZVNlcnZpY2UuaGFzV29ya3NwYWNlRm9sZGVycyA/IHRoaXMud29ya3NwYWNlU2VydmljZS53b3Jrc3BhY2VGb2xkZXJzLm1hcChpdGVtID0+IGl0ZW0udXJpKSA6IFt1bmRlZmluZWRdO1xuICAgICAgICBjb25zdCBjb25maWd1cmFpb25TZXJ2aWNlID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18zLklDb25maWd1cmF0aW9uU2VydmljZSk7XG4gICAgICAgIHJldHVybiB3b3Jrc3BhY2VzVXJpcy5maWx0ZXIodXJpID0+IGNvbmZpZ3VyYWlvblNlcnZpY2UuZ2V0U2V0dGluZ3ModXJpKS5qZWRpRW5hYmxlZCkubGVuZ3RoID4gMDtcbiAgICB9XG59O1xuRXh0ZW5zaW9uQWN0aXZhdGlvblNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKCksXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfNC5JU2VydmljZUNvbnRhaW5lcikpXG5dLCBFeHRlbnNpb25BY3RpdmF0aW9uU2VydmljZSk7XG5leHBvcnRzLkV4dGVuc2lvbkFjdGl2YXRpb25TZXJ2aWNlID0gRXh0ZW5zaW9uQWN0aXZhdGlvblNlcnZpY2U7XG5mdW5jdGlvbiBpc0xTU3VwcG9ydGVkKHNlcnZpY2VzKSB7XG4gICAgY29uc3QgcGxhdGZvcm0gPSBzZXJ2aWNlcy5nZXQodHlwZXNfMi5JUGxhdGZvcm1TZXJ2aWNlKTtcbiAgICBsZXQgbWluVmVyID0gJyc7XG4gICAgZm9yIChjb25zdCBbb3NUeXBlLCBkaXN0cm8sIHZlcl0gb2YgTFNfTUlOX09TX1ZFUlNJT05TKSB7XG4gICAgICAgIGlmIChwbGF0Zm9ybS5pbmZvLnR5cGUgPT09IG9zVHlwZSAmJiBwbGF0Zm9ybS5pbmZvLmRpc3RybyA9PT0gZGlzdHJvKSB7XG4gICAgICAgICAgICBtaW5WZXIgPSB2ZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluVmVyID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbWluVmVyID0gbm9ybWFsaXplVmVyc2lvbihtaW5WZXIpO1xuICAgIHJldHVybiBwbGF0Zm9ybS5pbmZvLnZlcnNpb24uY29tcGFyZShtaW5WZXIpID49IDA7XG59XG5mdW5jdGlvbiBub3JtYWxpemVWZXJzaW9uKHZlcikge1xuICAgIHZlciA9IHZlci5yZXBsYWNlKC9cXC4wMCovLCAnLicpO1xuICAgIGlmICgvXlxcZFxcZCokLy50ZXN0KHZlcikpIHtcbiAgICAgICAgcmV0dXJuIGAke3Zlcn0uMC4wYDtcbiAgICB9XG4gICAgZWxzZSBpZiAoL15cXGRcXGQqXFwuXFxkXFxkKiQvLnRlc3QodmVyKSkge1xuICAgICAgICByZXR1cm4gYCR7dmVyfS4wYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB2ZXI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZhdGlvblNlcnZpY2UuanMubWFwIl19