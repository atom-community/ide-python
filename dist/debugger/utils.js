"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setRpcService = setRpcService;
exports.listenToRemoteDebugCommands = listenToRemoteDebugCommands;
exports.getRemoteDebuggerCommandServiceByNuclideUri = getRemoteDebuggerCommandServiceByNuclideUri;

var _debugger = require("@atom-ide-community/nuclide-commons-atom/debugger");

var _projects = require("@atom-ide-community/nuclide-commons-atom/projects");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _observable = require("@atom-ide-community/nuclide-commons/observable");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _analytics = require("@atom-ide-community/nuclide-commons/analytics");

var RemoteDebuggerCommandServiceLocal = _interopRequireWildcard(require("./RemoteDebuggerCommandService"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _log4js = require("log4js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let _rpcService = null;

function getPythonAttachTargetProcessConfig(targetRootUri, target) {
  return {
    targetUri: targetRootUri,
    debugMode: "attach",
    adapterType: "python",
    config: getPythonAttachTargetConfig(target),
    servicedFileExtensions: ["py"]
  };
}

function getPythonAttachTargetConfig(target) {
  return {
    localRoot: target.localRoot,
    remoteRoot: target.remoteRoot,
    port: target.port,
    host: "127.0.0.1"
  };
}

function setRpcService(rpcService) {
  _rpcService = rpcService;
  return new _UniversalDisposable.default(() => {
    _rpcService = null;
  });
}

function listenToRemoteDebugCommands() {
  const addedHostnames = (0, _projects.observeAddedHostnames)().startWith("local");
  const remoteDebuggerServices = addedHostnames.flatMap(hostname => {
    const rootUri = hostname === "local" ? "" : _nuclideUri.default.createRemoteUri(hostname, "/");
    const service = getRemoteDebuggerCommandServiceByNuclideUri(rootUri);

    if (service == null) {
      (0, _log4js.getLogger)().error("null remote command service for uri:", rootUri);
      return _rxjsCompatUmdMin.Observable.empty();
    } else {
      return _rxjsCompatUmdMin.Observable.of({
        service,
        rootUri
      });
    }
  });
  return new _UniversalDisposable.default(remoteDebuggerServices.flatMap(({
    service,
    rootUri
  }) => {
    return service.observeAttachDebugTargets().refCount().map(targets => findDuplicateAttachTargetIds(targets));
  }).subscribe(duplicateTargetIds => notifyDuplicateDebugTargets(duplicateTargetIds)), remoteDebuggerServices.flatMap(({
    service,
    rootUri
  }) => {
    return service.observeRemoteDebugCommands().refCount().catch(error => {
      // eslint-disable-next-line no-console
      console.warn("Failed to listen to remote debug commands - " + "You could be running locally with two Atom windows. " + `IsLocal: ${String(rootUri === "")}`);
      return _rxjsCompatUmdMin.Observable.empty();
    }).map(command => ({
      rootUri,
      command
    }));
  }).let((0, _observable.fastDebounce)(500)).subscribe(async ({
    rootUri,
    command
  }) => {
    const attachProcessConfig = getPythonAttachTargetProcessConfig(rootUri, command.target);
    const debuggerService = await (0, _debugger.getDebuggerService)();
    (0, _analytics.track)("fb-python-debugger-auto-attach");
    debuggerService.startVspDebugging(attachProcessConfig); // Otherwise, we're already debugging that target.
  }));
}

let shouldNotifyDuplicateTargets = true;
let duplicateTargetsNotification;

function notifyDuplicateDebugTargets(duplicateTargetIds) {
  if (duplicateTargetIds.size > 0 && shouldNotifyDuplicateTargets && duplicateTargetsNotification == null) {
    const formattedIds = Array.from(duplicateTargetIds).join(", ");
    duplicateTargetsNotification = atom.notifications.addInfo(`Debugger: duplicate attach targets: \`${formattedIds}\``, {
      buttons: [{
        onDidClick: () => {
          shouldNotifyDuplicateTargets = false;

          if (duplicateTargetsNotification != null) {
            duplicateTargetsNotification.dismiss();
          }
        },
        text: "Ignore"
      }],
      description: `Nuclide debugger detected duplicate attach targets with ids (${formattedIds}) ` + "That could be instagram running multiple processes - check out https://our.intern.facebook.com/intern/dex/instagram-server/debugging-with-nuclide/",
      dismissable: true
    });
    duplicateTargetsNotification.onDidDismiss(() => {
      duplicateTargetsNotification = null;
    });
  }
}

function findDuplicateAttachTargetIds(targets) {
  const targetIds = new Set();
  const duplicateTargetIds = new Set();
  targets.forEach(target => {
    const {
      id
    } = target;

    if (id == null) {
      return;
    }

    if (targetIds.has(id)) {
      duplicateTargetIds.add(id);
    } else {
      targetIds.add(id);
    }
  });
  return duplicateTargetIds;
}

function getRemoteDebuggerCommandServiceByNuclideUri(uri) {
  if (_rpcService == null && !_nuclideUri.default.isRemote(uri)) {
    return RemoteDebuggerCommandServiceLocal;
  }

  return (0, _nullthrows.default)(_rpcService).getServiceByNuclideUri("RemoteDebuggerCommandService", uri);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,